{***********************************************
Drum Lab
Single Instrument Kit Page
Author: Native Instruments
Written by: Thanos Kazakos
Modified: August 7th, 2013
*************************************************}

on init
{perfview} 
	message("")
	set_script_title("Kit Page")
	make_perfview
	set_ui_height_px(390)
	set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"background-single")
	set_control_par_str($INST_ICON_ID, $CONTROL_PAR_PICTURE, "NID_instrument_icon")

	pgs_create_key(COMMAND, 1)	{key: 		-1 	-> 	Prep
											0 	-> 	Purge
											1	->	Mixer (Sound Preset -> SOUND)
											2	->	Groove
											3	->	Init
											4	->	Randomize
											5	-> 	Snare
											6	->	Mapping}

	declare const $SD_CONTROLS_VISIBLE := 0

{Sementics}
	declare const $YES			 :=  1
	declare const $NO			 :=  0
	declare const $ON			 :=  1
	declare const $OFF			 :=  0
	declare const $PRESSED		 :=  1
	declare const $NULL			 := -1
	declare const $FILTER_ON	 :=  0
    declare const $FILTER_OFF	 :=  1
    declare const $LOAD_SAMPLES	 :=  1
    declare const $PURGE_SAMPLES :=  0
	
{general variables & Arrays}
	declare $count
	declare $count_1
	declare $count_2
	declare $count_3
	declare $count_4
	declare $key_count
	declare $new_vel
	declare $temp_1
	declare $text_change_flag
	declare $note_id
	declare $cur_note
	declare $last_note

	declare $init_flag := 1

	declare $a
	declare $b
	declare $c
	declare $d
	declare $x
	declare $y
	declare $z
	declare $tile_count
	declare $tile_count_2
	declare $group_count
	declare $mic_count
	declare $cur_instrument
	declare $last_instrument
	declare $inst_count
	declare $mic_group_offset
	declare $elec_grp_offset
	{/helpers}

{CONSTANTS}
	declare const $LISTENER_RESOL := 2		{in times per beat}	
	set_listener($NI_SIGNAL_TIMER_BEAT, $LISTENER_RESOL)
	
	declare const $KNOB_ADJUSTMENT_TOLERANCE := 150000
	declare $last_callback_id
	
	declare const $AT_THRESHOLD := 127
	
	declare const $FONT_1_ID := 12 	{dark }
	declare const $FONT_2_ID := 13 	{light}

	declare const $GROUP_NUM := 372

	declare const $MIDI_PTTRN_LOW	:= 12
	declare const $MIDI_PTTRN_HIGH	:= 23

	declare @ART_MENU_ALIGNMENT_HELPER
	@ART_MENU_ALIGNMENT_HELPER := "          "

	declare const $PANEL_X := 0
	declare const $PANEL_Y := - 154

	{behaviour}
	declare const $MAX_VOLUME := 399000 {634000}
	declare const $MAX_VOLUME_VERB := 399000
	declare const $LOAD_WAIT := 150
	{mouse behaviour}
	declare const $MB_KNOB_SMALL := 500
	declare const $MB_KNOB_LARGE := -500
	declare const $MB_SLIDER_VERT := -500
	declare const $MB_SLIDER_HOR := 1500
	declare const $TL_KNOB_SMALL	:= -500
	declare const $TL_FADER_BIG		:= -2000
	declare const $TL_FADER_SMALL	:= -1000

	{fonts}
	declare const $FONT_ID  := 15 {dark dropdowns}
	declare const $FONT_ID1 := 12 {dark dropdowns}
	declare const $FONT_ID2 := 14 {light dropdowns}

	declare const $NUM_TILES					:= 19
	declare const $NUM_INSTRUMENTS				:= 20
	declare const $NUM_CONTROLS_SOURCE			:= 15
	declare const $NUM_CONTROLS_FX				:= 13
	declare const $NUM_CONTROLS_ONOFF			:= 4
	declare const $NUM_CONTROLS_MASTER_FX		:= 14
	declare const $NUM_CONTROLS_MASTER_FX_ONOFF	:= 4
	declare const $NUM_CONTROLS_REVERB			:= 2
	declare const $MAX_NUM_TOTAL_ART			:= 126
	declare const $MAX_NUM_GROUPS				:= 372

	declare const $KICK_ID	:= 0
	declare const $SNARE_ID	:= 1
	declare const $HH_ID	:= 2
	declare const $TOM1_ID	:= 3
	declare const $TOM2_ID	:= 4
	declare const $TOM3_ID	:= 5
	declare const $TOM4_ID	:= 6
	declare const $TOM5_ID	:= 7
	declare const $CYMB1_ID	:= 8
	declare const $CYMB2_ID	:= 9
	declare const $CYMB3_ID	:= 10
	declare const $CYMB4_ID	:= 11
	declare const $CYMB5_ID	:= 12
	declare const $CYMB6_ID	:= 13
	declare const $CYMB7_ID	:= 14
	declare const $PERC1_ID	:= 15
	declare const $PERC2_ID	:= 16
	declare const $PERC3_ID	:= 17
	declare const $PERC4_ID	:= 18
	declare const $PERC5_ID	:= 19
	declare const $END_ID	:= 20

	declare const $TILE_OHS		:= 00
	declare const $TILE_OHM		:= 01
	declare const $TILE_ROOM	:= 02
	declare const $TILE_REV		:= 03
	declare const $TILE_PERC1	:= 04
	declare const $TILE_PERC2	:= 05
	declare const $TILE_PERC3	:= 06
	declare const $TILE_TOM1	:= 07
	declare const $TILE_TOM2	:= 08
	declare const $TILE_TOM3	:= 09
	declare const $TILE_CYMB1	:= 10
	declare const $TILE_MASTER	:= 11
	declare const $TILE_PERC4	:= 12
	declare const $TILE_HIHAT	:= 13
	declare const $TILE_SNARE	:= 14
	declare const $TILE_KICK	:= 15
	declare const $TILE_CYMB2	:= 16
	declare const $TILE_PERC5	:= 17
	declare const $TILE_CYMB3	:= 18

	declare const $NUM_CHANNELS := 11 	{minus reverb as it's not a bus}

	declare const $KICK_CHANNEL		:= 0
	declare const $SNARE_CHANNEL	:= 1
	declare const $HH_CHANNEL		:= 2
	declare const $TOM1_CHANNEL		:= 3
	declare const $TOM2_CHANNEL		:= 4
	declare const $TOM3_CHANNEL		:= 5
	declare const $PERC2_CHANNEL	:= 6
	declare const $PERC3_CHANNEL	:= 7
	declare const $OHS_CHANNEL		:= 8
	declare const $OHM_CHANNEL		:= 9
	declare const $ROOM_CHANNEL		:= 10
	declare const $REVERB_CHANNEL	:= 11

	declare const $SRC_LBL_AC		:= 00
	declare const $SRC_LBL_EL		:= 01
	declare const $SRC_LBL_TUNE		:= 02
	declare const $SRC_LBL_OUT		:= 03
	declare const $SRC_LB_OHRM		:= 04
	declare const $SRC_LBL_TRSH		:= 05
	declare const $SRC_LBL_ATT		:= 06
	declare const $SRC_LBL_HLD		:= 07
	declare const $SRC_LBL_DEC		:= 08
	declare const $SRC_LBL_E_TUNE	:= 09
	declare const $SRC_LBL_E_FILT	:= 10
	declare const $SRC_LBL_E_OFS	:= 11
	declare const $SRC_LBL_E_ATT	:= 12
	declare const $SRC_LBL_E_HLD	:= 13
	declare const $SRC_LBL_E_DEC	:= 14
	declare const $SRC_LBL_PLATE	:= 15
	declare const $SRC_LBL_OH		:= 16
	declare const $SRC_LBL_TOP		:= 17
	declare const $SRC_LBL_VOL		:= 18

	
	declare %AC_INSTRUMENT_OFFSET[$NUM_INSTRUMENTS + 1] := ($NULL)
	%AC_INSTRUMENT_OFFSET[$KICK_ID]	 := 0
	%AC_INSTRUMENT_OFFSET[$SNARE_ID] := 4
	%AC_INSTRUMENT_OFFSET[$HH_ID]	 := 20
	%AC_INSTRUMENT_OFFSET[$TOM1_ID]	 := 40
	%AC_INSTRUMENT_OFFSET[$TOM2_ID]	 := 47
	%AC_INSTRUMENT_OFFSET[$TOM3_ID]	 := 54
	%AC_INSTRUMENT_OFFSET[$TOM4_ID]	 := 61
	%AC_INSTRUMENT_OFFSET[$TOM5_ID]	 := 68
	%AC_INSTRUMENT_OFFSET[$CYMB1_ID] := 75
	%AC_INSTRUMENT_OFFSET[$CYMB2_ID] := 80
	%AC_INSTRUMENT_OFFSET[$CYMB3_ID] := 85
	%AC_INSTRUMENT_OFFSET[$CYMB4_ID] := 91
	%AC_INSTRUMENT_OFFSET[$CYMB5_ID] := 95
	%AC_INSTRUMENT_OFFSET[$CYMB6_ID] := 99
	%AC_INSTRUMENT_OFFSET[$CYMB7_ID] := 103
	%AC_INSTRUMENT_OFFSET[$PERC1_ID] := 107
	%AC_INSTRUMENT_OFFSET[$PERC2_ID] := 111
	%AC_INSTRUMENT_OFFSET[$PERC3_ID] := 115
	%AC_INSTRUMENT_OFFSET[$PERC4_ID] := 118
	%AC_INSTRUMENT_OFFSET[$PERC5_ID] := 121
	%AC_INSTRUMENT_OFFSET[$END_ID]   := 126

	{Group Lists per Articulation
	-----------------------------
	The number of the row is the note number the articulation is assigned to (refer to the technical mapping document).
	
	meaning of columns:
	#1: Group index of the 1st Direct mic of the articulation
	#2: Group index of the 2nd Direct mic of the articulation
	#3: Group index of the 3rd Direct mic of the articulation (TRASH MIC only kick & snare)
	#4: Group index of the Snare Bleed of the articulation
	#5: Group index of the 1st Kit mic of the articulation
	#6: Group index of the 2nd Kit mic of the articulation
	#7: Group index of the 3rd Kit mic of the articulation
	#8: Group index of the 4th Kit mic of the articulation	
	
	Note: 	If a certain mic type is not available (eg, Snare Bleed for the snare hits), 
			-1 is going	to be used in the respective column.}

	declare %AC_GROUP_DATA[$MAX_NUM_TOTAL_ART * 8] := (...
			{KICK}		{0}	    0, 40, 59, -1,  78, 136, 194, -1,...
						{1}	    0, 40, 59, -1,  78, 136, 194, -1,...
						{2}	   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{3}	   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{SNARE 1}	{4}		9, 49, 68, -1,  87, 145, 203, -1,...
						{5}		9, 49, 68, -1,  87, 145, 203, -1,...
						{6}		9, 49, 68, -1,  87, 145, 203, -1,...
						{7}		9, 49, 68, -1,  87, 145, 203, -1,...
						{8}		9, 49, 68, -1,  87, 145, 203, -1,...
						{9}		9, 49, 68, -1,  87, 145, 203, -1,...
						{10}	9, 49, 68, -1,  87, 145, 203, -1,...
						{11}	9, 49, 68, -1,  87, 145, 203, -1,...
						{12}	9, 49, 68, -1,  87, 145, 203, -1,...
						{13}	9, 49, 68, -1,  87, 145, 203, -1,...
						{14}	9, 49, 68, -1,  87, 145, 203, -1,...
						{15}	9, 49, 68, -1,  87, 145, 203, -1,...
						{16}    9, 49, 68, -1,  87, 145, 203, -1,...
						{17}    9, 49, 68, -1,  87, 145, 203, -1,...
						{18}    9, 49, 68, -1,  87, 145, 203, -1,...
						{19}	9, 49, 68, -1,  87, 145, 203, -1,...
			{HI-HAT}	{20}   19, -1, -1, -1,  97, 155, 213, -1,...
						{21}   19, -1, -1, -1,  97, 155, 213, -1,...
						{22}   19, -1, -1, -1,  97, 155, 213, -1,...
						{23}   19, -1, -1, -1,  97, 155, 213, -1,...
						{24}   19, -1, -1, -1,  97, 155, 213, -1,...
						{25}   19, -1, -1, -1,  97, 155, 213, -1,...
						{26}   19, -1, -1, -1,  97, 155, 213, -1,...
						{17}   19, -1, -1, -1,  97, 155, 213, -1,...
						{28}   19, -1, -1, -1,  97, 155, 213, -1,...
						{29}   19, -1, -1, -1,  97, 155, 213, -1,...
						{30}   19, -1, -1, -1,  97, 155, 213, -1,...
						{31}   19, -1, -1, -1,  97, 155, 213, -1,...
						{32}   19, -1, -1, -1,  97, 155, 213, -1,...
						{33}   19, -1, -1, -1,  97, 155, 213, -1,...
						{34}   19, -1, -1, -1,  97, 155, 213, -1,...
						{35}   19, -1, -1, -1,  97, 155, 213, -1,...
						{36}   19, -1, -1, -1,  97, 155, 213, -1,...
						{37}   19, -1, -1, -1,  97, 155, 213, -1,...
						{38}   19, -1, -1, -1,  97, 155, 213, -1,...
						{39}   19, -1, -1, -1,  97, 155, 213, -1,...
			{TOM 1}		{40}   26, -1, -1, -1, 104, 162, 220, -1,...
						{41}   26, -1, -1, -1, 104, 162, 220, -1,...
						{42}   26, -1, -1, -1, 104, 162, 220, -1,...
						{43}   26, -1, -1, -1, 104, 162, 220, -1,...
						{44}   26, -1, -1, -1, 104, 162, 220, -1,...
						{45}   26, -1, -1, -1, 104, 162, 220, -1,...
						{46}   26, -1, -1, -1, 104, 162, 220, -1,...
			{TOM 2}		{47}   28, -1, -1, -1, 106, 164, 222, -1,...
						{48}   28, -1, -1, -1, 106, 164, 222, -1,...
						{49}   28, -1, -1, -1, 106, 164, 222, -1,...
						{50}   28, -1, -1, -1, 106, 164, 222, -1,...
						{51}   28, -1, -1, -1, 106, 164, 222, -1,...
						{52}   28, -1, -1, -1, 106, 164, 222, -1,...
						{53}   28, -1, -1, -1, 106, 164, 222, -1,...
			{TOM 3}		{54}   30, -1, -1, -1, 108, 166, 224, -1,...
						{55}   30, -1, -1, -1, 108, 166, 224, -1,...
						{56}   30, -1, -1, -1, 108, 166, 224, -1,...
						{57}   30, -1, -1, -1, 108, 166, 224, -1,...
						{58}   30, -1, -1, -1, 108, 166, 224, -1,...
						{59}   30, -1, -1, -1, 108, 166, 224, -1,...
						{60}   30, -1, -1, -1, 108, 166, 224, -1,...
			{TOM 4}		{61}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{62}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{63}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{64}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{65}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{66}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{67}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{TOM 5}		{68}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{69}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{70}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{71}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{72}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{73}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{74}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{CYMBAL 1}	{75}   -1, -1, -1, -1, 110, 168, 226, -1,...
						{76}   -1, -1, -1, -1, 110, 168, 226, -1,...
						{77}   -1, -1, -1, -1, 110, 168, 226, -1,...
						{78}   -1, -1, -1, -1, 110, 168, 226, -1,...
						{79}   -1, -1, -1, -1, 110, 168, 226, -1,...
			{CYMBAL 2}	{80}   -1, -1, -1, -1, 112, 170, 228, -1,...
						{81}   -1, -1, -1, -1, 112, 170, 228, -1,...
						{82}   -1, -1, -1, -1, 112, 170, 228, -1,...
						{83}   -1, -1, -1, -1, 112, 170, 228, -1,...
						{84}   -1, -1, -1, -1, 112, 170, 228, -1,...
			{CYMBAL 3}	{85}   -1, -1, -1, -1, 114, 172, 230, -1,...
						{86}   -1, -1, -1, -1, 114, 172, 230, -1,...
						{87}   -1, -1, -1, -1, 114, 172, 230, -1,...
						{88}   -1, -1, -1, -1, 114, 172, 230, -1,...
						{89}   -1, -1, -1, -1, 114, 172, 230, -1,...
						{90}   -1, -1, -1, -1, 114, 172, 230, -1,...
			{CYMBAL 4}	{91}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{92}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{93}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{94}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{CYMBAL 5}	{95}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{96}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{97}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{98}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{CYMBAL 6}	{99}   -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{100}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{101}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{102}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{CYMBAL 7}	{103}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{104}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{105}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{106}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{PERC A}	{107}  -1, -1, -1, -1, 116, 174, 232, -1,...
						{108}  -1, -1, -1, -1, 116, 174, 232, -1,...
						{109}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{110}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{PERC B}	{111}  32, -1, -1, -1, 120, 178, 236, -1,...
						{112}  32, -1, -1, -1, 120, 178, 236, -1,...
						{113}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{114}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{PERC C}	{115}  36, -1, -1, -1, 124, 182, 240, -1,...
						{116}  36, -1, -1, -1, 124, 182, 240, -1,...
						{117}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{PERC D}	{118}  -1, -1, -1, -1, 128, 186, 244, -1,...
						{119}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{120}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
			{PERC E}	{121}  -1, -1, -1, -1, 132, 190, 248, -1,...
						{122}  -1, -1, -1, -1, 132, 190, 248, -1,...
						{123}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{124}  -1, -1, -1, -1,  -1,  -1,  -1, -1,...
						{125}  -1, -1, -1, -1,  -1,  -1,  -1, -1)

 	declare %EL_GROUP_DATA[7]
	%EL_GROUP_DATA[$KICK_ID]  := 252
	%EL_GROUP_DATA[$SNARE_ID] := 272
	%EL_GROUP_DATA[$HH_ID]	  := 292
	%EL_GROUP_DATA[$TOM1_ID]  := 312
	%EL_GROUP_DATA[$TOM2_ID]  := 332
	%EL_GROUP_DATA[$TOM3_ID]  := 352
	%EL_GROUP_DATA[$TOM4_ID]  := $MAX_NUM_GROUPS

	{Instruments per note}
	declare %note_instruments[128] := ($NULL) {which key belongs to which instrument}
	$x := 0
	$y := 0
	while ($x < %AC_INSTRUMENT_OFFSET[$END_ID])
		if ($x >= %AC_INSTRUMENT_OFFSET[$y + 1])
			inc($y)
		end if
		%note_instruments[$x] := $y
		inc($x)
	end while

	{Acoustic Layers per Tile}
	declare %Ac_Layer_per_Tile[$NUM_TILES] := ($NULL)
			%Ac_Layer_per_Tile[$TILE_KICK]	:= 9
			%Ac_Layer_per_Tile[$TILE_SNARE]	:= 10
			%Ac_Layer_per_Tile[$TILE_HIHAT]	:= 7
			%Ac_Layer_per_Tile[$TILE_TOM1]	:= 2
			%Ac_Layer_per_Tile[$TILE_TOM2]	:= 2
			%Ac_Layer_per_Tile[$TILE_TOM3]	:= 2
			%Ac_Layer_per_Tile[$TILE_CYMB1]	:= 2
			%Ac_Layer_per_Tile[$TILE_CYMB2]	:= 2
			%Ac_Layer_per_Tile[$TILE_CYMB3]	:= 2
			%Ac_Layer_per_Tile[$TILE_PERC1]	:= 4
			%Ac_Layer_per_Tile[$TILE_PERC2]	:= 4
			%Ac_Layer_per_Tile[$TILE_PERC3]	:= 4
			%Ac_Layer_per_Tile[$TILE_PERC4]	:= 4
			%Ac_Layer_per_Tile[$TILE_PERC5]	:= 4

	{Electronic Layers Per Tile}
	declare %El_Layer_per_Tile[$NUM_TILES] := ($NULL)
			%El_Layer_per_Tile[$TILE_KICK]	:= 20
			%El_Layer_per_Tile[$TILE_SNARE]	:= 20
			%El_Layer_per_Tile[$TILE_HIHAT]	:= 20
			%El_Layer_per_Tile[$TILE_TOM1]	:= 20
			%El_Layer_per_Tile[$TILE_TOM2]	:= 20
			%El_Layer_per_Tile[$TILE_TOM3]	:= 20

	declare %Tile_to_Inst_remap[$NUM_TILES]  := ($NULL)
			%Tile_to_Inst_remap[$TILE_KICK]	 := $KICK_ID
			%Tile_to_Inst_remap[$TILE_SNARE] := $SNARE_ID
			%Tile_to_Inst_remap[$TILE_HIHAT] := $HH_ID
			%Tile_to_Inst_remap[$TILE_TOM1]	 := $TOM1_ID
			%Tile_to_Inst_remap[$TILE_TOM2]	 := $TOM2_ID
			%Tile_to_Inst_remap[$TILE_TOM3]	 := $TOM3_ID
			%Tile_to_Inst_remap[$TILE_CYMB1] := $CYMB1_ID
			%Tile_to_Inst_remap[$TILE_CYMB2] := $CYMB2_ID
			%Tile_to_Inst_remap[$TILE_CYMB3] := $CYMB3_ID
			%Tile_to_Inst_remap[$TILE_PERC1] := $PERC1_ID
			%Tile_to_Inst_remap[$TILE_PERC2] := $PERC2_ID
			%Tile_to_Inst_remap[$TILE_PERC3] := $PERC3_ID
			%Tile_to_Inst_remap[$TILE_PERC4] := $PERC4_ID
			%Tile_to_Inst_remap[$TILE_PERC5] := $PERC5_ID

	declare %Inst_to_Tile_remap[$NUM_TILES + 1] := ($NULL)
			%Inst_to_Tile_remap[$KICK_ID]	:= $TILE_KICK
			%Inst_to_Tile_remap[$SNARE_ID]	:= $TILE_SNARE
			%Inst_to_Tile_remap[$HH_ID]		:= $TILE_HIHAT
			%Inst_to_Tile_remap[$TOM1_ID]	:= $TILE_TOM1
			%Inst_to_Tile_remap[$TOM2_ID]	:= $TILE_TOM2
			%Inst_to_Tile_remap[$TOM3_ID]	:= $TILE_TOM3
			%Inst_to_Tile_remap[$CYMB1_ID]	:= $TILE_CYMB1
			%Inst_to_Tile_remap[$CYMB2_ID]	:= $TILE_CYMB2
			%Inst_to_Tile_remap[$CYMB3_ID]	:= $TILE_CYMB3
			%Inst_to_Tile_remap[$PERC1_ID]	:= $TILE_PERC1
			%Inst_to_Tile_remap[$PERC2_ID]	:= $TILE_PERC2
			%Inst_to_Tile_remap[$PERC3_ID]	:= $TILE_PERC3
			%Inst_to_Tile_remap[$PERC4_ID]	:= $TILE_PERC4
			%Inst_to_Tile_remap[$PERC5_ID]	:= $TILE_PERC5

	{for async_complete callbacks}
	declare %check_id[16]

	{fx slots}
	{group level}
	declare const $GAIN_SLOT	:= 2
	declare const $BUS_INVERT_SLOT	:= 5
    declare const $FX_SLOT_LP  := 4
    declare const $FX_SLOT_HP  := 5
	{insert level}
	declare const $TRANS1_SLOT	:= 0
	declare const $COMP_SLOT	:= 1
	declare const $SAT_SLOT 	:= 2
	declare const $EQ1_SLOT		:= 3
	declare const $SPREAD_SLOT	:= 6
	declare const $SEND_SLOT	:= 7
	{send level}
	declare const $REVERB_SLOT	:= 0

	{BUSSES}
	declare const $BUS_KICK	 := 00
	declare const $BUS_SNARE := 01
	declare const $BUS_HIHAT := 02
	declare const $BUS_TOM1	 := 03
	declare const $BUS_TOM2	 := 04
	declare const $BUS_TOM3	 := 05
	declare const $BUS_PERC2 := 06
	declare const $BUS_PERC3 := 07
	declare const $BUS_OHS	 := 08
	declare const $BUS_OHM	 := 09
	declare const $BUS_ROOM	 := 10
	
	declare const $NUM_ROW_TLS	 := 4
	declare const $NUM_COL_TLS	 := 8
	declare const $SML_TL_W		 := 77
	declare const $SML_TL_H		 := 76
	declare const $LG_TL_W		 := 156
	declare const $LG_TL_H		 := 154
	declare const $MAST_TL_H	 := 228
	declare const $KIT_TL_W		 := 158
	declare const $H_SPACING	 := 2
	declare const $V_SPACING	 := 1
	declare const $TILES_Y_START := 77
	
	{used for Equal Power Balance Slider}
	declare const $BAL_MIDWAY_VOL := 25000  {set at 25000 =  - 6db, @50000 = 0db}
	declare const $MIC_MIDWAY_VOL := 12500  {set at 25000 =  - 6db, @50000 = 0db}

	{FX}
	declare const $TRANS_ATTACK	 := 00
	declare const $TRANS_RELEASE := 01
	declare const $COMP_AMOUNT	 := 02
	declare const $COMP_ATTACK	 := 03
	declare const $SAT_GAIN		 := 04
	declare const $SAT_LEVEL	 := 05
	declare const $EQ_LOW_FREQ	 := 06
	declare const $EQ_LOW_GAIN	 := 07
	declare const $EQ_MID_FREQ	 := 08
	declare const $EQ_MID_GAIN	 := 09
	declare const $EQ_HI_FREQ	 := 10
	declare const $EQ_HI_GAIN	 := 11
	declare const $RVB_SEND		 := 12

	declare const $MAST_TRANS_ATTACK	:= 00
	declare const $MAST_TRANS_RELEASE	:= 01
	declare const $MAST_COMP_THRES		:= 02
	declare const $MAST_COMP_ATTACK		:= 03
	declare const $MAST_COMP_RATIO		:= 04
	declare const $MAST_COMP_MAKEUP		:= 05
	declare const $MAST_SAT_GAIN		:= 06
	declare const $MAST_SAT_LEVEL		:= 07
	declare const $MAST_EQ_LOW_FREQ		:= 08
	declare const $MAST_EQ_LOW_GAIN		:= 09
	declare const $MAST_EQ_MID_FREQ		:= 10
	declare const $MAST_EQ_MID_GAIN		:= 11
	declare const $MAST_EQ_HI_FREQ		:= 12
	declare const $MAST_EQ_HI_GAIN		:= 13

	declare const $SRC_AC_EL_BAL	 := 00
	declare const $SRC_AC_TUNE		 := 01
	declare const $SRC_AC_MIC_BAL	 := 02
	declare const $SRC_AC_ROOM_LEVEL := 03
	declare const $SRC_AC_TRASH		 := 04
	declare const $SRC_AC_ATTACK	 := 05
	declare const $SRC_AC_HOLD		 := 06
	declare const $SRC_AC_DECAY		 := 07
	declare const $SRC_EL_TUNE		 := 08
	declare const $SRC_EL_FILTER	 := 09
	declare const $SRC_EL_DELAY		 := 10
	declare const $SRC_EL_ATTACK	 := 11
	declare const $SRC_EL_HOLD		 := 12
	declare const $SRC_EL_DECAY		 := 13
	declare const $SRC_PERC_PLATE	 := 14

	declare const $LABEL_WAIT := 500

	{panel view}
	declare const $SOURCE_MAIN_VIEW	:= 0
	declare const $SOURCE_GEN_VIEW	:= 1
	declare const $SOURCE_SIMPLE	:= 2
	declare const $SOURCE_PERC		:= 3
	declare const $EFFECTS_VIEW		:= 4
	declare const $REVERB_VIEW		:= 5
	declare const $MASTER_VIEW		:= 6

	{Layer Menus}
	declare const $NUM_EL_LAYERS := 20

	declare const $NUM_AC_KICK	 := 9
	declare const $NUM_AC_SNARE	 := 10
	declare const $NUM_AC_HIHAT	 := 7
	declare const $NUM_AC_TOM1	 := 2
	declare const $NUM_AC_TOM2	 := 2
	declare const $NUM_AC_TOM3	 := 2
	declare const $NUM_AC_CYMB1	 := 2
	declare const $NUM_AC_CYMB2	 := 2
	declare const $NUM_AC_CYMB3	 := 2
	declare const $NUM_AC_PERC1	 := 4
	declare const $NUM_AC_PERC2	 := 4
	declare const $NUM_AC_PERC3	 := 4
	declare const $NUM_AC_PERC4	 := 4
	declare const $NUM_AC_PERC5	 := 4


	declare const $AC_INST_W_LAYERS := 14

	declare $reset_flag
	declare $rvb_reset_flag
	declare $load_ir_id

	declare $fx_pointer
	declare $src_pointer
	declare $mic_pointer
	declare $vol_pointer
	declare $pan_pointer
	declare $mute_pointer
	declare $solo_pointer
	declare $bus_index

	{temp holder values}
	declare $send_value
	declare $pan_value
	declare $mute_value
	declare $vol_value
	declare $mic_value
	declare $ir_value
	{/temp holder values}

{Equal Power Math Variables}
	declare %RoodThird[28] := (...
			 671,  717,  758,  795,  829,  861,  890,  917,  956,  956,...
			1002, 1002, 1045, 1045, 1084, 1084, 1121, 1121, 1156, 1156,...
			1204, 1204, 1204, 1204, 1263, 1263, 1263, 1263)

	declare $gain
	declare %equal_gain[10001]

	$a := 0
	while ($a < num_elements(%equal_gain) )
		%equal_gain[$a] := $gain
		if ($a < num_elements(%equal_gain) / 2)
			$gain := $gain + 14
		else
			$gain := $gain - 14			
		end if
		inc($a)
	end while

	declare $math_Input
	declare $math_Output
	declare $ac_vol
	declare $el_vol
	declare $snare_top_vol
	declare $snare_bot_vol
	declare $kick_out_vol
	declare $kick_sub_vol
	declare $temp_vol_1
	declare $temp_vol_2
	declare $oh_vol
	declare $room_vol
	declare $shift_counter 	{ Normalization, bit-trio shift counter }
	declare $absolute_value	{ Absolute value of input X }
	declare $m				{ m = Rem/r = A/r - r*r, where Rem = A - r*r*r }
	declare $temp_root		{ temporary result, root }

{FeedBack Compressor}
	declare %ingain[128] := (...
	408507, 408837, 409257, 410114, 411132, 412426, 413810, 415178,...
	416409, 417503, 418392, 419212, 420101, 421184, 422394, 423661,...
	425266, 427071, 428962, 431007, 433275, 434999, 436249, 437083,...
	437916, 438749, 439999, 441666, 444165, 446665, 449165, 451665,...
	454165, 455832, 457082, 458332, 459582, 461249, 463749, 467082,...
	470134, 473001, 474985, 476252, 476964, 478253, 480035, 482522,...
	485427, 488449, 491061, 493236, 495109, 496955, 499102, 501796,...
	505146, 509139, 513597, 518274, 522992, 527656, 532196, 536654,...
	541098, 545543, 549960, 554363, 558767, 563170, 567628, 572196,...
	576873, 581577, 586254, 590781, 595061, 599054, 602801, 606329,...
	609748, 613140, 616517, 619868, 623177, 626391, 629522, 632681,...
	635977, 639519, 643389, 647533, 651786, 655970, 659909, 663451,...
	666569, 669318, 671779, 674008, 676059, 677933, 679587, 680955,...
	682022, 682802, 683362, 683827, 684374, 685194, 688026, 690789,...
	697596, 704184, 710416, 718749, 727083, 731249, 741666, 754166,...
	762499, 770833, 783333, 791666, 804166, 822916, 843750, 875000)

	declare %outgain[128] := (...
	571751, 571849, 571946, 571770, 571275, 570401, 569134, 567488,...
	566153, 565127, 564101, 563076, 561366, 558631, 554870, 550768,...
	546323, 542905, 540512, 539144, 538461, 538119, 537435, 536409,...
	535041, 533332, 531965, 530939, 529913, 528546, 526836, 524443,...
	521366, 518289, 515896, 513845, 512136, 510768, 509400, 507349,...
	505298, 503246, 501195, 499144, 497947, 497264, 497093, 497435,...
	498290, 498974, 499487, 499829, 500000, 500000, 500000, 499583,...
	498333, 496249, 493332, 489166, 484582, 480416, 476249, 472082,...
	468749, 465832, 462916, 460832, 458749, 455832, 452082, 447499,...
	441666, 436260, 432114, 429230, 427606, 427242, 427271, 427249,...
	427133, 426871, 426378, 425612, 424532, 423109, 421318, 419184,...
	416696, 413851, 410665, 407218, 403581, 399916, 396401, 393229,...
	390507, 388320, 386624, 385311, 384204, 383164, 382084, 380935,...
	379759, 378665, 377735, 377024, 376546, 376272, 376136, 376067,...
	375999, 375848, 375520, 374904, 372621, 370379, 364066, 357931,...
	352083, 347916, 339583, 335416, 329166, 320833, 312500, 302083)

{TEXT ARRAYS}
	declare !channel_names[$NUM_TILES]
	{row 1}
	!channel_names[00]	:= "OH ST"
	!channel_names[01]	:= "OH M"
	!channel_names[02]	:= "Room M"
	!channel_names[03]	:= "Reverb"
	{row 2}
	!channel_names[04]	:= "Perc 1"
	!channel_names[05]	:= "Perc 2"
	!channel_names[06]	:= "Perc 3"
	!channel_names[07]	:= "Tom 1"
	!channel_names[08]	:= "Tom 2"
	!channel_names[09]	:= "Tom 3"
	!channel_names[10]	:= "Crash 1"
	!channel_names[11]	:= "Master"
	{row 3}
	!channel_names[12]	:= "Perc 4"
	!channel_names[13]	:= "HiHat"
	!channel_names[14]	:= "Snare"
	!channel_names[15]	:= "Kick"
	!channel_names[16]	:= "Crash 2"
	{Row 4}
	!channel_names[17]	:= "Perc 5"
	!channel_names[18]	:= "Ride"

	declare !source_auto_names[15]
	!source_auto_names[00] := "Ac/El Bal."
	!source_auto_names[01] := "Ac Tune"
	!source_auto_names[02] := "Ac Mic Bal"
	!source_auto_names[03] := "Ac OH/RM"
	!source_auto_names[04] := "Ac Trash"
	!source_auto_names[05] := "Ac Attack"
	!source_auto_names[06] := "Ac Hold"
	!source_auto_names[07] := "Ac Decay"
	!source_auto_names[08] := "El Tune"
	!source_auto_names[09] := "El Filer"
	!source_auto_names[10] := "El Delay"
	!source_auto_names[11] := "El Attack"
	!source_auto_names[12] := "El Hold"
	!source_auto_names[13] := "El Decay"
	!source_auto_names[14] := "Perc Plate"

	declare !effects_auto_names[14]
	!effects_auto_names[00] := "Trans Att."
	!effects_auto_names[01] := "Trans Rel."
	!effects_auto_names[02] := "Comp Am"
	!effects_auto_names[03] := "Comp Att"
	!effects_auto_names[04] := "Sat Gain"
	!effects_auto_names[05] := "Sat Level"
	!effects_auto_names[06] := "EQ LF Freq"
	!effects_auto_names[07] := "EQ LF Gain"
	!effects_auto_names[08] := "EQ MF Freq"
	!effects_auto_names[09] := "EQ MF Gain"
	!effects_auto_names[10] := "EQ HF Freq"
	!effects_auto_names[11] := "EQ HF Gain"
	!effects_auto_names[12] := "Rvb Send"

	declare !mast_effects_auto_names[14]
	!mast_effects_auto_names[00] := "Trans Att."
	!mast_effects_auto_names[01] := "Trans Rel."
	!mast_effects_auto_names[02] := "Comp Thrsh."
	!mast_effects_auto_names[03] := "Comp Att"
	!mast_effects_auto_names[04] := "Comp Ratio"
	!mast_effects_auto_names[05] := "Comp Makeup"
	!mast_effects_auto_names[06] := "Sat Gain"
	!mast_effects_auto_names[07] := "Sat Level"
	!mast_effects_auto_names[08] := "EQ LF Freq"
	!mast_effects_auto_names[09] := "EQ LF Gain"
	!mast_effects_auto_names[10] := "EQ MF Freq"
	!mast_effects_auto_names[11] := "EQ MF Gain"
	!mast_effects_auto_names[12] := "EQ HF Freq"
	!mast_effects_auto_names[13] := "EQ HF Gain"

	declare !mast_effects_onoff_auto_names[4]
	!mast_effects_onoff_auto_names[00] := "Trans On"
	!mast_effects_onoff_auto_names[01] := "Comp On"
	!mast_effects_onoff_auto_names[02] := "Sat On"
	!mast_effects_onoff_auto_names[03] := "EQ On"

	declare !source_help[15]
	!source_help[00] := "Acoustic/Electronic Balance: Controls the output volume of the acoustic Vs the Electronic Layer."
	!source_help[01] := "Ac. Tune: Use this control to shift the pitch of the selected instrument and all associated microphones for that instrument."
	!source_help[02] := "Dir/Sub or Top/Bottom Mic Balance: Controls the balance between the 2 mics of the Kick or Snare."
	!source_help[03] := "Ac. Room/OH Mix: This control adjusts the level of the Overhead and Room Kit Mics."
	!source_help[04] := "Ac. Trash: This control adjusts the level of a trash(lo-fi) mic under the drummer's seat."
	!source_help[05] := "Ac. Attack: Adjusts the Attack time of the selected instrument's volume envelope"
	!source_help[06] := "Ac. Hold: Adjusts the Hold time of the selected instrument's volume envelope"
	!source_help[07] := "Ac. Decay: Adjusts the Decay time of the selected instrument's volume envelope"
	!source_help[08] := "El. Tune: Use this control to shift the pitch of the selected instrument and all associated microphones for that instrument."
	!source_help[09] := "El. Filter: Turn this control left to activate and adjust the cutof frequency of the Low Pass Filter or right to adjust the frequency of the High Pass Filter"
	!source_help[10] := "El. Triger Delay: This control adjust the delay time of the electronic layer."
	!source_help[11] := "El. Attack: Adjusts the Attack time of the selected electronic layer's volume envelope"
	!source_help[12] := "El. Hold: Adjusts the Hold time of the selected electronic layer's volume envelope"
	!source_help[13] := "El. Hold: Adjusts the Decay time of the selected electronic layer's volume envelope"
	!source_help[14] := "Perc Plate: Adjusts the level of the Percussion Plate"

	declare !effects_help[13]
	!effects_help[00] := "Attack: Controls the level of the signal's attack."
	!effects_help[01] := "Release: Controls the level of the signal's sustain."
	!effects_help[02] := "Amount: Controls the amount of compression desired for the selected instrument"
	!effects_help[03] := "Attack: Adjusts the time the Compressor will take to reach the full Ratio value after an input signal exceeds the Threshold level."
	!effects_help[04] := "Gain: Controls the amount of saturation."
	!effects_help[05] := "Level: Controls the level of the instrument after saturation."
	!effects_help[06] := "Low Band Freq: Sets the frequency of the low EQ band."
	!effects_help[07] := "Low Band Level: Sets the level of the low EQ band."
	!effects_help[08] := "Mid Band Freq: Sets the frequency of the mid EQ band."
	!effects_help[09] := "Mid Band Level: Sets the level of the mid EQ band."
	!effects_help[10] := "High Band Freq: Sets the frequency of the high EQ band."
	!effects_help[11] := "High Band Level: Sets the level of the high EQ band."
	!effects_help[12] := "Reverb Send Amount: Controls the amount of signal sent from this channel to the reverb effect."

	declare !mast_effects_help[14]
	!mast_effects_help[00] := "Attack: Controls the level of the signal's attack."
	!mast_effects_help[01] := "Release: Controls the level of the signal's sustain."

	!mast_effects_help[02] := "Threshold: Sets a level threshold above which the Compressor starts working. Only levels that rise above this threshold will be reduced by the compression; signals that stay below it will be left unprocessed."
	!mast_effects_help[03] := "Attack: Adjusts the time the Compressor will take to reach the full Ratio value after an input signal exceeds the Threshold level."
	!mast_effects_help[04] := "Ratio: Controls the amount of compression, expressed as a ratio of input level change against output level change. A Ratio of 1:1 means that no compression will be happening; a Ratio 4:1 means that for every 4 decibel increase of amplitude above the threshold, the output will increase by only 1 decibel."
	!mast_effects_help[05] := "Makeup: Controls the output gain of the compressed signal. Used to compensate for the gain reduction of the effect."

	!mast_effects_help[06] := "Gain: Controls the amount of saturation."
	!mast_effects_help[07] := "Level: Controls the level of the instrument after saturation."
	
	!mast_effects_help[08] := "Low Band Freq: Sets the frequency of the low EQ band."
	!mast_effects_help[09] := "Low Band Level: Sets the level of the low EQ band."
	!mast_effects_help[10] := "Mid Band Freq: Sets the frequency of the mid EQ band."
	!mast_effects_help[11] := "Mid Band Level: Sets the level of the mid EQ band."
	!mast_effects_help[12] := "High Band Freq: Sets the frequency of the high EQ band."
	!mast_effects_help[13] := "High Band Level: Sets the level of the high EQ band."

	declare !fx_labels[13]
	!fx_labels[00] := "Attack"
	!fx_labels[01] := "Release"
	!fx_labels[02] := "Amount"
	!fx_labels[03] := "Attack"
	!fx_labels[04] := "Gain"
	!fx_labels[05] := "Level"
	!fx_labels[06] := "Low"
	!fx_labels[07] := "Gain"
	!fx_labels[08] := "Mid"
	!fx_labels[09] := "Gain"
	!fx_labels[10] := "High"
	!fx_labels[11] := "Gain"
	!fx_labels[12] := "Send Level"

	declare !mast_fx_labels[14]
	!mast_fx_labels[00] := "Attack"
	!mast_fx_labels[01] := "Release"
	!mast_fx_labels[02] := "Threshold"
	!mast_fx_labels[03] := "Attack"
	!mast_fx_labels[04] := "Ratio"
	!mast_fx_labels[05] := "Makeup"
	!mast_fx_labels[06] := "Gain"
	!mast_fx_labels[07] := "Level"
	!mast_fx_labels[08] := "Low"
	!mast_fx_labels[09] := "Gain"
	!mast_fx_labels[10] := "Mid"
	!mast_fx_labels[11] := "Gain"
	!mast_fx_labels[12] := "High"
	!mast_fx_labels[13] := "Gain"

	declare !source_labels[16]
	!source_labels[00] := "Ac. Level"
	!source_labels[01] := "El.Level"
	!source_labels[02] := "Tune"
	!source_labels[03] := "Out/Sub"
	!source_labels[04] := "OH/Room"
	!source_labels[05] := "Trash"
	!source_labels[06] := "Attack"
	!source_labels[07] := "Hold"
	!source_labels[08] := "Decay"
	!source_labels[09] := "Tune"
	!source_labels[10] := "Filter"
	!source_labels[11] := "Delay"
	!source_labels[12] := "Attack"
	!source_labels[13] := "Hold"
	!source_labels[14] := "Decay"
	!source_labels[15] := "Plate"

	declare !Ac_Kick_Names[$NUM_AC_KICK]
    !Ac_Kick_Names[00] := "Sane Kick"
    !Ac_Kick_Names[01] := "Roomy Kick"
    !Ac_Kick_Names[02] := "Thick Kick"
    !Ac_Kick_Names[03] := "Press Kick"
    !Ac_Kick_Names[04] := "Flat Kick"
    !Ac_Kick_Names[05] := "Close Kick"
    !Ac_Kick_Names[06] := "Noisy Kick"
    !Ac_Kick_Names[07] := "Gaudy Kick"
    !Ac_Kick_Names[08] := "Boomy Kick"

    declare !Ac_Snare_Names[$NUM_AC_SNARE]
    !Ac_Snare_Names[00] := "Ringy Snare"
    !Ac_Snare_Names[01] := "Stable Snare"
    !Ac_Snare_Names[02] := "Deep Snare"
    !Ac_Snare_Names[03] := "Curt Snare"
    !Ac_Snare_Names[04] := "Punchy Snare"
    !Ac_Snare_Names[05] := "Trebly Snare"
    !Ac_Snare_Names[06] := "Acrid Snare"
    !Ac_Snare_Names[07] := "Sore Snare"
    !Ac_Snare_Names[08] := "Gentle Snare"
    !Ac_Snare_Names[09] := "Rigid Snare"

    declare !Ac_HiHat_Names[$NUM_AC_HIHAT]
    !Ac_HiHat_Names[00] := "Crisp Hat"
    !Ac_HiHat_Names[01] := "Even Hat"
    !Ac_HiHat_Names[02] := "Acerbic Hat"
    !Ac_HiHat_Names[03] := "High Hat"
    !Ac_HiHat_Names[04] := "Keen Hat"
    !Ac_HiHat_Names[05] := "Biting Hat"
    !Ac_HiHat_Names[06] := "Knife Hat"

    declare !Ac_Tom1_Names[$NUM_AC_TOM1]
    !Ac_Tom1_Names[00] := "Belly Tom"
    !Ac_Tom1_Names[01] := "Bulge Tom"
    declare !Ac_Tom2_Names[$NUM_AC_TOM2]
    !Ac_Tom2_Names[00] := "Barrel Tom"
    !Ac_Tom2_Names[01] := "Bobbin Tom"
    declare !Ac_Tom3_Names[$NUM_AC_TOM3]
    !Ac_Tom3_Names[00] := "Tank Tom"
    !Ac_Tom3_Names[01] := "Vessel Tom"

    declare !Ac_Cymb1_Names[$NUM_AC_CYMB1]
    !Ac_Cymb1_Names[00] := "Bright Crash"
    !Ac_Cymb1_Names[01] := "Blonde Crash"
    declare !Ac_Cymb2_Names[$NUM_AC_CYMB2]
    !Ac_Cymb2_Names[00] := "Dazzle Crash"
    !Ac_Cymb2_Names[01] := "Glare Crash"
    declare !Ac_Cymb3_Names[$NUM_AC_CYMB1]
    !Ac_Cymb3_Names[00] := "Terrific Ride"
    !Ac_Cymb3_Names[01] := "Blend Ride"

    declare !Ac_Perc1_Names[$NUM_AC_PERC1]
    !Ac_Perc1_Names[00] := "Conga"
    !Ac_Perc1_Names[01] := "Bongo"
    !Ac_Perc1_Names[02] := "Low Cowbell"
    !Ac_Perc1_Names[03] := "Hi Cowbell"
    declare !Ac_Perc2_Names[$NUM_AC_PERC2]
    !Ac_Perc2_Names[00] := "Woodblock"
    !Ac_Perc2_Names[01] := "Snaps"
    !Ac_Perc2_Names[02] := "Triangle"
    !Ac_Perc2_Names[03] := "Tambourine"
    declare !Ac_Perc3_Names[$NUM_AC_PERC3]
    !Ac_Perc3_Names[00] := "Woodblock"
    !Ac_Perc3_Names[01] := "Claps"
    !Ac_Perc3_Names[02] := "Shaker"
    !Ac_Perc3_Names[03] := "Tambourine"
    declare !Ac_Perc4_Names[$NUM_AC_PERC4]
    !Ac_Perc4_Names[00] := "Cabasa"
    !Ac_Perc4_Names[01] := "Sticks"
    !Ac_Perc4_Names[02] := "Finger Cymbal"
    !Ac_Perc4_Names[03] := "Shaker"
    declare !Ac_Perc5_Names[$NUM_AC_PERC5]
    !Ac_Perc5_Names[00] := "Agogo"
    !Ac_Perc5_Names[01] := "Triangle"
    !Ac_Perc5_Names[02] := "Pandeiro"
    !Ac_Perc5_Names[03] := "Shaker"

	declare !El_Kick_Names[$NUM_EL_LAYERS]
    !El_Kick_Names[00] := "Clean Layer"
    !El_Kick_Names[01] := "Stomp Layer"
    !El_Kick_Names[02] := "Solid Layer"
    !El_Kick_Names[03] := "Grubby Layer"
    !El_Kick_Names[04] := "Rave Layer"
    !El_Kick_Names[05] := "Simple Layer"
    !El_Kick_Names[06] := "Sizzle Layer"
    !El_Kick_Names[07] := "Clatter Layer"
    !El_Kick_Names[08] := "Round Layer"
    !El_Kick_Names[09] := "Bulge Layer"
    !El_Kick_Names[10] := "Short Layer"
    !El_Kick_Names[11] := "Perky Layer"
    !El_Kick_Names[12] := "Stadium Layer"
    !El_Kick_Names[13] := "Damp Layer"
    !El_Kick_Names[14] := "Drive Layer"
    !El_Kick_Names[15] := "Gritty Layer"
    !El_Kick_Names[16] := "Tread Layer"
    !El_Kick_Names[17] := "Brazen Layer"
    !El_Kick_Names[18] := "Degraded Layer"
    !El_Kick_Names[19] := "Swoosh Layer"
    declare !El_Snare_Names[$NUM_EL_LAYERS]
    !El_Snare_Names[00] := "Clinky Layer"
    !El_Snare_Names[01] := "Clappy Layer"
    !El_Snare_Names[02] := "Broad Layer"
    !El_Snare_Names[03] := "Click Layer"
    !El_Snare_Names[04] := "Fair Layer"
    !El_Snare_Names[05] := "Bonny Layer"
    !El_Snare_Names[06] := "Spring Layer"
    !El_Snare_Names[07] := "Dropsy Layer"
    !El_Snare_Names[08] := "Bulgy Layer"
    !El_Snare_Names[09] := "Short Layer"
    !El_Snare_Names[10] := "Real Layer"
    !El_Snare_Names[11] := "Shot Layer"
    !El_Snare_Names[12] := "Gun Layer"
    !El_Snare_Names[13] := "Decent Layer"
    !El_Snare_Names[14] := "Facile Layer"
    !El_Snare_Names[15] := "Tape Layer"
    !El_Snare_Names[16] := "Nasty Layer"
    !El_Snare_Names[17] := "Funky Layer"
    !El_Snare_Names[18] := "Storm Layer"
    !El_Snare_Names[19] := "Starkly Layer"
    declare !El_HiHat_Names[$NUM_EL_LAYERS]
    !El_HiHat_Names[00] := "Blade Layer"
    !El_HiHat_Names[01] := "Click Layer"
    !El_HiHat_Names[02] := "Short Layer"
    !El_HiHat_Names[03] := "Tiny Layer"
    !El_HiHat_Names[04] := "Sizzle Layer"
    !El_HiHat_Names[05] := "Pillow Layer"
    !El_HiHat_Names[06] := "Bell Layer"
    !El_HiHat_Names[07] := "Cow Layer"
    !El_HiHat_Names[08] := "Even Layer"
    !El_HiHat_Names[09] := "Metal Layer"
    !El_HiHat_Names[10] := "Smooth Layer"
    !El_HiHat_Names[11] := "Tick Layer"
    !El_HiHat_Names[12] := "Sharp Layer"
    !El_HiHat_Names[13] := "Quirk Layer"
    !El_HiHat_Names[14] := "Teebee Layer"
    !El_HiHat_Names[15] := "Nerve Layer"
    !El_HiHat_Names[16] := "Nasty Layer"
    !El_HiHat_Names[17] := "Fresh Layer"
    !El_HiHat_Names[18] := "Tamb Layer"
    !El_HiHat_Names[19] := "Snap Layer"
    declare !El_Tom1_Names[$NUM_EL_LAYERS]
    !El_Tom1_Names[00] := "Slack Layer"
    !El_Tom1_Names[01] := "Thin Layer"
    !El_Tom1_Names[02] := "Simon Layer"
    !El_Tom1_Names[03] := "Crusty Layer"
    !El_Tom1_Names[04] := "Fat Layer"
    !El_Tom1_Names[05] := "Nasty Layer"
    !El_Tom1_Names[06] := "Thick Layer"
    !El_Tom1_Names[07] := "Funky Layer"
    !El_Tom1_Names[08] := "Bonny Layer"
    !El_Tom1_Names[09] := "Steric Layer"
    !El_Tom1_Names[10] := "Broad Layer"
    !El_Tom1_Names[11] := "Bulge Layer"
    !El_Tom1_Names[12] := "Bug Layer"
    !El_Tom1_Names[13] := "Wire Layer"
    !El_Tom1_Names[14] := "Solid Layer"
    !El_Tom1_Names[15] := "Brute Layer"
    !El_Tom1_Names[16] := "Stock Layer"
    !El_Tom1_Names[17] := "Raised Layer"
    !El_Tom1_Names[18] := "Rustle Layer"
    !El_Tom1_Names[19] := "Rear Layer"
    declare !El_Tom2_Names[$NUM_EL_LAYERS]
    !El_Tom2_Names[00] := "Slack Layer"
    !El_Tom2_Names[01] := "Thin Layer"
    !El_Tom2_Names[02] := "Simon Layer"
    !El_Tom2_Names[03] := "Crusty Layer"
    !El_Tom2_Names[04] := "Fat Layer"
    !El_Tom2_Names[05] := "Nasty Layer"
    !El_Tom2_Names[06] := "Thick Layer"
    !El_Tom2_Names[07] := "Funky Layer"
    !El_Tom2_Names[08] := "Bonny Layer"
    !El_Tom2_Names[09] := "Steric Layer"
    !El_Tom2_Names[10] := "Broad Layer"
    !El_Tom2_Names[11] := "Bulge Layer"
    !El_Tom2_Names[12] := "Bug Layer"
    !El_Tom2_Names[13] := "Wire Layer"
    !El_Tom2_Names[14] := "Solid Layer"
    !El_Tom2_Names[15] := "Brute Layer"
    !El_Tom2_Names[16] := "Stock Layer"
    !El_Tom2_Names[17] := "Raised Layer"
    !El_Tom2_Names[18] := "Rustle Layer"
    !El_Tom2_Names[19] := "Rear Layer"
    declare !El_Tom3_Names[$NUM_EL_LAYERS]
    !El_Tom3_Names[00] := "Slack Layer"
    !El_Tom3_Names[01] := "Thin Layer"
    !El_Tom3_Names[02] := "Simon Layer"
    !El_Tom3_Names[03] := "Crusty Layer"
    !El_Tom3_Names[04] := "Fat Layer"
    !El_Tom3_Names[05] := "Nasty Layer"
    !El_Tom3_Names[06] := "Thick Layer"
    !El_Tom3_Names[07] := "Funky Layer"
    !El_Tom3_Names[08] := "Bonny Layer"
    !El_Tom3_Names[09] := "Steric Layer"
    !El_Tom3_Names[10] := "Broad Layer"
    !El_Tom3_Names[11] := "Bulge Layer"
    !El_Tom3_Names[12] := "Bug Layer"
    !El_Tom3_Names[13] := "Wire Layer"
    !El_Tom3_Names[14] := "Solid Layer"
    !El_Tom3_Names[15] := "Brute Layer"
    !El_Tom3_Names[16] := "Stock Layer"
    !El_Tom3_Names[17] := "Raised Layer"
    !El_Tom3_Names[18] := "Rustle Layer"
    !El_Tom3_Names[19] := "Rear Layer"

{Tiles GUI}

	declare const $TILES_w_MIXER := 12

	declare $last_tile
	declare $cur_tile {:= $TILE_KICK}
	make_persistent($cur_tile)
	read_persistent_var($cur_tile)
	$cur_instrument := %Tile_to_Inst_remap[$cur_tile]	
	$last_tile := $cur_tile
	make_persistent($cur_instrument )
	read_persistent_var($cur_instrument )

	declare $last_played_kick
	declare $last_played_snare
	declare $last_played_hihat
	declare $last_played_tom1
	declare $last_played_tom2
	declare $last_played_tom3
	declare $last_played_cymb1
	declare $last_played_cymb2
	declare $last_played_cymb3
	declare $last_played_perc1
	declare $last_played_perc2
	declare $last_played_perc3
	declare $last_played_perc4
	declare $last_played_perc5

	make_persistent($last_played_kick)
	make_persistent($last_played_snare)
	make_persistent($last_played_hihat)
	make_persistent($last_played_tom1)
	make_persistent($last_played_tom2)
	make_persistent($last_played_tom3)
	make_persistent($last_played_cymb1)
	make_persistent($last_played_cymb2)
	make_persistent($last_played_cymb3)
	make_persistent($last_played_perc1)
	make_persistent($last_played_perc2)
	make_persistent($last_played_perc3)
	make_persistent($last_played_perc4)
	make_persistent($last_played_perc5)

	declare $last_kick_vel
	declare $last_snare_vel
	declare $last_hihat_vel
	declare $last_tom1_vel
	declare $last_tom2_vel
	declare $last_tom3_vel
	declare $last_cymb1_vel
	declare $last_cymb2_vel
	declare $last_cymb3_vel
	declare $last_perc1_vel
	declare $last_perc2_vel
	declare $last_perc3_vel
	declare $last_perc4_vel
	declare $last_perc5_vel

	make_persistent($last_kick_vel)
	make_persistent($last_snare_vel)
	make_persistent($last_hihat_vel)
	make_persistent($last_tom1_vel)
	make_persistent($last_tom2_vel)
	make_persistent($last_tom3_vel)
	make_persistent($last_cymb1_vel)
	make_persistent($last_cymb2_vel)
	make_persistent($last_cymb3_vel)
	make_persistent($last_perc1_vel)
	make_persistent($last_perc2_vel)
	make_persistent($last_perc3_vel)
	make_persistent($last_perc4_vel)
	make_persistent($last_perc5_vel)

	declare %tile_Selected[$NUM_TILES]
	%tile_Selected[$cur_tile] := 1

	declare !tile_pictures_btn[$NUM_TILES]
	!tile_pictures_btn[$TILE_OHS]	:= "stereooh-btn"
	!tile_pictures_btn[$TILE_OHM]	:= "monooh-btn"
	!tile_pictures_btn[$TILE_ROOM]	:= "monoroom-btn"
	!tile_pictures_btn[$TILE_REV]	:= ""
	!tile_pictures_btn[$TILE_PERC1]	:= ""
	!tile_pictures_btn[$TILE_PERC2]	:= ""
	!tile_pictures_btn[$TILE_PERC3]	:= ""
	!tile_pictures_btn[$TILE_TOM1]	:= "tile-single-tom1-btn"
	!tile_pictures_btn[$TILE_TOM2]	:= "tile-single-tom2-btn"
	!tile_pictures_btn[$TILE_TOM3]	:= "tile-single-tom3-btn"
	!tile_pictures_btn[$TILE_CYMB1]	:= "tile-single-cymbal-btn"
	!tile_pictures_btn[$TILE_MASTER]:= ""
	!tile_pictures_btn[$TILE_PERC4]	:= ""
	!tile_pictures_btn[$TILE_HIHAT]	:= "tile-single-hihat-btn"
	!tile_pictures_btn[$TILE_SNARE]	:= "tile-single-snare-btn"
	!tile_pictures_btn[$TILE_KICK]	:= "tile-single-kick-btn"
	!tile_pictures_btn[$TILE_CYMB2]	:= "tile-single-cymbal-btn"
	!tile_pictures_btn[$TILE_PERC5]	:= ""
	!tile_pictures_btn[$TILE_CYMB3]	:= "tile-single-ride-btn"

	declare !perc_A_pics[4]
	!perc_A_pics[00] := "tile-single-conga-btn"
	!perc_A_pics[01] := "tile-single-bongo-btn"
	!perc_A_pics[02] := "tile-single-cowbell-btn"
	!perc_A_pics[03] := "tile-single-cowbell-btn"

	declare !perc_B_pics[4]
	!perc_B_pics[00] := "tile-single-woodblock-btn"
	!perc_B_pics[01] := "tile-single-snaps-btn"
	!perc_B_pics[02] := "tile-single-triangle-btn"
	!perc_B_pics[03] := "tile-single-tamb-btn"

	declare !perc_C_pics[4]
	!perc_C_pics[00] := "tile-single-woodblock-btn"
	!perc_C_pics[01] := "tile-single-claps-btn"
	!perc_C_pics[02] := "tile-single-shaker-btn"
	!perc_C_pics[03] := "tile-single-tamb-btn"

	declare !perc_D_pics[4]
	!perc_D_pics[00] := "tile-single-cabasa-btn"
	!perc_D_pics[01] := "tile-single-sticks-btn"
	!perc_D_pics[02] := "tile-single-fingercymbal-btn"
	!perc_D_pics[03] := "tile-single-shaker-btn"

	declare !perc_E_pics[4]
	!perc_E_pics[00] := "tile-single-agogo-btn"
	!perc_E_pics[01] := "tile-single-triangle-btn"
	!perc_E_pics[02] := "tile-single-pandeiro-btn"
	!perc_E_pics[03] := "tile-single-shaker-btn"

	declare $perc_A_recall
	declare $perc_B_recall
	declare $perc_C_recall
	declare $perc_D_recall
	declare $perc_E_recall
	make_persistent($perc_A_recall)
	read_persistent_var($perc_A_recall)
	make_persistent($perc_B_recall)
	read_persistent_var($perc_B_recall)
	make_persistent($perc_C_recall)
	read_persistent_var($perc_C_recall)
	make_persistent($perc_D_recall)
	read_persistent_var($perc_D_recall)
	make_persistent($perc_E_recall)
	read_persistent_var($perc_E_recall)

	declare ui_switch $OHS_TL
	declare ui_switch $OHM_TL
	declare ui_switch $ROOM_TL
	declare ui_switch $REVERB_TL

	declare ui_switch $PERC1_TL
	declare ui_switch $PERC2_TL
	declare ui_switch $PERC3_TL
	declare ui_switch $TOM1_TL
	declare ui_switch $TOM2_TL
	declare ui_switch $TOM3_TL
	declare ui_switch $CYMB1_TL
	declare ui_switch $MASTER_TL
	
	declare ui_switch $PERC4_TL
	declare ui_switch $HIHAT_TL
	declare ui_switch $SNARE_TL
	declare ui_switch $KICK_TL
	declare ui_switch $CYMB2_TL
	
	declare ui_switch $PERC5_TL
	declare ui_switch $CYMB3_TL

	declare %tile_control_id[$NUM_TILES]
			{row 1}
			%tile_control_id[00] := get_ui_id($OHS_TL)
			%tile_control_id[01] := get_ui_id($OHM_TL)
			%tile_control_id[02] := get_ui_id($ROOM_TL)
			%tile_control_id[03] := get_ui_id($REVERB_TL)
			{row 2}
			%tile_control_id[04] := get_ui_id($PERC1_TL)
			%tile_control_id[05] := get_ui_id($PERC2_TL)
			%tile_control_id[06] := get_ui_id($PERC3_TL)
			%tile_control_id[07] := get_ui_id($TOM1_TL)
			%tile_control_id[08] := get_ui_id($TOM2_TL)
			%tile_control_id[09] := get_ui_id($TOM3_TL)
			%tile_control_id[10] := get_ui_id($CYMB1_TL)
			%tile_control_id[11] := get_ui_id($MASTER_TL)
			{row 3}
			%tile_control_id[12] := get_ui_id($PERC4_TL)
			%tile_control_id[13] := get_ui_id($HIHAT_TL)
			%tile_control_id[14] := get_ui_id($SNARE_TL)
			%tile_control_id[15] := get_ui_id($KICK_TL)
			%tile_control_id[16] := get_ui_id($CYMB2_TL)
			{row 4}
			%tile_control_id[17] := get_ui_id($PERC5_TL)
			%tile_control_id[18] := get_ui_id($CYMB3_TL)

	$tile_count := 0
	while($tile_count < $NUM_TILES)
		set_control_par_str(%tile_control_id[$tile_count], $CONTROL_PAR_TEXT, "")
		set_control_par_str(%tile_control_id[$tile_count], $CONTROL_PAR_PICTURE, !tile_pictures_btn[$tile_count])
		set_control_par_str(%tile_control_id[$tile_count], $CONTROL_PAR_HELP, !channel_names[$tile_count] & " Click on the tile to edit its source or effects settings")
    		set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
    	if ($tile_count = $TILE_OHS or $tile_count = $TILE_OHM or $tile_count = $TILE_ROOM)
    		set_control_par_str(%tile_control_id[$tile_count], $CONTROL_PAR_HELP, !channel_names[$tile_count] & " Click on this button to mute the respective Kit Mic.")
    			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_POS_X, 430 + ($tile_count * 63))
    			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_POS_Y, 151)
    			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_WIDTH, 63)
    			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HEIGHT, 29)
    	else
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_POS_X, 212)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_POS_Y, 77)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_WIDTH, 209)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HEIGHT, 155)
    	end if
		
		if ($tile_count = $cur_tile or $tile_count = $TILE_OHS or $tile_count = $TILE_OHM or $tile_count = $TILE_ROOM)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		else
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)	    			
		end if
		
		inc($tile_count)
	end while

	{Update Percussion Tiles according to the Tile Loaded}
	set_control_par_str(%tile_control_id[$TILE_PERC1], $CONTROL_PAR_PICTURE, !perc_A_pics[$perc_A_recall])
	set_control_par_str(%tile_control_id[$TILE_PERC2], $CONTROL_PAR_PICTURE, !perc_B_pics[$perc_B_recall])
	set_control_par_str(%tile_control_id[$TILE_PERC3], $CONTROL_PAR_PICTURE, !perc_C_pics[$perc_C_recall])
	set_control_par_str(%tile_control_id[$TILE_PERC4], $CONTROL_PAR_PICTURE, !perc_D_pics[$perc_D_recall])
	set_control_par_str(%tile_control_id[$TILE_PERC5], $CONTROL_PAR_PICTURE, !perc_E_pics[$perc_E_recall])

	make_persistent($OHS_TL)
	read_persistent_var($OHS_TL)
	make_persistent($OHM_TL)
	read_persistent_var($OHM_TL)
	make_persistent($ROOM_TL)
	read_persistent_var($ROOM_TL)

{COLOR TINT MIDDLE Panel GUI}
	declare ui_label $mid_color_panel(1,1)
	declare $mid_color_panel_id
	$mid_color_panel_id := get_ui_id($mid_color_panel)

	set_control_par_str($mid_color_panel_id, $CONTROL_PAR_TEXT, "")
	set_control_par_str($mid_color_panel_id, $CONTROL_PAR_PICTURE, "tile-single-bg")
	    set_control_par($mid_color_panel_id, $CONTROL_PAR_POS_X,  2 ) 
	    set_control_par($mid_color_panel_id, $CONTROL_PAR_POS_Y,  78 )
	    set_control_par($mid_color_panel_id, $CONTROL_PAR_WIDTH,  16)
	    set_control_par($mid_color_panel_id, $CONTROL_PAR_HEIGHT, 8)

	declare %mid_panel_color_frame[$NUM_TILES]
	%mid_panel_color_frame[$TILE_KICK]	:= 0
	%mid_panel_color_frame[$TILE_SNARE]	:= 0
	%mid_panel_color_frame[$TILE_HIHAT]	:= 2
	%mid_panel_color_frame[$TILE_TOM1]	:= 1
	%mid_panel_color_frame[$TILE_TOM2]	:= 1
	%mid_panel_color_frame[$TILE_TOM3]	:= 1
	%mid_panel_color_frame[$TILE_CYMB1]	:= 2
	%mid_panel_color_frame[$TILE_CYMB2]	:= 2
	%mid_panel_color_frame[$TILE_CYMB3]	:= 2
	%mid_panel_color_frame[$TILE_PERC1]	:= 3
	%mid_panel_color_frame[$TILE_PERC2]	:= 3
	%mid_panel_color_frame[$TILE_PERC3]	:= 3
	%mid_panel_color_frame[$TILE_PERC4]	:= 3
	%mid_panel_color_frame[$TILE_PERC5]	:= 3

	set_control_par($mid_color_panel_id,$CONTROL_PAR_PICTURE_STATE,%mid_panel_color_frame[$cur_tile])	

{INSTRUMENT Label}
	declare ui_label $inst_lbl(1,1)
	declare $inst_lbl_id
	$inst_lbl_id := get_ui_id($inst_lbl)

	set_control_par_str($inst_lbl_id, $CONTROL_PAR_TEXT, "")
	set_control_par_str($inst_lbl_id, $CONTROL_PAR_PICTURE, "single-instrument-names")
	    set_control_par($inst_lbl_id, $CONTROL_PAR_POS_X,  280 ) 
	    set_control_par($inst_lbl_id, $CONTROL_PAR_POS_Y,  50 )
	    set_control_par($inst_lbl_id, $CONTROL_PAR_WIDTH,  16)
	    set_control_par($inst_lbl_id, $CONTROL_PAR_HEIGHT, 8)

	declare %inst_lbl_names[$NUM_TILES]
	%inst_lbl_names[$TILE_KICK]	:= 0
	%inst_lbl_names[$TILE_SNARE]:= 1
	%inst_lbl_names[$TILE_HIHAT]:= 2
	%inst_lbl_names[$TILE_TOM1]	:= 3
	%inst_lbl_names[$TILE_TOM2]	:= 4
	%inst_lbl_names[$TILE_TOM3]	:= 5
	%inst_lbl_names[$TILE_CYMB1]:= 6
	%inst_lbl_names[$TILE_CYMB2]:= 7
	%inst_lbl_names[$TILE_CYMB3]:= 8
	%inst_lbl_names[$TILE_PERC1]:= 9
	%inst_lbl_names[$TILE_PERC2]:= 13
	%inst_lbl_names[$TILE_PERC3]:= 17
	%inst_lbl_names[$TILE_PERC4]:= 21
	%inst_lbl_names[$TILE_PERC5]:= 25

	declare $inst_lbl_index
	make_persistent($inst_lbl_index)
	read_persistent_var($inst_lbl_index)

	set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)	

{TILE Arrays}
	
	declare %Tile_has_Mixer[$NUM_TILES]   := ($YES)
			%Tile_has_Mixer[$TILE_PERC1]  := $NULL 	
			%Tile_has_Mixer[$TILE_PERC4]  := $NULL
			%Tile_has_Mixer[$TILE_PERC5]  := $NULL
			%Tile_has_Mixer[$TILE_CYMB1]  := $NULL 	
			%Tile_has_Mixer[$TILE_CYMB2]  := $NULL
			%Tile_has_Mixer[$TILE_CYMB3]  := $NULL

	declare %Tile_to_Bus[$NUM_TILES]	:= ($NULL)
			%Tile_to_Bus[$TILE_OHS]		:= $BUS_OHS
			%Tile_to_Bus[$TILE_OHM]		:= $BUS_OHM
			%Tile_to_Bus[$TILE_ROOM]	:= $BUS_ROOM
			%Tile_to_Bus[$TILE_PERC2]	:= $BUS_PERC2
			%Tile_to_Bus[$TILE_PERC3]	:= $BUS_PERC3
			%Tile_to_Bus[$TILE_TOM1]	:= $BUS_TOM1
			%Tile_to_Bus[$TILE_TOM2]	:= $BUS_TOM2
			%Tile_to_Bus[$TILE_TOM3]	:= $BUS_TOM3
			%Tile_to_Bus[$TILE_HIHAT]	:= $BUS_HIHAT
			%Tile_to_Bus[$TILE_SNARE]	:= $BUS_SNARE
			%Tile_to_Bus[$TILE_KICK]	:= $BUS_KICK

	declare %mute_state[$NUM_TILES] := (1)
	make_persistent(%mute_state)
	read_persistent_var(%mute_state)

	$tile_count := 0
	while($tile_count < 3)
		if (%Tile_has_Mixer[$tile_count] > 0)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_VALUE, (%mute_state[$tile_count] + 1) mod 2)
		end if
		inc($tile_count)
	end while

	pgs_create_key(TILE_MUTE_STATE, 19)

	$tile_count := 0
	while($tile_count < $NUM_TILES)
		pgs_set_key_val(TILE_MUTE_STATE, $tile_count, %mute_state[$tile_count])
		inc($tile_count)
	end while

{VELOCITY}

	declare const $min_velocity_sld := 0
	declare const $max_velocity_sld := 127

	{Declarations}
	declare ui_button $linear_velocity_btn
	declare ui_button $exp_1_velocity_btn
	declare ui_button $exp_2_velocity_btn
	declare ui_button $fix_velocity_btn
	declare %min_velocity_key[128] := (1)
	declare %max_velocity_key[128] := (127)
	make_persistent(%min_velocity_key)
	make_persistent(%max_velocity_key)
	{/Declarations}
	
	{ui_ids}
	declare %velocity_id[4]
	%velocity_id[0] := get_ui_id($linear_velocity_btn)
	%velocity_id[1] := get_ui_id($exp_1_velocity_btn)
	%velocity_id[2] := get_ui_id($exp_2_velocity_btn)
	%velocity_id[3] := get_ui_id($fix_velocity_btn)
	{/ui_ids}
	
	{Position}
	set_control_par(%velocity_id[0],$CONTROL_PAR_POS_X,430)
	set_control_par(%velocity_id[0],$CONTROL_PAR_POS_Y, 41)
	set_control_par(%velocity_id[1],$CONTROL_PAR_POS_X, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_X) +47)
	set_control_par(%velocity_id[1],$CONTROL_PAR_POS_Y, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_Y))
	set_control_par(%velocity_id[2],$CONTROL_PAR_POS_X, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_X) +47*2)
	set_control_par(%velocity_id[2],$CONTROL_PAR_POS_Y, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_Y))
	set_control_par(%velocity_id[3],$CONTROL_PAR_POS_X, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_X) +47*3)
	set_control_par(%velocity_id[3],$CONTROL_PAR_POS_Y, get_control_par(%velocity_id[0],$CONTROL_PAR_POS_Y))
	{/Position}
	
	{Size}
	set_control_par(%velocity_id[0],$CONTROL_PAR_WIDTH,49)
	set_control_par(%velocity_id[0],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%velocity_id[1],$CONTROL_PAR_WIDTH,49)
	set_control_par(%velocity_id[1],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%velocity_id[2],$CONTROL_PAR_WIDTH,49)
	set_control_par(%velocity_id[2],$CONTROL_PAR_HEIGHT,24)
	set_control_par(%velocity_id[3],$CONTROL_PAR_WIDTH,49)
	set_control_par(%velocity_id[3],$CONTROL_PAR_HEIGHT,24)
	{/Size}

	{Pictures}
	set_control_par_str(%velocity_id[0], $CONTROL_PAR_PICTURE, "header-vel-btn-1")
	set_control_par_str(%velocity_id[1], $CONTROL_PAR_PICTURE, "header-vel-btn-2")
	set_control_par_str(%velocity_id[2], $CONTROL_PAR_PICTURE, "header-vel-btn-3")
	set_control_par_str(%velocity_id[3], $CONTROL_PAR_PICTURE, "header-vel-btn-4")
	{/Pictures}
	
	{Text / Automation}
	$count_1 := 0
	while ($count_1 < 4)
		set_control_par_str(%velocity_id[$count_1], $CONTROL_PAR_TEXT, "")
		set_control_par(%velocity_id[$count_1], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
		inc($count_1)
	end while
	{/Text}
	
	{Persistency}
	make_persistent ($linear_velocity_btn)
	make_persistent ($exp_1_velocity_btn)
	make_persistent ($exp_2_velocity_btn)
	make_persistent ($fix_velocity_btn)
	{/Persistency}

	{Help Text}
	set_control_help ($linear_velocity_btn,"Velocity Curve: Sets the velocity behaviour to a linear response.")
	set_control_help ($exp_1_velocity_btn,"Exponential Velocity Curve +: Sets the velocity behaviour to a positive exponential response.")
	set_control_help ($exp_2_velocity_btn,"Exponential Velocity Curve -: Sets the velocity behaviour to a negative exponential response.")
	set_control_help ($fix_velocity_btn,"Fixed Velocity: Sets all played velocities to the value specified with the <Max> control.")
	{/Help Text}
	
	{Init & Default Values}
	$linear_velocity_btn := 1
	$exp_1_velocity_btn := 0
	$exp_2_velocity_btn := 0
	$fix_velocity_btn := 0
	{/Init & Default Values}
	
	{Other}		
	declare $mode_velocity {the button states of the four velocity curves}
	make_persistent ($mode_velocity)

	declare %mode_velocity_key[128]
	make_persistent(%mode_velocity_key)
	
	declare const $EXP_SHAPE := 20
	
	declare %table[128 * 128]
	
	declare $CShow
	make_persistent ($CShow)
	
	declare $curve
	make_persistent ($curve)
	$curve := 0
	
	declare const $Shape := 35
	
	declare $helper
	declare %helper_2[128]
	declare $helper_3
	declare $helper_4
	declare $knob_helper
	
	$count_3 := 0
	while ($count_3 < 128)
		$count_1 := 1
		while ($count_1 < 128)
			%table[$count_3 * 128 + $count_1] := $count_1
			inc ($count_1)
		end while
		inc($count_3)
	end while
	
	make_persistent (%table)
	make_persistent ($curve)
	
	declare %shape_form[128]
	declare %curve_form[128]
	declare %comp_form[128]
	$count_1 := 0
	while($count_1 < 128)
		%shape_form[$count_1] := $count_1*100
		%curve_form[$count_1] := $count_1*100
		%comp_form[$count_1] := $count_1
		inc($count_1)
	end while
	make_persistent(%curve_form)
	make_persistent(%shape_form)
	make_persistent(%comp_form)
	declare %curve_table_helper[128]
	declare %curve_deriv[128]
	declare $curve_hight
	
	$knob_helper := ($Shape *(-1) + 1000)
	$count_1 := 0
	$helper := 1000
	$curve_hight := 0
	while($count_1 < 64)
		$helper := ($helper * $knob_helper)/1000
		%curve_deriv[$count_1] := $helper
		%curve_deriv[127-$count_1] := $helper
		$curve_hight := $curve_hight + (%curve_deriv[$count_1]*2)
		inc($count_1)
	end while
	$count_1 := 1
	%curve_table_helper[0] := 0
	while ($count_1 <128)
		%curve_table_helper[$count_1] := ((%curve_table_helper[$count_1-1]+%curve_deriv[$count_1]))
		inc($count_1)
	end while
	$count_1 := 0
	while ($count_1 <128)
		%shape_form[$count_1] := ((%curve_table_helper[$count_1]*128)/(($curve_hight)/100))
		inc($count_1)
	end while
	$count_1 := 0
	while ($count_1 <128)
		%shape_form[$count_1] := (%shape_form[$count_1]*12700)/%shape_form[127]
		inc($count_1)
	end while
	{/Other}
	{/Control Group "Velocity"}

{KEY RANGE}
	{Declarations}
	declare const $range_X := 0
	declare const $range_Y := 0

	declare const $C_3 := 60

	declare $note_counter
	declare $note_offset

	pgs_create_key(DISTANCE_FROM_C3, 1)

	declare ui_slider $low_key_sld (0, 127)
	declare ui_button $low_btn_key_up
	declare ui_button $low_btn_key_dn
	
	declare ui_slider $hi_key_sld (0, 127)
	declare ui_button $hi_btn_key_up
	declare ui_button $hi_btn_key_dn

	declare ui_button $learn_btn

	make_persistent($low_key_sld)
	read_persistent_var($low_key_sld)
	make_persistent($hi_key_sld)
	read_persistent_var($hi_key_sld)

	{ui_ids}
	declare %keyRange_id[7]
	%keyRange_id[0] := get_ui_id($low_key_sld)
	%keyRange_id[1] := get_ui_id($low_btn_key_up)
	%keyRange_id[2] := get_ui_id($low_btn_key_dn)
	
	%keyRange_id[3] := get_ui_id($hi_key_sld)
	%keyRange_id[4] := get_ui_id($hi_btn_key_up)
	%keyRange_id[5] := get_ui_id($hi_btn_key_dn)

	%keyRange_id[6] := get_ui_id($learn_btn)
	
	{Help Text}
	set_control_par_str(%keyRange_id[0],$CONTROL_PAR_HELP,"High Key range: Use this control to select the lowest note of the playable keyboard range.")
	set_control_par_str(%keyRange_id[1],$CONTROL_PAR_HELP,"High Key range: Use this control to select the lowest note of the playable keyboard range.")
	set_control_par_str(%keyRange_id[2],$CONTROL_PAR_HELP,"High Key range: Use this control to select the lowest note of the playable keyboard range.")
	
	set_control_par_str(%keyRange_id[3],$CONTROL_PAR_HELP,"Low Key range: Use this control to select the highest note of the playable keyboard range..")
	set_control_par_str(%keyRange_id[4],$CONTROL_PAR_HELP,"Low Key range: Use this control to select the highest note of the playable keyboard range..")
	set_control_par_str(%keyRange_id[5],$CONTROL_PAR_HELP,"Low Key range: Use this control to select the highest note of the playable keyboard range..")
	set_control_par_str(%keyRange_id[6],$CONTROL_PAR_HELP,"Learn: Use this button and to select the key range of the keyboard. Hit the lowest and highest note on the keyboard to set the playable range")
	
	{Mouse Behaviour & Automation}
	set_control_par(%keyRange_id[0], $CONTROL_PAR_MOUSE_BEHAVIOUR, -50)
	set_control_par(%keyRange_id[0], $CONTROL_PAR_ALLOW_AUTOMATION, 0)
	set_control_par(%keyRange_id[3], $CONTROL_PAR_MOUSE_BEHAVIOUR, -50)
	set_control_par(%keyRange_id[3], $CONTROL_PAR_ALLOW_AUTOMATION, 0)

	
	{Position}
	set_control_par(%keyRange_id[0],$CONTROL_PAR_POS_X, 16)
	set_control_par(%keyRange_id[0],$CONTROL_PAR_POS_Y,43)
	set_control_par(%keyRange_id[1],$CONTROL_PAR_POS_X,83)
	set_control_par(%keyRange_id[1],$CONTROL_PAR_POS_Y,41)
	set_control_par(%keyRange_id[2],$CONTROL_PAR_POS_X,83)
	set_control_par(%keyRange_id[2],$CONTROL_PAR_POS_Y,51)

	set_control_par(%keyRange_id[3],$CONTROL_PAR_POS_X,118)
	set_control_par(%keyRange_id[3],$CONTROL_PAR_POS_Y,43)
	set_control_par(%keyRange_id[4],$CONTROL_PAR_POS_X,186)
	set_control_par(%keyRange_id[4],$CONTROL_PAR_POS_Y,41)
	set_control_par(%keyRange_id[5],$CONTROL_PAR_POS_X,186)
	set_control_par(%keyRange_id[5],$CONTROL_PAR_POS_Y,51)

	set_control_par(%keyRange_id[6],$CONTROL_PAR_POS_X,152)
	set_control_par(%keyRange_id[6],$CONTROL_PAR_POS_Y,12)
	
	{Size}		
	set_control_par(%keyRange_id[1],$CONTROL_PAR_WIDTH,17)
	set_control_par(%keyRange_id[1],$CONTROL_PAR_HEIGHT,13)
	set_control_par(%keyRange_id[2],$CONTROL_PAR_WIDTH,17)
	set_control_par(%keyRange_id[2],$CONTROL_PAR_HEIGHT,13)
	
	set_control_par(%keyRange_id[4],$CONTROL_PAR_WIDTH,17)
	set_control_par(%keyRange_id[4],$CONTROL_PAR_HEIGHT,13)
	set_control_par(%keyRange_id[5],$CONTROL_PAR_WIDTH,17)
	set_control_par(%keyRange_id[5],$CONTROL_PAR_HEIGHT,13)

	set_control_par(%keyRange_id[6],$CONTROL_PAR_WIDTH,51)
	set_control_par(%keyRange_id[6],$CONTROL_PAR_HEIGHT,29)
	
	{Pictures}
	set_control_par_str(%keyRange_id[0],$CONTROL_PAR_PICTURE,"keyrange-numbers")
	set_control_par_str(%keyRange_id[1],$CONTROL_PAR_PICTURE,"header-keyrange-up-btn")
	set_control_par_str(%keyRange_id[2],$CONTROL_PAR_PICTURE,"header-keyrange-down-btn")
	
	set_control_par_str(%keyRange_id[3],$CONTROL_PAR_PICTURE,"keyrange-numbers")
	set_control_par_str(%keyRange_id[4],$CONTROL_PAR_PICTURE,"header-keyrange-up-btn")
	set_control_par_str(%keyRange_id[5],$CONTROL_PAR_PICTURE,"header-keyrange-down-btn")

	set_control_par_str(%keyRange_id[6],$CONTROL_PAR_PICTURE,"header-keyrange-learn-btn")
	
	{Text}
	set_control_par_str(%keyRange_id[1],$CONTROL_PAR_TEXT,"")
	set_control_par_str(%keyRange_id[2],$CONTROL_PAR_TEXT,"")
	set_control_par_str(%keyRange_id[4],$CONTROL_PAR_TEXT,"")
	set_control_par_str(%keyRange_id[5],$CONTROL_PAR_TEXT,"")
	set_control_par_str(%keyRange_id[6],$CONTROL_PAR_TEXT,"")

{VOL FADERS}
	declare %wurzel_zweidrittel[128] := (...
		0,1000,1587,2080,2520,2924,3302,3659,4000,4327,...
		4642,4946,5241,5529,5809,6082,6350,6611,6868,7120,...
		7368,7612,7851,8088,8320,8549,8776,9000,9221,9439,...
		9655,9868,10079,10288,10495,10700,10903,11103,11303,11500,...
		11696,11890,12083,12274,12463,12651,12838,13024,13208,13391,...
		13572,13752,13932,14110,14287,14462,14637,14811,14984,15155,...
		15326,15496,15664,15833,16000,16166,16332,16496,16660,16823,...
		16984,17146,17307,17467,17626,17784,17942,18099,18256,18411,...
		18566,18720,18875,19028,19180,19332,19483,19634,19784,19934,...
		20083,20231,20379,20527,20674,20820,20966,21111,21256,21400,...
		21544,21688,21831,21973,22115,22256,22397,22538,22679,22818,...
		22958,23097,23235,23373,23511,23648,23785,23921,24058,24193,...
		24329,24463,24598,24733,24866,25000,25133,25266)
	
	declare $cur_volume := ($MAX_VOLUME*1000)/21544
	declare $cur_volume_verb := ($MAX_VOLUME_VERB*1000)/21544

{TABS & PANEL BG}
	{TABS & PANEL}

	declare $fx_panel

	declare ui_label $fx_bg (1,1)
	$fx_panel := get_ui_id($fx_bg)
	set_control_par_str($fx_panel,$CONTROL_PAR_TEXT,"")
	set_control_par_str($fx_panel,$CONTROL_PAR_PICTURE,"panel-background")
		set_control_par($fx_panel,$CONTROL_PAR_POS_X,2)
		set_control_par($fx_panel,$CONTROL_PAR_POS_Y,386 + $PANEL_Y)

	declare ui_switch $source_TAB
	declare ui_switch $effects_TAB
	make_persistent($source_TAB)
	make_persistent($effects_TAB)

	declare ui_label $src_fx_lbl_TAB(1,1)

	declare !VIEW_tab_pics[3]
	!VIEW_tab_pics[0] := "panel-tab-source"
	!VIEW_tab_pics[1] := "panel-tab-effects"
	!VIEW_tab_pics[2] := "panel-label-srcfx"

	declare %view_id[3]
			%view_id[0] := get_ui_id($source_TAB)
			%view_id[1] := get_ui_id($effects_TAB)
			%view_id[2] := get_ui_id($src_fx_lbl_TAB)
	
	$a := 0
	while ($a < 3)
		set_control_par_str(%view_id[$a], $CONTROL_PAR_PICTURE, !VIEW_tab_pics[$a])
		set_control_par_str(%view_id[$a], $CONTROL_PAR_TEXT, "")
		set_control_par_str(%view_id[$a], $CONTROL_PAR_HELP, "Click to view the Source or Effects controls for the tile.")
			set_control_par(%view_id[$a], $CONTROL_PAR_WIDTH, 82)
			set_control_par(%view_id[$a], $CONTROL_PAR_HEIGHT,28)
			set_control_par(%view_id[$a], $CONTROL_PAR_POS_X, ($a * 81) + 234)
			set_control_par(%view_id[$a], $CONTROL_PAR_POS_Y, 389 + $PANEL_Y)
		inc($a)
	end while
	set_control_par(%view_id[2], $CONTROL_PAR_POS_X, 274)
	set_control_par(%view_id[2], $CONTROL_PAR_POS_Y, 390 + $PANEL_Y)

	set_control_par(%view_id[0],$CONTROL_PAR_VALUE, 1)

	declare %Tile_View_Tabs[$NUM_TILES]	:= ($NULL)
	%Tile_View_Tabs[$TILE_OHS]			:= 1
	%Tile_View_Tabs[$TILE_OHM]			:= 1
	%Tile_View_Tabs[$TILE_ROOM]			:= 1
	%Tile_View_Tabs[$TILE_MASTER]		:= 1
	%Tile_View_Tabs[$TILE_CYMB1]		:= 0
	%Tile_View_Tabs[$TILE_CYMB2]		:= 0
	%Tile_View_Tabs[$TILE_CYMB3]		:= 0
	%Tile_View_Tabs[$TILE_PERC1]		:= 0
	%Tile_View_Tabs[$TILE_PERC2]		:= 0
	%Tile_View_Tabs[$TILE_PERC3]		:= 0
	%Tile_View_Tabs[$TILE_PERC4]		:= 0
	%Tile_View_Tabs[$TILE_PERC5]		:= 0

	declare %fx_bg_state[7] := (...
	$SOURCE_MAIN_VIEW,...
	$SOURCE_GEN_VIEW,...
	$SOURCE_SIMPLE,...
	$SOURCE_PERC,...
	$EFFECTS_VIEW,...
	$REVERB_VIEW,...
	$MASTER_VIEW)

{Source PANEL}
	declare $cutof_freq

	declare @panel_knob_big
	@panel_knob_big := "panel-knob-big"
	declare @panel_knob_small
	@panel_knob_small := "panel-knob-small"

	declare %src_data[19*15 + 1]

	$a := 0
	while ($a < $NUM_TILES)
		%src_data[($a * $NUM_CONTROLS_SOURCE) + $SRC_EL_DELAY] := 1
		inc($a)
	end while
	
	make_persistent(%src_data)
	read_persistent_var(%src_data)

	declare %mic_balance_state[6] := (1)
	make_persistent(%mic_balance_state)
	read_persistent_var(%mic_balance_state)

	pgs_create_key(PURGE_MODE, 1)
	pgs_set_key_val(PURGE_MODE, 0, 1)
	
	pgs_create_key(MIC_VOICE_ALLOW, 6)
	$z := 0
	while ($z < 6)
		pgs_set_key_val(MIC_VOICE_ALLOW, $z, %mic_balance_state[$z])	
		inc($z)
	end while

	pgs_create_key(ELEC_DELAY, 6)
	$z := 0
	while ($z < 6)
		pgs_set_key_val(ELEC_DELAY, $z, %src_data[(%Inst_to_Tile_remap[$z] * 15) + $SRC_EL_DELAY])	
		inc($z)
	end while

	declare $opn_HH_pgs_value
	make_persistent($opn_HH_pgs_value)
	read_persistent_var($opn_HH_pgs_value)
	pgs_create_key(ELEC_DELAY_OPN_HH, 1)
	pgs_set_key_val(ELEC_DELAY_OPN_HH, 0, $opn_HH_pgs_value)	



	declare ui_slider $ac_el_BALANCE (0, 10000)
	{acoustic layer}
	declare ui_slider $ac_Tune (402778, 597222)	{-7 / +7 steps}
	declare ui_slider $ac_mic_Bal (0, 10000)
	declare ui_slider $ac_room_oh_level (0,794000)
	declare ui_slider $ac_trash_level (0,500000)
	declare ui_slider $ac_attack (0, 750000)
	declare ui_slider $ac_hold (0, 900000)
	declare ui_slider $ac_decay (100000, 1000000)
	{electronic layer}
	declare ui_slider $el_Tune (402778, 597222)	{-7 / +7 steps}
	declare ui_slider $el_dual_Filter (-1000000, 902777)
	declare ui_slider $el_trig_delay(1,50000)
	declare ui_slider $el_attack (0, 750000)
	declare ui_slider $el_hold (0, 900000)
	declare ui_slider $el_decay (100000, 1000000)
	{seperate case for Percusion PLATE}
	declare ui_slider $ac_perc_plate_level (0,794000)

	make_persistent($ac_el_BALANCE)
	make_persistent($ac_Tune)
	make_persistent($ac_mic_Bal)
	make_persistent($ac_room_oh_level)
	make_persistent($ac_trash_level)
	make_persistent($ac_attack)
	make_persistent($ac_hold)
	make_persistent($ac_decay)
	make_persistent($el_Tune)
	make_persistent($el_dual_Filter)
	make_persistent($el_trig_delay)
	make_persistent($el_attack)
	make_persistent($el_hold)
	make_persistent($el_decay)
	make_persistent($ac_perc_plate_level)

	declare %source_control_id[15]
			%source_control_id[00] := get_ui_id($ac_el_BALANCE)
			%source_control_id[01] := get_ui_id($ac_Tune)
			%source_control_id[02] := get_ui_id($ac_mic_Bal)
			%source_control_id[03] := get_ui_id($ac_room_oh_level)
			%source_control_id[04] := get_ui_id($ac_trash_level)
			%source_control_id[05] := get_ui_id($ac_attack)
			%source_control_id[06] := get_ui_id($ac_hold)
			%source_control_id[07] := get_ui_id($ac_decay)
			%source_control_id[08] := get_ui_id($el_Tune)
			%source_control_id[09] := get_ui_id($el_dual_Filter)
			%source_control_id[10] := get_ui_id($el_trig_delay)
			%source_control_id[11] := get_ui_id($el_attack)
			%source_control_id[12] := get_ui_id($el_hold)
			%source_control_id[13] := get_ui_id($el_decay)
			%source_control_id[14] := get_ui_id($ac_perc_plate_level)

	if ($cur_tile = $TILE_PERC1 or $cur_tile = $TILE_PERC2 or $cur_tile = $TILE_PERC3 or $cur_tile = $TILE_PERC4 or $cur_tile = $TILE_PERC5 or ...
			$cur_tile = $TILE_CYMB1 or $cur_tile = $TILE_CYMB2 or $cur_tile = $TILE_CYMB3)
		!source_auto_names[03] := "Volume"
	end if

	{BALANCE FADER}
	$a := 0
	set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, "panel-fader")
	set_control_par_str(%source_control_id[$a], $CONTROL_PAR_HELP, !source_help[$a])
	set_control_par_str(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !source_auto_names[$a])
		set_control_par(%source_control_id[$a], $CONTROL_PAR_MOUSE_BEHAVIOUR, $TL_FADER_BIG)
		set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, 5000)
		set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 5000)
		set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, 29)
		set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 437 + $PANEL_Y)

	$a := 1
	while ($a < num_elements(%source_control_id))
		set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_big)
		set_control_par_str(%source_control_id[$a], $CONTROL_PAR_HELP, !source_help[$a])
		set_control_par_str(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !source_auto_names[$a])
			set_control_par(%source_control_id[$a], $CONTROL_PAR_MOUSE_BEHAVIOUR, $TL_KNOB_SMALL)
		if ($a < 5)
			select ($a)
				case 1 {tune}
					set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
					set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, ($a * 30) + 230)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 429 + $PANEL_Y)
				case 2 {mic balance}
					set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
					set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 5000)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, ($a * 48) + 234)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 429 + $PANEL_Y)
				case 3 {Room/OH}
					set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
					set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 397000)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, ($a * 48) + 234)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 429 + $PANEL_Y)
				case 4 {Trash}
					set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
					set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, ($a * 48) + 234)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 429 + $PANEL_Y)
			end select
		else
			if (in_range($a,5,7))
				set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_small)
				set_control_par_str(%source_control_id[$a], $CONTROL_PAR_HELP, !source_help[$a])
				set_control_par_str(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !source_auto_names[$a])
					set_control_par(%source_control_id[$a], $CONTROL_PAR_MOUSE_BEHAVIOUR, $TL_KNOB_SMALL)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, ($a * 43) + 278)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 434 + $PANEL_Y)
				select ($a)
					case 5
						set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
						set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 0)
					case 6
						set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
						set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 900000)
					case 7							
						set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
						set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 585723)
				end select	
			else
				select ($a)
					case 8 {elec Tune}
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_big)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
							set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, (($a-7) * 30) + 230)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 488 + $PANEL_Y)
					case 9 {el. Filter LP/HP}
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_big)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
							set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 0)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, (($a-7) * 48) + 258)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 488 + $PANEL_Y)
					case 10 {El. Triger Delay}
							set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
							set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 0)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, (($a-7) * 48) + 258)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 488 + $PANEL_Y)
					case 11 to 13
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_small)
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_HELP, !source_help[$a])
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !source_auto_names[$a])
							set_control_par(%source_control_id[$a], $CONTROL_PAR_MOUSE_BEHAVIOUR, $TL_KNOB_SMALL)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, (($a-6) * 43) + 278)
							set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 493 + $PANEL_Y)
						select ($a)
							case 11
								set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
								set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 0)
							case 12
								set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
								set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 900000)
							case 13							
								set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
								set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 585723)
						end select	
					case 14
						set_control_par_str(%source_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_big)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_VALUE, %src_data[($cur_tile * 15) + $a])
						set_control_par(%source_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 397000)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_X, (($a - 11) * 55) + 202)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_POS_Y, 429 + $PANEL_Y)
				end select
			end if
		end if
		inc($a)
	end while
	
	{array to keep the position property of the source panel}
	declare %source_controls_pos[15]
	$a := 0
	while ($a < num_elements(%source_controls_pos))
		%source_controls_pos[$a] := get_control_par(%source_control_id[$a],$CONTROL_PAR_POS_X)
		set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($a)
	end while

	{Generic controls for simpler tiles with only Tune, Room/OH, and AHD}
	declare %source_GEN_control_id[6]
			%source_GEN_control_id[0] := %source_control_id[01]
			%source_GEN_control_id[1] := %source_control_id[03]
			%source_GEN_control_id[2] := %source_control_id[05]
			%source_GEN_control_id[3] := %source_control_id[06]
			%source_GEN_control_id[4] := %source_control_id[07]
			%source_GEN_control_id[5] := %source_control_id[14]
	
	declare %source_GEN_pos_X[6]
	declare %source_GEN_pos_Y[6]
	
	{store the position of the controls for easy repositioning later}
	$a := 0
	while ($a < num_elements(%source_GEN_control_id))
		%source_GEN_pos_X[$a] := get_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X)
		%source_GEN_pos_Y[$a] := get_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y)
		inc($a)
	end while

{Source Labels}
	declare ui_label $lbl_Ac_Level (1,1)
	declare ui_label $lbl_El_Level (1,1)
	declare ui_label $lbl_ac_Tune (1,1)
	declare ui_label $lbl_ac_mic_Bal (1,1)
	declare ui_label $lbl_ac_trash_level (1,1)
	declare ui_label $lbl_ac_room_oh_BAL (1,1)
	declare ui_label $lbl_ac_attack (1,1)
	declare ui_label $lbl_ac_hold (1,1)
	declare ui_label $lbl_ac_decay (1,1)
	declare ui_label $lbl_el_Tune (1,1)
	declare ui_label $lbl_el_dual_Filter (1,1)
	declare ui_label $lbl_el_trig_delay(1,1)
	declare ui_label $lbl_el_attack (1,1)
	declare ui_label $lbl_el_hold (1,1)
	declare ui_label $lbl_el_decay (1,1)
	declare ui_label $lbl_perc_plate (1,1)

	declare ui_label $stat_Ac_Level (1,1)
	declare ui_label $stat_El_Level (1,1)
	declare ui_label $stat_ac_Tune (1,1)
	declare ui_label $stat_ac_mic_Bal (1,1)
	declare ui_label $stat_ac_trash_level (1,1)
	declare ui_label $stat_ac_room_oh_BAL (1,1)
	declare ui_label $stat_ac_attack (1,1)
	declare ui_label $stat_ac_hold (1,1)
	declare ui_label $stat_ac_decay (1,1)
	declare ui_label $stat_el_Tune (1,1)
	declare ui_label $stat_el_dual_Filter (1,1)
	declare ui_label $stat_el_trig_delay(1,1)
	declare ui_label $stat_el_attack (1,1)
	declare ui_label $stat_el_hold (1,1)
	declare ui_label $stat_el_decay (1,1)
	declare ui_label $stat_perc_plate (1,1)

	declare %lbl_source_id[16]
			%lbl_source_id[00] := get_ui_id($lbl_Ac_Level)
			%lbl_source_id[01] := get_ui_id($lbl_El_Level)
			%lbl_source_id[02] := get_ui_id($lbl_ac_Tune)
			%lbl_source_id[03] := get_ui_id($lbl_ac_mic_Bal)
			%lbl_source_id[04] := get_ui_id($lbl_ac_room_oh_BAL)
			%lbl_source_id[05] := get_ui_id($lbl_ac_trash_level)
			%lbl_source_id[06] := get_ui_id($lbl_ac_attack)
			%lbl_source_id[07] := get_ui_id($lbl_ac_hold)
			%lbl_source_id[08] := get_ui_id($lbl_ac_decay)
			%lbl_source_id[09] := get_ui_id($lbl_el_Tune)
			%lbl_source_id[10] := get_ui_id($lbl_el_dual_Filter)
			%lbl_source_id[11] := get_ui_id($lbl_el_trig_delay)
			%lbl_source_id[12] := get_ui_id($lbl_el_attack)
			%lbl_source_id[13] := get_ui_id($lbl_el_hold)
			%lbl_source_id[14] := get_ui_id($lbl_el_decay)
			%lbl_source_id[15] := get_ui_id($lbl_perc_plate)

	declare %stat_src_lbl_id[16]
			%stat_src_lbl_id[00] := get_ui_id($stat_Ac_Level)
			%stat_src_lbl_id[01] := get_ui_id($stat_El_Level)
			%stat_src_lbl_id[02] := get_ui_id($stat_ac_Tune)
			%stat_src_lbl_id[03] := get_ui_id($stat_ac_mic_Bal)
			%stat_src_lbl_id[04] := get_ui_id($stat_ac_room_oh_BAL)
			%stat_src_lbl_id[05] := get_ui_id($stat_ac_trash_level)
			%stat_src_lbl_id[06] := get_ui_id($stat_ac_attack)
			%stat_src_lbl_id[07] := get_ui_id($stat_ac_hold)
			%stat_src_lbl_id[08] := get_ui_id($stat_ac_decay)
			%stat_src_lbl_id[09] := get_ui_id($stat_el_Tune)
			%stat_src_lbl_id[10] := get_ui_id($stat_el_dual_Filter)
			%stat_src_lbl_id[11] := get_ui_id($stat_el_trig_delay)
			%stat_src_lbl_id[12] := get_ui_id($stat_el_attack)
			%stat_src_lbl_id[13] := get_ui_id($stat_el_hold)
			%stat_src_lbl_id[14] := get_ui_id($stat_el_decay)
			%stat_src_lbl_id[15] := get_ui_id($stat_perc_plate)

	$a := 0
	while ($a < num_elements(%lbl_source_id) )
		set_control_par_str(%lbl_source_id[$a], $CONTROL_PAR_TEXT, ""){!source_labels[$a]}
			set_control_par(%lbl_source_id[$a], $CONTROL_PAR_FONT_TYPE,$FONT_ID)
			set_control_par(%lbl_source_id[$a], $CONTROL_PAR_TEXT_ALIGNMENT,1)
			set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
			select ($a)
				case 0
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[0],$CONTROL_PAR_POS_X) - 45)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[0],$CONTROL_PAR_POS_Y) - 15)
				case 1
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[0],$CONTROL_PAR_POS_X) - 40)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[0],$CONTROL_PAR_POS_Y) + 84)
				case 2
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 26)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 34)
				case 3 to 5
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 26)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 34)
				case 6 to 8
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 31)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 27)
				case 9
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 26)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 34)
				case 10 to 11
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 26)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 34)
				case 12 to 14
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_X) - 31)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 1],$CONTROL_PAR_POS_Y) + 27)
				case 15
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_control_id[$a - 12],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_control_id[$a - 12],$CONTROL_PAR_POS_Y) + 34)
			end select
			set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($a)
	end while

	declare const $STAT_LBL_OFS_X := 17
	declare const $STAT_LBL_OFS_Y := 2

	declare %stat_lbl_ofs_X[16] := (17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17)
	declare %stat_lbl_ofs_Y[16] := (02,04,04,04,04,04,09,09,09,04,04,04,04,04,04,04)

	$a := 0
	while ($a < num_elements(%stat_src_lbl_id) )
		set_control_par_str(%stat_src_lbl_id[$a], $CONTROL_PAR_TEXT, "")
		set_control_par_str(%stat_src_lbl_id[$a], $CONTROL_PAR_PICTURE, "panel-source-lbl")
			set_control_par(%stat_src_lbl_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_id[$a],$CONTROL_PAR_POS_X) + %stat_lbl_ofs_X[$a]) {%stat_lbl_ofs_X[$a]}
			set_control_par(%stat_src_lbl_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
			set_control_par(%stat_src_lbl_id[$a],$CONTROL_PAR_PICTURE_STATE,$a)
		inc($a)
	end while

	{LABELS for Generic controls for simpler tiles with only Tune, Room/OH, and AHD}
	declare %lbl_source_GEN_id[6]
			%lbl_source_GEN_id[0] := %lbl_source_id[02]
			%lbl_source_GEN_id[1] := %lbl_source_id[04]
			%lbl_source_GEN_id[2] := %lbl_source_id[06]
			%lbl_source_GEN_id[3] := %lbl_source_id[07]
			%lbl_source_GEN_id[4] := %lbl_source_id[08]
			%lbl_source_GEN_id[5] := %lbl_source_id[15]
	declare %stat_lbl_src_GEN_id[6]
			%stat_lbl_src_GEN_id[0] := %stat_src_lbl_id[02]
			%stat_lbl_src_GEN_id[1] := %stat_src_lbl_id[04]
			%stat_lbl_src_GEN_id[2] := %stat_src_lbl_id[06]
			%stat_lbl_src_GEN_id[3] := %stat_src_lbl_id[07]
			%stat_lbl_src_GEN_id[4] := %stat_src_lbl_id[08]
			%stat_lbl_src_GEN_id[5] := %stat_src_lbl_id[15]

{Source ACOUSTIC LAYER Menus, PICs, Arrows}

	declare const $AC_NUM_GROUPS	:= 252
	declare const $EL_NUM_GROUPS	:= 120

	pgs_create_key(AC_LOAD_PURGE_STATE, 252)
	pgs_create_key(EL_LOAD_PURGE_STATE, 120)

	declare %Ac_Group_PURGE_State[$AC_NUM_GROUPS] := (1)
	make_persistent(%Ac_Group_PURGE_State)
	read_persistent_var(%Ac_Group_PURGE_State)

	pgs_set_key_val(COMMAND, 0, -1)
	$x := 0
	while ($x < $AC_NUM_GROUPS)
		pgs_set_key_val(AC_LOAD_PURGE_STATE, $x, %Ac_Group_PURGE_State[$x])
		inc($x)
	end while
	pgs_set_key_val(COMMAND, 0, 0)

	declare %El_Group_PURGE_State[$EL_NUM_GROUPS] := (1)
	make_persistent(%El_Group_PURGE_State)
	read_persistent_var(%El_Group_PURGE_State)

	pgs_set_key_val(COMMAND, 0, -1)
	$x := 0
	while ($x < $EL_NUM_GROUPS)
		pgs_set_key_val(EL_LOAD_PURGE_STATE, $x, %El_Group_PURGE_State[$x])
		inc($x)
	end while
	pgs_set_key_val(COMMAND, 0, 0)

	declare $Ac_sel_Kick
	declare $Ac_sel_Snare
	declare $Ac_sel_HiHat
	declare $Ac_sel_Tom1
	declare $Ac_sel_Tom2
	declare $Ac_sel_Tom3
	declare $Ac_sel_Cymb1
	declare $Ac_sel_Cymb2
	declare $Ac_sel_Cymb3
	declare $Ac_sel_Perc1
	declare $Ac_sel_Perc2
	declare $Ac_sel_Perc3
	declare $Ac_sel_Perc4
	declare $Ac_sel_Perc5
	declare $Ac_menu_index
	declare $El_menu_index

	make_persistent($Ac_sel_Kick)
	read_persistent_var($Ac_sel_Kick)
	make_persistent($Ac_sel_Snare)
	read_persistent_var($Ac_sel_Snare)
	make_persistent($Ac_sel_HiHat)
	read_persistent_var($Ac_sel_HiHat)
	make_persistent($Ac_sel_Tom1)
	read_persistent_var($Ac_sel_Tom1)
	make_persistent($Ac_sel_Tom2)
	read_persistent_var($Ac_sel_Tom2)
	make_persistent($Ac_sel_Tom3)
	read_persistent_var($Ac_sel_Tom3)
	make_persistent($Ac_sel_Cymb1)
	read_persistent_var($Ac_sel_Cymb1)
	make_persistent($Ac_sel_Cymb2)
	read_persistent_var($Ac_sel_Cymb2)
	make_persistent($Ac_sel_Cymb3)
	read_persistent_var($Ac_sel_Cymb3)
	make_persistent($Ac_sel_Perc1)
	read_persistent_var($Ac_sel_Perc1)
	make_persistent($Ac_sel_Perc2)
	read_persistent_var($Ac_sel_Perc2)
	make_persistent($Ac_sel_Perc3)
	read_persistent_var($Ac_sel_Perc3)
	make_persistent($Ac_sel_Perc4)
	read_persistent_var($Ac_sel_Perc4)
	make_persistent($Ac_sel_Perc5)
	read_persistent_var($Ac_sel_Perc5)

	declare %Tile_has_Ac_Layers[$NUM_TILES]	 := ($NULL)
			%Tile_has_Ac_Layers[$TILE_KICK]	 := $YES
			%Tile_has_Ac_Layers[$TILE_SNARE] := $YES
			%Tile_has_Ac_Layers[$TILE_HIHAT] := $YES
			%Tile_has_Ac_Layers[$TILE_TOM1]	 := $YES
			%Tile_has_Ac_Layers[$TILE_TOM2]	 := $YES
			%Tile_has_Ac_Layers[$TILE_TOM3]	 := $YES
			%Tile_has_Ac_Layers[$TILE_CYMB1] := $YES
			%Tile_has_Ac_Layers[$TILE_CYMB2] := $YES
			%Tile_has_Ac_Layers[$TILE_CYMB3] := $YES
			%Tile_has_Ac_Layers[$TILE_PERC1] := $YES
			%Tile_has_Ac_Layers[$TILE_PERC2] := $YES
			%Tile_has_Ac_Layers[$TILE_PERC3] := $YES
			%Tile_has_Ac_Layers[$TILE_PERC4] := $YES
			%Tile_has_Ac_Layers[$TILE_PERC5] := $YES

	declare %Tile_DOES_NOT_have_EL_Layers[$NUM_TILES]	:= ($NULL)
			%Tile_DOES_NOT_have_EL_Layers[$TILE_OHS]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_OHM]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_ROOM]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_PERC1]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_PERC2]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_PERC3]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_PERC4]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_PERC5]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_CYMB1]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_CYMB2]	:= $YES
			%Tile_DOES_NOT_have_EL_Layers[$TILE_CYMB3]	:= $YES

	pgs_create_key(ACTIVE_KICK, 1)
	pgs_create_key(ACTIVE_SNARE, 1)
	pgs_create_key(ACTIVE_HIHAT, 1)
	pgs_create_key(ACTIVE_TOM1, 1)
	pgs_create_key(ACTIVE_TOM2, 1)
	pgs_create_key(ACTIVE_TOM3, 1)
	pgs_create_key(ACTIVE_CYMB1, 1)
	pgs_create_key(ACTIVE_CYMB2, 1)
	pgs_create_key(ACTIVE_CYMB3, 1)
	pgs_create_key(ACTIVE_PERC1, 1)
	pgs_create_key(ACTIVE_PERC2, 1)
	pgs_create_key(ACTIVE_PERC3, 1)
	pgs_create_key(ACTIVE_PERC4, 1)
	pgs_create_key(ACTIVE_PERC5, 1)

	declare %Ac_Inst_Selection[$NUM_TILES]
	make_persistent(%Ac_Inst_Selection)
	read_persistent_var(%Ac_Inst_Selection)
	
	pgs_set_key_val(COMMAND, 0, -1)
	pgs_set_key_val(ACTIVE_KICK,  0, %Ac_Inst_Selection[$TILE_KICK])
	pgs_set_key_val(ACTIVE_SNARE, 0, %Ac_Inst_Selection[$TILE_SNARE])
	pgs_set_key_val(ACTIVE_HIHAT, 0, %Ac_Inst_Selection[$TILE_HIHAT])
	pgs_set_key_val(ACTIVE_TOM1,  0, %Ac_Inst_Selection[$TILE_TOM1])
	pgs_set_key_val(ACTIVE_TOM2,  0, %Ac_Inst_Selection[$TILE_TOM2])
	pgs_set_key_val(ACTIVE_TOM3,  0, %Ac_Inst_Selection[$TILE_TOM3])
	pgs_set_key_val(ACTIVE_CYMB1, 0, %Ac_Inst_Selection[$TILE_CYMB1])
	pgs_set_key_val(ACTIVE_CYMB2, 0, %Ac_Inst_Selection[$TILE_CYMB2])
	pgs_set_key_val(ACTIVE_CYMB3, 0, %Ac_Inst_Selection[$TILE_CYMB3])
	pgs_set_key_val(ACTIVE_PERC1, 0, %Ac_Inst_Selection[$TILE_PERC1])
	pgs_set_key_val(ACTIVE_PERC2, 0, %Ac_Inst_Selection[$TILE_PERC2])
	pgs_set_key_val(ACTIVE_PERC3, 0, %Ac_Inst_Selection[$TILE_PERC3])
	pgs_set_key_val(ACTIVE_PERC4, 0, %Ac_Inst_Selection[$TILE_PERC4])
	pgs_set_key_val(ACTIVE_PERC5, 0, %Ac_Inst_Selection[$TILE_PERC5])


	declare !Ac_Layer_Pictures[$NUM_TILES]
	!Ac_Layer_Pictures[$TILE_KICK]	:= "label-kick"
	!Ac_Layer_Pictures[$TILE_SNARE]	:= "label-snare"
	!Ac_Layer_Pictures[$TILE_HIHAT]	:= "label-hihat"
	!Ac_Layer_Pictures[$TILE_TOM1]	:= "label-tomA"
	!Ac_Layer_Pictures[$TILE_TOM2]	:= "label-tomB"
	!Ac_Layer_Pictures[$TILE_TOM3]	:= "label-tomC"
	!Ac_Layer_Pictures[$TILE_CYMB1]	:= "label-cymbal"
	!Ac_Layer_Pictures[$TILE_CYMB2]	:= "label-cymbal2"
	!Ac_Layer_Pictures[$TILE_CYMB3]	:= "label-cymbal3"
	!Ac_Layer_Pictures[$TILE_PERC1]	:= "label-perc1"
	!Ac_Layer_Pictures[$TILE_PERC2]	:= "label-perc2"
	!Ac_Layer_Pictures[$TILE_PERC3]	:= "label-perc3"
	!Ac_Layer_Pictures[$TILE_PERC4]	:= "label-perc4"
	!Ac_Layer_Pictures[$TILE_PERC5]	:= "label-perc5"

	declare ui_label $Ac_Kick_PIC(1,1)
	declare ui_label $Ac_Snare_PIC(1,1)
	declare ui_label $Ac_HiHat_PIC(1,1)
	declare ui_label $Ac_Tom1_PIC(1,1)
	declare ui_label $Ac_Tom2_PIC(1,1)
	declare ui_label $Ac_Tom3_PIC(1,1)
	declare ui_label $Ac_Cymb1_PIC(1,1)
	declare ui_label $Ac_Cymb2_PIC(1,1)
	declare ui_label $Ac_Cymb3_PIC(1,1)
	declare ui_label $Ac_Perc1_PIC(1,1)
	declare ui_label $Ac_Perc2_PIC(1,1)
	declare ui_label $Ac_Perc3_PIC(1,1)
	declare ui_label $Ac_Perc4_PIC(1,1)
	declare ui_label $Ac_Perc5_PIC(1,1)

	declare ui_menu $Ac_Kick_mnu
	declare ui_menu $Ac_Snare_mnu
	declare ui_menu $Ac_HiHat_mnu
	declare ui_menu $Ac_Tom1_mnu
	declare ui_menu $Ac_Tom2_mnu
	declare ui_menu $Ac_Tom3_mnu
	declare ui_menu $Ac_Cymb1_mnu
	declare ui_menu $Ac_Cymb2_mnu
	declare ui_menu $Ac_Cymb3_mnu
	declare ui_menu $Ac_Perc1_mnu
	declare ui_menu $Ac_Perc2_mnu
	declare ui_menu $Ac_Perc3_mnu
	declare ui_menu $Ac_Perc4_mnu
	declare ui_menu $Ac_Perc5_mnu

	declare ui_switch $Ac_Prev_btn
	declare ui_switch $Ac_Next_btn
	
	make_persistent ($Ac_Kick_mnu)
	make_persistent ($Ac_Snare_mnu)
	make_persistent ($Ac_HiHat_mnu)
	make_persistent ($Ac_Tom1_mnu)
	make_persistent ($Ac_Tom2_mnu)
	make_persistent ($Ac_Tom3_mnu)
	make_persistent ($Ac_Cymb1_mnu)
	make_persistent ($Ac_Cymb2_mnu)
	make_persistent ($Ac_Cymb3_mnu)
	make_persistent ($Ac_Perc1_mnu)
	make_persistent ($Ac_Perc2_mnu)
	make_persistent ($Ac_Perc3_mnu)
	make_persistent ($Ac_Perc4_mnu)
	make_persistent ($Ac_Perc5_mnu)

	declare %Ac_src_Pic_id[$NUM_TILES] := ($NULL)
	%Ac_src_Pic_id[$TILE_KICK]	:= get_ui_id($Ac_Kick_PIC)
	%Ac_src_Pic_id[$TILE_SNARE]	:= get_ui_id($Ac_Snare_PIC)
	%Ac_src_Pic_id[$TILE_HIHAT]	:= get_ui_id($Ac_HiHat_PIC)
	%Ac_src_Pic_id[$TILE_TOM1]	:= get_ui_id($Ac_Tom1_PIC)
	%Ac_src_Pic_id[$TILE_TOM2]	:= get_ui_id($Ac_Tom2_PIC)
	%Ac_src_Pic_id[$TILE_TOM3]	:= get_ui_id($Ac_Tom3_PIC)
	%Ac_src_Pic_id[$TILE_CYMB1]	:= get_ui_id($Ac_Cymb1_PIC)
	%Ac_src_Pic_id[$TILE_CYMB2]	:= get_ui_id($Ac_Cymb2_PIC)
	%Ac_src_Pic_id[$TILE_CYMB3]	:= get_ui_id($Ac_Cymb3_PIC)
	%Ac_src_Pic_id[$TILE_PERC1]	:= get_ui_id($Ac_Perc1_PIC)
	%Ac_src_Pic_id[$TILE_PERC2]	:= get_ui_id($Ac_Perc2_PIC)
	%Ac_src_Pic_id[$TILE_PERC3]	:= get_ui_id($Ac_Perc3_PIC)
	%Ac_src_Pic_id[$TILE_PERC4]	:= get_ui_id($Ac_Perc4_PIC)
	%Ac_src_Pic_id[$TILE_PERC5]	:= get_ui_id($Ac_Perc5_PIC)

	declare %Ac_Layer_Menu_id[$NUM_TILES] := ($NULL)
	%Ac_Layer_Menu_id[$TILE_KICK]	:= get_ui_id($Ac_Kick_mnu)
	%Ac_Layer_Menu_id[$TILE_SNARE]	:= get_ui_id($Ac_Snare_mnu)
	%Ac_Layer_Menu_id[$TILE_HIHAT]	:= get_ui_id($Ac_HiHat_mnu)
	%Ac_Layer_Menu_id[$TILE_TOM1]	:= get_ui_id($Ac_Tom1_mnu)
	%Ac_Layer_Menu_id[$TILE_TOM2]	:= get_ui_id($Ac_Tom2_mnu)
	%Ac_Layer_Menu_id[$TILE_TOM3]	:= get_ui_id($Ac_Tom3_mnu)
	%Ac_Layer_Menu_id[$TILE_CYMB1]	:= get_ui_id($Ac_Cymb1_mnu)
	%Ac_Layer_Menu_id[$TILE_CYMB2]	:= get_ui_id($Ac_Cymb2_mnu)
	%Ac_Layer_Menu_id[$TILE_CYMB3]	:= get_ui_id($Ac_Cymb3_mnu)
	%Ac_Layer_Menu_id[$TILE_PERC1]	:= get_ui_id($Ac_Perc1_mnu)
	%Ac_Layer_Menu_id[$TILE_PERC2]	:= get_ui_id($Ac_Perc2_mnu)
	%Ac_Layer_Menu_id[$TILE_PERC3]	:= get_ui_id($Ac_Perc3_mnu)
	%Ac_Layer_Menu_id[$TILE_PERC4]	:= get_ui_id($Ac_Perc4_mnu)
	%Ac_Layer_Menu_id[$TILE_PERC5]	:= get_ui_id($Ac_Perc5_mnu)

	$a := 0
	while ($a < $NUM_TILES)
			if (%Ac_Layer_Menu_id[$a] # $NULL)
				set_control_par_str(%Ac_Layer_Menu_id[$a], $CONTROL_PAR_HELP, "Acoustic Layer Menu: Select the available Acoustic element for the loaded instrument.")
			end if
		inc($a)
	end while

	declare %Ac_Arrow_id[2]
	%Ac_Arrow_id[00] := get_ui_id($Ac_Prev_btn)
	%Ac_Arrow_id[01] := get_ui_id($Ac_Next_btn)
	set_control_par_str(%Ac_Arrow_id[00], $CONTROL_PAR_HELP, "Previous Acoustic Layer : Select the previous Acoustic element for the loaded instrument.")
	set_control_par_str(%Ac_Arrow_id[01], $CONTROL_PAR_HELP, "Next Acoustic Layer : Select the next Acoustic element for the loaded instrument.")
	
	$a := 0
	while ($a < $NUM_AC_KICK)
	    add_menu_item ($Ac_Kick_mnu,!Ac_Kick_Names[$a],$a)
	    inc ($a)
	end while
	$a := 0
	while ($a < $NUM_AC_SNARE)
	    add_menu_item ($Ac_Snare_mnu,!Ac_Snare_Names[$a],$a)
	    inc ($a)
	end while
	$a := 0
	while ($a < $NUM_AC_HIHAT)
	    add_menu_item ($Ac_HiHat_mnu,!Ac_HiHat_Names[$a],$a)
	    inc ($a)
	end while
	$a := 0
	while ($a < $NUM_AC_TOM1)
	    add_menu_item ($Ac_Tom1_mnu,!Ac_Tom1_Names[$a],$a)
	    add_menu_item ($Ac_Tom2_mnu,!Ac_Tom2_Names[$a],$a)
	    add_menu_item ($Ac_TOm3_mnu,!Ac_Tom3_Names[$a],$a)
	    inc ($a)
	end while
	$a := 0
	while ($a < $NUM_AC_CYMB1)
	    add_menu_item ($Ac_Cymb1_mnu,!Ac_Cymb1_Names[$a],$a)
	    add_menu_item ($Ac_Cymb2_mnu,!Ac_Cymb2_Names[$a],$a)
	    add_menu_item ($Ac_Cymb3_mnu,!Ac_Cymb3_Names[$a],$a)
	    inc ($a)
	end while
	$a := 0
	while ($a < $NUM_AC_PERC1)
	    add_menu_item ($Ac_Perc1_mnu,!Ac_Perc1_Names[$a],$a)
	    add_menu_item ($Ac_Perc2_mnu,!Ac_Perc2_Names[$a],$a)
	    add_menu_item ($Ac_Perc3_mnu,!Ac_Perc3_Names[$a],$a)
	    add_menu_item ($Ac_Perc4_mnu,!Ac_Perc4_Names[$a],$a)
	    add_menu_item ($Ac_Perc5_mnu,!Ac_Perc5_Names[$a],$a)
	    inc ($a)
	end while
	
	$a := 0
	while ($a < $NUM_TILES)
		if (%Tile_has_Ac_Layers[$a] = $YES)
		    set_control_par_str (%Ac_src_Pic_id[$a],    $CONTROL_PAR_TEXT,"")
	        set_control_par_str (%Ac_src_Pic_id[$a],    $CONTROL_PAR_PICTURE, !Ac_Layer_Pictures[$a])
	        set_control_par_str (%Ac_Layer_Menu_id[$a], $CONTROL_PAR_PICTURE,"label-btn")
	        	set_control_par(%Ac_Layer_Menu_id[$a],$CONTROL_PAR_TEXTPOS_Y,35)
		end if
	    inc ($a)
	end while
    
    set_control_par_str (%Ac_Arrow_id[00],$CONTROL_PAR_PICTURE,"label-left-btn")
    set_control_par_str (%Ac_Arrow_id[00],$CONTROL_PAR_TEXT,"")
    set_control_par_str (%Ac_Arrow_id[01],$CONTROL_PAR_PICTURE,"label-right-btn")
    set_control_par_str (%Ac_Arrow_id[01],$CONTROL_PAR_TEXT,"")

	$a := 0
	while ($a < $NUM_TILES)
		if (%Tile_has_Ac_Layers[$a] = $YES)	
			set_control_par(%Ac_src_Pic_id[$a], $CONTROL_PAR_POS_X,  100)
			set_control_par(%Ac_src_Pic_id[$a], $CONTROL_PAR_POS_Y,  434 + $PANEL_Y)
			set_control_par(%Ac_src_Pic_id[$a], $CONTROL_PAR_WIDTH,  111)
			set_control_par(%Ac_src_Pic_id[$a], $CONTROL_PAR_HEIGHT,  77)
			set_control_par(%Ac_Layer_Menu_id[$a], $CONTROL_PAR_POS_X,  100)
			set_control_par(%Ac_Layer_Menu_id[$a], $CONTROL_PAR_POS_Y, 434 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$a], $CONTROL_PAR_WIDTH, 111)
			set_control_par(%Ac_Layer_Menu_id[$a], $CONTROL_PAR_HEIGHT, 77)
		end if
		inc ($a)
	end while

	{Next/Prev Arrows}
	set_control_par(%Ac_Arrow_id[00], $CONTROL_PAR_POS_X,  get_control_par(%Ac_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_X) - 16)
	set_control_par(%Ac_Arrow_id[00], $CONTROL_PAR_POS_Y,  get_control_par(%Ac_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_Y) -  2)
	set_control_par(%Ac_Arrow_id[00], $CONTROL_PAR_WIDTH,   17)
	set_control_par(%Ac_Arrow_id[00], $CONTROL_PAR_HEIGHT,  34)

	set_control_par(%Ac_Arrow_id[01], $CONTROL_PAR_POS_X,  get_control_par(%Ac_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_X) + 117)
	set_control_par(%Ac_Arrow_id[01], $CONTROL_PAR_POS_Y,  get_control_par(%Ac_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_Y) -   1)
	set_control_par(%Ac_Arrow_id[01], $CONTROL_PAR_WIDTH,   17)
	set_control_par(%Ac_Arrow_id[01], $CONTROL_PAR_HEIGHT,  34)

{Source ELECTRONIC LAYER Menus, PICs, Arrows}
	pgs_create_key(ELEC_ACTIVE_KICK, 1)
	pgs_create_key(ELEC_ACTIVE_SNARE, 1)
	pgs_create_key(ELEC_ACTIVE_HIHAT, 1)
	pgs_create_key(ELEC_ACTIVE_TOM1, 1)
	pgs_create_key(ELEC_ACTIVE_TOM2, 1)
	pgs_create_key(ELEC_ACTIVE_TOM3, 1)

	declare %El_Inst_Selection[$NUM_TILES]
	make_persistent(%El_Inst_Selection)
	read_persistent_var(%El_Inst_Selection)

	pgs_set_key_val(COMMAND, 0, -1)
	pgs_set_key_val(ELEC_ACTIVE_KICK,  0, %El_Inst_Selection[$TILE_KICK])
	pgs_set_key_val(ELEC_ACTIVE_SNARE, 0, %El_Inst_Selection[$TILE_SNARE])
	pgs_set_key_val(ELEC_ACTIVE_HIHAT, 0, %El_Inst_Selection[$TILE_HIHAT])
	pgs_set_key_val(ELEC_ACTIVE_TOM1,  0, %El_Inst_Selection[$TILE_TOM1])
	pgs_set_key_val(ELEC_ACTIVE_TOM2,  0, %El_Inst_Selection[$TILE_TOM2])
	pgs_set_key_val(ELEC_ACTIVE_TOM3,  0, %El_Inst_Selection[$TILE_TOM3])

	declare $El_sel_Kick
	declare $El_sel_Snare
	declare $El_sel_HiHat
	declare $El_sel_Tom1
	declare $El_sel_Tom2
	declare $El_sel_Tom3

	make_persistent($El_sel_Kick)
	read_persistent_var($El_sel_Kick)
	make_persistent($El_sel_Snare)
	read_persistent_var($El_sel_Snare)
	make_persistent($El_sel_HiHat)
	read_persistent_var($El_sel_HiHat)
	make_persistent($El_sel_Tom1)
	read_persistent_var($El_sel_Tom1)
	make_persistent($El_sel_Tom2)
	read_persistent_var($El_sel_Tom2)
	make_persistent($El_sel_Tom3)
	read_persistent_var($El_sel_Tom3)

	declare %Tile_has_El_Layers[$NUM_TILES]	:= ($NULL)
	%Tile_has_El_Layers[$TILE_KICK]			:= $YES
	%Tile_has_El_Layers[$TILE_SNARE]		:= $YES
	%Tile_has_El_Layers[$TILE_HIHAT]		:= $YES
	%Tile_has_El_Layers[$TILE_TOM1]			:= $YES
	%Tile_has_El_Layers[$TILE_TOM2]			:= $YES
	%Tile_has_El_Layers[$TILE_TOM3]			:= $YES

	declare !El_Layer_Pictures[$NUM_TILES]
	!El_Layer_Pictures[$TILE_KICK]	:= "label-kick2"
	!El_Layer_Pictures[$TILE_SNARE]	:= "label-snare2"
	!El_Layer_Pictures[$TILE_HIHAT]	:= "label-hihat2"
	!El_Layer_Pictures[$TILE_TOM1]	:= "label-tom2"
	!El_Layer_Pictures[$TILE_TOM2]	:= "label-tom2"
	!El_Layer_Pictures[$TILE_TOM3]	:= "label-tom2"

	declare ui_label $El_Kick_PIC(1,1)
	declare ui_label $El_Snare_PIC(1,1)
	declare ui_label $El_HiHat_PIC(1,1)
	declare ui_label $El_Tom1_PIC(1,1)
	declare ui_label $El_Tom2_PIC(1,1)
	declare ui_label $El_Tom3_PIC(1,1)

	declare ui_menu $El_Kick_mnu
	declare ui_menu $El_Snare_mnu
	declare ui_menu $El_HiHat_mnu
	declare ui_menu $El_Tom1_mnu
	declare ui_menu $El_Tom2_mnu
	declare ui_menu $El_Tom3_mnu

	declare ui_switch $El_Prev_btn
	declare ui_switch $El_Next_btn
	
	make_persistent ($El_Kick_mnu)
	make_persistent ($El_Snare_mnu)
	make_persistent ($El_HiHat_mnu)
	make_persistent ($El_Tom1_mnu)
	make_persistent ($El_Tom2_mnu)
	make_persistent ($El_Tom3_mnu)

	declare %El_src_Pic_id[$NUM_TILES] := ($NULL)
	%El_src_Pic_id[$TILE_KICK]	:= get_ui_id($El_Kick_PIC)
	%El_src_Pic_id[$TILE_SNARE]	:= get_ui_id($El_Snare_PIC)
	%El_src_Pic_id[$TILE_HIHAT]	:= get_ui_id($El_HiHat_PIC)
	%El_src_Pic_id[$TILE_TOM1]	:= get_ui_id($El_Tom1_PIC)
	%El_src_Pic_id[$TILE_TOM2]	:= get_ui_id($El_Tom2_PIC)
	%El_src_Pic_id[$TILE_TOM3]	:= get_ui_id($El_Tom3_PIC)

	declare %El_Layer_Menu_id[$NUM_TILES] := ($NULL)
	%El_Layer_Menu_id[$TILE_KICK]	:= get_ui_id($El_Kick_mnu)
	%El_Layer_Menu_id[$TILE_SNARE]	:= get_ui_id($El_Snare_mnu)
	%El_Layer_Menu_id[$TILE_HIHAT]	:= get_ui_id($El_HiHat_mnu)
	%El_Layer_Menu_id[$TILE_TOM1]	:= get_ui_id($El_Tom1_mnu)
	%El_Layer_Menu_id[$TILE_TOM2]	:= get_ui_id($El_Tom2_mnu)
	%El_Layer_Menu_id[$TILE_TOM3]	:= get_ui_id($El_Tom3_mnu)

	declare %El_Arrow_id[2]
	%El_Arrow_id[00] := get_ui_id($El_Prev_btn)
	%El_Arrow_id[01] := get_ui_id($El_Next_btn)
	
	$a := 0
	while ($a < $NUM_EL_LAYERS)
	    add_menu_item ($El_Kick_mnu,!El_Kick_Names[$a],$a)
	    add_menu_item ($El_Snare_mnu,!El_Snare_Names[$a],$a)
	    add_menu_item ($El_HiHat_mnu,!El_HiHat_Names[$a],$a)
	    add_menu_item ($El_Tom1_mnu,!El_Tom1_Names[$a],$a)
	    add_menu_item ($El_Tom2_mnu,!El_Tom2_Names[$a],$a)
	    add_menu_item ($El_TOm3_mnu,!El_Tom3_Names[$a],$a)
	    inc ($a)
	end while
	
	$a := 0
	while ($a < $NUM_TILES)
		if (%Tile_has_El_Layers[$a] = $YES)
		    set_control_par_str(%El_src_Pic_id[$a],    $CONTROL_PAR_TEXT,"")
		    set_control_par_str(%El_Layer_Menu_id[$a], $CONTROL_PAR_HELP, "Electronic Layer Menu: Select the available Electronic element for the loaded instrument.")
	        set_control_par_str(%El_src_Pic_id[$a],    $CONTROL_PAR_PICTURE, !El_Layer_Pictures[$a])
	        set_control_par_str(%El_Layer_Menu_id[$a], $CONTROL_PAR_PICTURE,"label-btn")
	        	set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_TEXTPOS_Y,35 + $PANEL_Y)
	        	set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_TEXTPOS_Y,35)
		end if
	    inc ($a)
	end while
    
    set_control_par_str(%El_Arrow_id[00], $CONTROL_PAR_PICTURE,"label-left-btn")
    set_control_par_str(%El_Arrow_id[00], $CONTROL_PAR_TEXT,"")
    set_control_par_str(%El_Arrow_id[01], $CONTROL_PAR_PICTURE,"label-right-btn")
    set_control_par_str(%El_Arrow_id[01], $CONTROL_PAR_TEXT,"")
    set_control_par_str(%El_Arrow_id[00], $CONTROL_PAR_HELP, "Previous Electronic Layer : Select the previous Electronic element for the loaded instrument.")
    set_control_par_str(%El_Arrow_id[01], $CONTROL_PAR_HELP, "Next Electronic Layer : Select the next Electronic element for the loaded instrument.")

	$a := 0
	while ($a < $NUM_TILES)
		if (%Tile_has_El_Layers[$a] = $YES)	
			set_control_par(%El_src_Pic_id[$a], $CONTROL_PAR_POS_X,  100)
			set_control_par(%El_src_Pic_id[$a], $CONTROL_PAR_POS_Y,  495 + $PANEL_Y)
			set_control_par(%El_src_Pic_id[$a], $CONTROL_PAR_WIDTH,  111)
			set_control_par(%El_src_Pic_id[$a], $CONTROL_PAR_HEIGHT,  77)
		end if
		inc ($a)
	end while
	$a := 0
	while ($a < $NUM_TILES)
		if (%Tile_has_El_Layers[$a] = $YES)	
			set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_POS_X,  100)
			set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_POS_Y,  495 + $PANEL_Y)
			set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_WIDTH,  111)
			set_control_par(%El_Layer_Menu_id[$a], $CONTROL_PAR_HEIGHT,  77)
		end if
		inc ($a)
	end while

	{Next/Prev Arrows}
	set_control_par(%El_Arrow_id[00], $CONTROL_PAR_POS_X,  get_control_par(%El_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_X) - 16)
	set_control_par(%El_Arrow_id[00], $CONTROL_PAR_POS_Y,  get_control_par(%El_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_Y) -  2)
	set_control_par(%El_Arrow_id[00], $CONTROL_PAR_WIDTH,   17)
	set_control_par(%El_Arrow_id[00], $CONTROL_PAR_HEIGHT,  34)

	set_control_par(%El_Arrow_id[01], $CONTROL_PAR_POS_X,  get_control_par(%El_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_X) + 117)
	set_control_par(%El_Arrow_id[01], $CONTROL_PAR_POS_Y,  get_control_par(%El_src_Pic_id[$TILE_KICK],$CONTROL_PAR_POS_Y) -   2)
	set_control_par(%El_Arrow_id[01], $CONTROL_PAR_WIDTH,   17)
	set_control_par(%El_Arrow_id[01], $CONTROL_PAR_HEIGHT,  34)

{Effects PANEL}
	
	

	declare %fx_knob_pos[13] := (0,0,1,1,2,2,3,3,4,4,5,5,6)
	declare !eq_knobs[6]
	!eq_knobs[0] := "panel-knob-small"
	!eq_knobs[1] := "panel-knob-big"
	!eq_knobs[2] := "panel-knob-small"
	!eq_knobs[3] := "panel-knob-big"
	!eq_knobs[4] := "panel-knob-small"
	!eq_knobs[5] := "panel-knob-big"

	declare %eq_knob_X[6] := (0,-5,0,-5,0,-5)
	declare %eq_knob_Y[6] := (0,-9,0,-9,0,-9)

{Master Effects PANEL}
	declare const $MAST_POS_X := 0
	declare const $MAST_POS_Y := -138

	declare %master_fx_data[14]
	$a := 0
	while($a < num_elements(%master_fx_data))
		%master_fx_data[$a] := 500000
		inc($a)
	end while
	make_persistent(%master_fx_data)
	read_persistent_var(%master_fx_data)

	declare ui_slider $mast_trans_attack_sld (0,1000000)
	declare ui_slider $mast_trans_sustain_sld (0,1000000)
	declare ui_slider $mast_comp_thres_sld (0,1000000)
	declare ui_slider $mast_comp_attack_sld (0,1000000)
	declare ui_slider $mast_comp_ratio_sld (0,1000000)
	declare ui_slider $mast_comp_makeup_sld (0,1000000)
	declare ui_slider $mast_sat_gain_sld (500000,1000000)
	declare ui_slider $mast_sat_level_sld (0,1000000)
	declare ui_slider $mast_eq_lf_freq_sld (0,1000000)
	declare ui_slider $mast_eq_lf_db_sld (0,1000000)
	declare ui_slider $mast_eq_hmf_freq_sld (0,1000000)
	declare ui_slider $mast_eq_hmf_db_sld (0,1000000)
	declare ui_slider $mast_eq_hf_freq_sld (0,1000000)
	declare ui_slider $mast_eq_hf_db_sld (0,1000000)

	declare %mast_effects_control_id[14]
	%mast_effects_control_id[00] := get_ui_id($mast_trans_attack_sld)
	%mast_effects_control_id[01] := get_ui_id($mast_trans_sustain_sld)

	%mast_effects_control_id[02] := get_ui_id($mast_comp_thres_sld)
	%mast_effects_control_id[03] := get_ui_id($mast_comp_attack_sld)
	%mast_effects_control_id[04] := get_ui_id($mast_comp_ratio_sld)
	%mast_effects_control_id[05] := get_ui_id($mast_comp_makeup_sld)
	
	%mast_effects_control_id[06] := get_ui_id($mast_sat_gain_sld)
	%mast_effects_control_id[07] := get_ui_id($mast_sat_level_sld)
	
	%mast_effects_control_id[08] := get_ui_id($mast_eq_lf_freq_sld)
	%mast_effects_control_id[09] := get_ui_id($mast_eq_lf_db_sld)
	%mast_effects_control_id[10] := get_ui_id($mast_eq_hmf_freq_sld)
	%mast_effects_control_id[11] := get_ui_id($mast_eq_hmf_db_sld)
	%mast_effects_control_id[12] := get_ui_id($mast_eq_hf_freq_sld)
	%mast_effects_control_id[13] := get_ui_id($mast_eq_hf_db_sld)

	declare %mast_fx_knob_pos[14] := (0,0,1,1,2,2,3,3,4,4,5,5,6,6)

	$a := 0
	while ($a < num_elements(%mast_effects_control_id) )
			set_control_par_str(%mast_effects_control_id[$a], $CONTROL_PAR_PICTURE, @panel_knob_big)
			set_control_par_str(%mast_effects_control_id[$a], $CONTROL_PAR_HELP, !mast_effects_help[$a])
			set_control_par_str(%mast_effects_control_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !mast_effects_auto_names[$a])
				set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_MOUSE_BEHAVIOUR, $TL_KNOB_SMALL)
			select ($a)
				case 0 to 1 {Transient Master}
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_VALUE, %master_fx_data[$a])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_X, $a * 50 + 21)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_Y, 462 + $PANEL_Y)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_ALLOW_AUTOMATION,0)
				case 2 to 5 {G-Compressor}
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_VALUE, %master_fx_data[$a])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_X, $a * 50 + 40)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_Y, 462 + $PANEL_Y)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_ALLOW_AUTOMATION,0)
				case 6 to 7 {Saturator}
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_VALUE, %master_fx_data[$a])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_X, $a * 50 + 59)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_Y, 462 + $PANEL_Y)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_ALLOW_AUTOMATION,0)
				case 8 to 13 {Equalizer}
					set_control_par_str(%mast_effects_control_id[$a], $CONTROL_PAR_PICTURE, !eq_knobs[$a - 8])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_VALUE, %master_fx_data[$a])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_DEFAULT_VALUE, 500000)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_X, %mast_fx_knob_pos[$a] * 50 + 283 + %eq_knob_X[$a-8])
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_POS_Y, 444 + (($a mod 2) * 54) + %eq_knob_Y[$a-8] + $PANEL_Y)
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_ALLOW_AUTOMATION,0)
			end select
		inc($a)
	end while

{MASTER On/OFF/Bypass Switches}
	declare ui_switch $mast_onoff_trans
	declare ui_switch $mast_onoff_comp
	declare ui_switch $mast_onoff_sat
	declare ui_switch $mast_onoff_eq

	declare %mast_fx_onoff_id[4]
	%mast_fx_onoff_id[0] := get_ui_id($mast_onoff_trans)
	%mast_fx_onoff_id[1] := get_ui_id($mast_onoff_comp)
	%mast_fx_onoff_id[2] := get_ui_id($mast_onoff_sat)
	%mast_fx_onoff_id[3] := get_ui_id($mast_onoff_eq)

	declare %master_onoff_data[4]
	make_persistent(%master_onoff_data)
	read_persistent_var(%master_onoff_data)

	declare %mast_on_off_X[4] := (0,7,20,5)

	$a := 0
	while($a < num_elements(%mast_fx_onoff_id))
		set_control_par_str(%mast_fx_onoff_id[$a],$CONTROL_PAR_PICTURE,"panel-btn")
		set_control_par_str(%mast_fx_onoff_id[$a], $CONTROL_PAR_AUTOMATION_NAME, !mast_effects_onoff_auto_names[$a])
		set_control_par_str(%mast_fx_onoff_id[$a],$CONTROL_PAR_TEXT,"")
			set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_VALUE,%master_onoff_data[$a])
			set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_HEIGHT,19)
			set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_WIDTH, 86)
			set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_POS_X, $a * 160 + 22 + %mast_on_off_X[$a])
			set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_POS_Y,420 + $PANEL_Y)
		inc($a)
	end while
	set_control_par_str(%mast_fx_onoff_id[0],$CONTROL_PAR_HELP,"Trans on/off: Toggles the Transient Master effect for the Master Output.")
	set_control_par_str(%mast_fx_onoff_id[1],$CONTROL_PAR_HELP,"Comp on/off: Toggles the Compressor Master effect for the Master Output.")
	set_control_par_str(%mast_fx_onoff_id[2],$CONTROL_PAR_HELP,"Sat on/off: Toggles the Saturator Master effect for the Master Output.")
	set_control_par_str(%mast_fx_onoff_id[3],$CONTROL_PAR_HELP,"EQ on/off: Toggles the EQ Master effect for the Master Output.")

{MASTER FX Knob Labels}
	declare ui_label $lbl_mast_trans_attack (1,1)
	declare ui_label $lbl_mast_trans_sustain (1,1)
	declare ui_label $lbl_mast_comp_thres (1,1)
	declare ui_label $lbl_mast_comp_attack (1,1)
	declare ui_label $lbl_mast_comp_ratio (1,1)
	declare ui_label $lbl_mast_comp_makeup (1,1)
	declare ui_label $lbl_mast_sat_gain (1,1)
	declare ui_label $lbl_mast_sat_level (1,1)
	declare ui_label $lbl_mast_eq_lf_freq (1,1)
	declare ui_label $lbl_mast_eq_lf_db (1,1)
	declare ui_label $lbl_mast_eq_hmf_freq (1,1)
	declare ui_label $lbl_mast_eq_hmf_db (1,1)
	declare ui_label $lbl_mast_eq_hf_freq (1,1)
	declare ui_label $lbl_mast_eq_hf_db (1,1)

	declare %lbl_mast_fx_id[14]
	%lbl_mast_fx_id[00] := get_ui_id($lbl_mast_trans_attack)
	%lbl_mast_fx_id[01] := get_ui_id($lbl_mast_trans_sustain)
	%lbl_mast_fx_id[02] := get_ui_id($lbl_mast_comp_thres)
	%lbl_mast_fx_id[03] := get_ui_id($lbl_mast_comp_attack)
	%lbl_mast_fx_id[04] := get_ui_id($lbl_mast_comp_ratio)
	%lbl_mast_fx_id[05] := get_ui_id($lbl_mast_comp_makeup)
	%lbl_mast_fx_id[06] := get_ui_id($lbl_mast_sat_gain)
	%lbl_mast_fx_id[07] := get_ui_id($lbl_mast_sat_level)
	%lbl_mast_fx_id[08] := get_ui_id($lbl_mast_eq_lf_freq)
	%lbl_mast_fx_id[09] := get_ui_id($lbl_mast_eq_lf_db)
	%lbl_mast_fx_id[10] := get_ui_id($lbl_mast_eq_hmf_freq)
	%lbl_mast_fx_id[11] := get_ui_id($lbl_mast_eq_hmf_db)
	%lbl_mast_fx_id[12] := get_ui_id($lbl_mast_eq_hf_freq)
	%lbl_mast_fx_id[13] := get_ui_id($lbl_mast_eq_hf_db)

	declare %lbl_fx_last_time[13]
	declare %lbl_mast_fx_last_time[14]
	declare %lbl_src_last_time[15]
	declare %lbl_bubble_last_time[$NUM_TILES]

	declare ui_label $stat_mast_lbl_trans_attack (1,1)
	declare ui_label $stat_mast_lbl_trans_sustain (1,1)
	declare ui_label $stat_mast_lbl_comp_thres (1,1)
	declare ui_label $stat_mast_lbl_comp_attack (1,1)
	declare ui_label $stat_mast_lbl_comp_ratio (1,1)
	declare ui_label $stat_mast_lbl_comp_makeup (1,1)
	declare ui_label $stat_mast_lbl_sat_gain (1,1)
	declare ui_label $stat_mast_lbl_sat_level (1,1)
	declare ui_label $stat_mast_lbl_eq_lf_freq (1,1)
	declare ui_label $stat_mast_lbl_eq_lf_db (1,1)
	declare ui_label $stat_mast_lbl_eq_hmf_freq (1,1)
	declare ui_label $stat_mast_lbl_eq_hmf_db (1,1)
	declare ui_label $stat_mast_lbl_eq_hf_freq (1,1)
	declare ui_label $stat_mast_lbl_eq_hf_db (1,1)

	declare %stat_mast_lbl_fx_id[14]
	%stat_mast_lbl_fx_id[00] := get_ui_id($stat_mast_lbl_trans_attack)
	%stat_mast_lbl_fx_id[01] := get_ui_id($stat_mast_lbl_trans_sustain)
	%stat_mast_lbl_fx_id[02] := get_ui_id($stat_mast_lbl_comp_thres)
	%stat_mast_lbl_fx_id[03] := get_ui_id($stat_mast_lbl_comp_attack)
	%stat_mast_lbl_fx_id[04] := get_ui_id($stat_mast_lbl_comp_ratio)
	%stat_mast_lbl_fx_id[05] := get_ui_id($stat_mast_lbl_comp_makeup)
	%stat_mast_lbl_fx_id[06] := get_ui_id($stat_mast_lbl_sat_gain)
	%stat_mast_lbl_fx_id[07] := get_ui_id($stat_mast_lbl_sat_level)
	%stat_mast_lbl_fx_id[08] := get_ui_id($stat_mast_lbl_eq_lf_freq)
	%stat_mast_lbl_fx_id[09] := get_ui_id($stat_mast_lbl_eq_lf_db)
	%stat_mast_lbl_fx_id[10] := get_ui_id($stat_mast_lbl_eq_hmf_freq)
	%stat_mast_lbl_fx_id[11] := get_ui_id($stat_mast_lbl_eq_hmf_db)
	%stat_mast_lbl_fx_id[12] := get_ui_id($stat_mast_lbl_eq_hf_freq)
	%stat_mast_lbl_fx_id[13] := get_ui_id($stat_mast_lbl_eq_hf_db)

	declare %lbl_mast_fx_txt_align[14] := (0,1,1,1,1,1,1,1,1,1,1,1,1,1)

	$a := 0
	while ($a < num_elements(%lbl_mast_fx_id) )
		set_control_par_str(%lbl_mast_fx_id[$a], $CONTROL_PAR_TEXT, "")
			set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_FONT_TYPE,$FONT_ID)
			set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_TEXT_ALIGNMENT,%lbl_mast_fx_txt_align[$a])
			set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
			set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_X, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_X) - 27)
			set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
			select ($a)
				case 8
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_X, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_X) - 32)
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_Y) + 24)
				case 10
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_X, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_X) - 32)
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_Y) + 24)
				case 12
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_X, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_X) - 32)
					set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_POS_Y) + 24)
			end select
		inc($a)
	end while
	set_control_par(%lbl_mast_fx_id[00], $CONTROL_PAR_POS_X, get_control_par(%mast_effects_control_id[00],$CONTROL_PAR_POS_X) - 5)

	$a := 0
	while ($a < num_elements(%stat_mast_lbl_fx_id))
		set_control_par_str(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_TEXT, "")
		set_control_par_str(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_PICTURE, "panel-mast-fx-lbl")
			set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_mast_fx_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
			set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_mast_fx_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
			set_control_par(%stat_mast_lbl_fx_id[$a],$CONTROL_PAR_PICTURE_STATE,$a)
		inc($a)
	end while
	set_control_par(%stat_mast_lbl_fx_id[00], $CONTROL_PAR_POS_X, get_control_par(%lbl_mast_fx_id[00],$CONTROL_PAR_POS_X) - 5)

{ARTICULATION MENU}
	{shared across Options, Kit & Voice Control scripts}
		
		declare !INSTRUMENT_NAMES[20]
		!INSTRUMENT_NAMES[$KICK_ID]  := "KICK"
		!INSTRUMENT_NAMES[$SNARE_ID] := "SNARE"
		!INSTRUMENT_NAMES[$HH_ID]    := "HIHAT"
		!INSTRUMENT_NAMES[$TOM1_ID]  := "TOM 1"
		!INSTRUMENT_NAMES[$TOM2_ID]  := "TOM 2"
		!INSTRUMENT_NAMES[$TOM3_ID]  := "TOM 3"
		!INSTRUMENT_NAMES[$TOM4_ID]  := ""
		!INSTRUMENT_NAMES[$TOM5_ID]  := ""
		!INSTRUMENT_NAMES[$CYMB1_ID] := "CRASH 1"
		!INSTRUMENT_NAMES[$CYMB2_ID] := "CRASH 2"
		!INSTRUMENT_NAMES[$CYMB3_ID] := "RIDE"
		!INSTRUMENT_NAMES[$CYMB4_ID] := ""
		!INSTRUMENT_NAMES[$CYMB5_ID] := ""
		!INSTRUMENT_NAMES[$CYMB6_ID] := ""
		!INSTRUMENT_NAMES[$CYMB7_ID] := ""
		!INSTRUMENT_NAMES[$PERC1_ID] := "PERC A"
		!INSTRUMENT_NAMES[$PERC2_ID] := "PERC B"
		!INSTRUMENT_NAMES[$PERC3_ID] := "PERC C"
		!INSTRUMENT_NAMES[$PERC4_ID] := "PERC D"
		!INSTRUMENT_NAMES[$PERC5_ID] := "PERC E"

	{constants that are to be set per kit}
	declare %KEY_USED[128] := (1)	{which notes are used for this kit: 0 -> note is NOT used
																		1 -> note IS used}	
	{Kick}																    
	%KEY_USED[2] := 0
	%KEY_USED[3] := 0
	{Snares}
	%KEY_USED[5] := 0
	%KEY_USED[6] := 0
	%KEY_USED[8] := 0
	%KEY_USED[9] := 0
	%KEY_USED[15] := 0
	%KEY_USED[16] := 0
	%KEY_USED[17] := 0
	%KEY_USED[18] := 0
	%KEY_USED[19] := 0
	{HiHat}
	%KEY_USED[21] := 0
	%KEY_USED[22] := 0
	%KEY_USED[23] := 0
	%KEY_USED[24] := 0
	%KEY_USED[25] := 0
	%KEY_USED[27] := 0
	%KEY_USED[28] := 0
	%KEY_USED[32] := 0
	%KEY_USED[34] := 0
	%KEY_USED[36] := 0
	%KEY_USED[37] := 0
	%KEY_USED[38] := 0
	%KEY_USED[39] := 0
	{Tom1}
	%KEY_USED[41] := 0
	%KEY_USED[42] := 0
	%KEY_USED[43] := 0
	%KEY_USED[44] := 0
	%KEY_USED[45] := 0
	%KEY_USED[46] := 0
	{Tom2}
	%KEY_USED[48] := 0
	%KEY_USED[49] := 0
	%KEY_USED[50] := 0
	%KEY_USED[51] := 0
	%KEY_USED[52] := 0
	%KEY_USED[53] := 0
	{Tom3}
	%KEY_USED[55] := 0
	%KEY_USED[56] := 0
	%KEY_USED[57] := 0
	%KEY_USED[58] := 0
	%KEY_USED[59] := 0
	%KEY_USED[60] := 0
	{Tom 4-5}
	%KEY_USED[61] := 0
	%KEY_USED[62] := 0
	%KEY_USED[63] := 0
	%KEY_USED[64] := 0
	%KEY_USED[65] := 0
	%KEY_USED[66] := 0
	%KEY_USED[67] := 0
	%KEY_USED[68] := 0
	%KEY_USED[69] := 0
	%KEY_USED[70] := 0
	%KEY_USED[71] := 0
	%KEY_USED[72] := 0
	%KEY_USED[73] := 0
	%KEY_USED[74] := 0
	{Cymbal 1}
	%KEY_USED[77] := 0
	%KEY_USED[78] := 0
	%KEY_USED[79] := 0
	{Cymbal 2}
	%KEY_USED[82] := 0
	%KEY_USED[83] := 0
	%KEY_USED[84] := 0
	{Cymbal 3}
	%KEY_USED[87] := 0
	%KEY_USED[88] := 0
	%KEY_USED[89] := 0
	%KEY_USED[90] := 0
	{Cymbal 4-7}
	%KEY_USED[91] := 0
	%KEY_USED[92] := 0
	%KEY_USED[93] := 0
	%KEY_USED[94] := 0
	%KEY_USED[95] := 0
	%KEY_USED[96] := 0
	%KEY_USED[97] := 0
	%KEY_USED[98] := 0
	%KEY_USED[99] := 0
	%KEY_USED[100] := 0
	%KEY_USED[101] := 0
	%KEY_USED[102] := 0
	%KEY_USED[103] := 0
	%KEY_USED[104] := 0
	%KEY_USED[105] := 0
	%KEY_USED[106] := 0
	{PERC}
	%KEY_USED[109] := 0
	%KEY_USED[110] := 0
	%KEY_USED[113] := 0
	%KEY_USED[114] := 0
	%KEY_USED[117] := 0
	%KEY_USED[119] := 0
	%KEY_USED[120] := 0

	%KEY_USED[123] := 0
	%KEY_USED[124] := 0
	%KEY_USED[125] := 0
	%KEY_USED[126] := 0
	%KEY_USED[127] := 0

	declare %NUM_DIR_MICS[$NUM_INSTRUMENTS]
	%NUM_DIR_MICS[$KICK_ID]  :=  3				{3}
	%NUM_DIR_MICS[$SNARE_ID] :=  2				{2}
	%NUM_DIR_MICS[$HH_ID]    :=  1				{1}
	%NUM_DIR_MICS[$TOM1_ID]  :=  1				{1}
	%NUM_DIR_MICS[$TOM2_ID]  :=  1				{1}
	%NUM_DIR_MICS[$TOM3_ID]  :=  1				{1}
	%NUM_DIR_MICS[$TOM4_ID]  := -1				{1}
	%NUM_DIR_MICS[$TOM5_ID]  := -1				{1}
	%NUM_DIR_MICS[$CYMB1_ID] :=  1				{0}
	%NUM_DIR_MICS[$CYMB2_ID] :=  1				{0}
	%NUM_DIR_MICS[$CYMB3_ID] :=  1				{0}
	%NUM_DIR_MICS[$CYMB4_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB5_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB6_ID] := -1				{0}
	%NUM_DIR_MICS[$CYMB7_ID] := -1				{0}
	%NUM_DIR_MICS[$PERC1_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC2_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC3_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC4_ID] :=  1				{1}
	%NUM_DIR_MICS[$PERC5_ID] :=  1				{1}

	declare const $NUM_FACTORY_PRESETS := 10
	declare const $MAX_NUM_USER_PRESETS := 100

	declare %FACTORY_MAPPING[$NUM_FACTORY_PRESETS * 128] := (-1)
	declare %DL_user_mapping_data[$MAX_NUM_USER_PRESETS * 128 + 1] := (-1)
	declare !DL_user_mapping_names[$MAX_NUM_USER_PRESETS]
	declare %DL_num_user_presets[1] := (0)
	declare %current_mapping_data[128] := (-1)
	declare %inverse_mapping_data[128] := (-1)

	{Default Mapping}
		$count_1 := 0					    {Note# -> # Technical Mapping}
		%FACTORY_MAPPING[$count_1 * 128 + 22] := 78		{CHOKE 1-5}
		%FACTORY_MAPPING[$count_1 * 128 + 23] := 88
		%FACTORY_MAPPING[$count_1 * 128 + 24] := 83
		%FACTORY_MAPPING[$count_1 * 128 + 25] := 78
		
		%FACTORY_MAPPING[$count_1 * 128 + 36] := 1 		{kick}
		%FACTORY_MAPPING[$count_1 * 128 + 37] := 11 	{snare sidestick}
		%FACTORY_MAPPING[$count_1 * 128 + 38] := 4 		{snare center}
		%FACTORY_MAPPING[$count_1 * 128 + 39] := 10 	{snare rimshot}
		%FACTORY_MAPPING[$count_1 * 128 + 40] := 7 		{snare halway}
		%FACTORY_MAPPING[$count_1 * 128 + 41] := 54 	{TOM 3}
		%FACTORY_MAPPING[$count_1 * 128 + 42] := 23 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 43] := 54 	{TOM 3}
		%FACTORY_MAPPING[$count_1 * 128 + 44] := 29 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 45] := 47 	{TOM 2}
		%FACTORY_MAPPING[$count_1 * 128 + 46] := 31 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 47] := 40 	{TOM 1}
		%FACTORY_MAPPING[$count_1 * 128 + 48] := 76 	{Crash 1 - High EDGE}
		%FACTORY_MAPPING[$count_1 * 128 + 49] := 75 	{Crash 1 - High TIP}
		%FACTORY_MAPPING[$count_1 * 128 + 50] := 81 	{Crash 2 - Low EDGE}
		%FACTORY_MAPPING[$count_1 * 128 + 51] := 80 	{Crash 2 - Low TIP}
		%FACTORY_MAPPING[$count_1 * 128 + 52] := 85 	{Crash 3 RIDE BELL}
		%FACTORY_MAPPING[$count_1 * 128 + 53] := 86 	{Crash 3 RIDE TIP}
		%FACTORY_MAPPING[$count_1 * 128 + 54] := 23 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 55] := 54 	{TOM 1}
		%FACTORY_MAPPING[$count_1 * 128 + 56] := 26 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 57] := 47 	{TOM 2}
		%FACTORY_MAPPING[$count_1 * 128 + 58] := 30 	{hihat}
		%FACTORY_MAPPING[$count_1 * 128 + 59] := 40 	{TOM 3}
		%FACTORY_MAPPING[$count_1 * 128 + 60] := 0 		{kick}
		%FACTORY_MAPPING[$count_1 * 128 + 61] := 1 		{kick}
		%FACTORY_MAPPING[$count_1 * 128 + 62] := 12 	{snare Kang}
		%FACTORY_MAPPING[$count_1 * 128 + 63] := 13 	{snare SHOT}
		%FACTORY_MAPPING[$count_1 * 128 + 64] := 14 	{Snare MUTED}
		%FACTORY_MAPPING[$count_1 * 128 + 65] := 107 	{* Perc A}
		%FACTORY_MAPPING[$count_1 * 128 + 66] := 108 	{* Perc A}
		%FACTORY_MAPPING[$count_1 * 128 + 67] := 111 	{* Perc B}
		%FACTORY_MAPPING[$count_1 * 128 + 68] := 112 	{* Perc B}
		%FACTORY_MAPPING[$count_1 * 128 + 69] := 115 	{* Perc C}
		%FACTORY_MAPPING[$count_1 * 128 + 70] := 116 	{* Perc C}
		%FACTORY_MAPPING[$count_1 * 128 + 71] := 118 	{* Perc D}
		%FACTORY_MAPPING[$count_1 * 128 + 72] := 121 	{* Perc E}
		%FACTORY_MAPPING[$count_1 * 128 + 73] := 122 	{* Perc E}

	declare !ARTICULATION_NAMES[126]
		{Kick}
			!ARTICULATION_NAMES[0] := "DAMPENED"
			!ARTICULATION_NAMES[1] := "HALF OPEN"
			!ARTICULATION_NAMES[2] := ""
			!ARTICULATION_NAMES[3] := ""			
		
		{Snare}
			!ARTICULATION_NAMES[4] := "CENTER L/R"
			!ARTICULATION_NAMES[5] := "CENTER L"
			!ARTICULATION_NAMES[6] := "CENTER R"
			!ARTICULATION_NAMES[7] := "HALFWAY L/R"
			!ARTICULATION_NAMES[8] := "HALFWAY L"
			!ARTICULATION_NAMES[9] := "HALFWAY R"
			!ARTICULATION_NAMES[10] := "RIMSHOT"
			!ARTICULATION_NAMES[11] := "SIDESTICK"
			!ARTICULATION_NAMES[12] := "KANG"
			!ARTICULATION_NAMES[13] := "SHOT"
			!ARTICULATION_NAMES[14] := "MUTED"
			!ARTICULATION_NAMES[15] := ""
			!ARTICULATION_NAMES[16] := ""
			!ARTICULATION_NAMES[17] := ""
			!ARTICULATION_NAMES[18] := ""
			!ARTICULATION_NAMES[19] := ""
		
		{Hihat}
			!ARTICULATION_NAMES[20] := "CLOSED TIGHT TIP L/R"
			!ARTICULATION_NAMES[21] := ""
			!ARTICULATION_NAMES[22] := ""
			!ARTICULATION_NAMES[23] := ""
			!ARTICULATION_NAMES[24] := ""
			!ARTICULATION_NAMES[25] := ""
			!ARTICULATION_NAMES[26] := "CLOSED SHANK L/R"
			!ARTICULATION_NAMES[27] := ""
			!ARTICULATION_NAMES[28] := ""
			!ARTICULATION_NAMES[29] := "CLOSED PEDAL"
			!ARTICULATION_NAMES[30] := "OPEN PEDAL"
			!ARTICULATION_NAMES[31] := "OPEN CONTROL"
			!ARTICULATION_NAMES[32] := ""
			!ARTICULATION_NAMES[33] := "OPEN HALF"
			!ARTICULATION_NAMES[34] := ""
			!ARTICULATION_NAMES[35] := "OPEN FULL"
			!ARTICULATION_NAMES[36] := ""
			!ARTICULATION_NAMES[37] := ""
			!ARTICULATION_NAMES[38] := ""
			!ARTICULATION_NAMES[39] := ""

		{Tom 1}
			!ARTICULATION_NAMES[40] := "CENTER L/R"
			!ARTICULATION_NAMES[41] := ""
			!ARTICULATION_NAMES[42] := ""
			!ARTICULATION_NAMES[43] := ""
			!ARTICULATION_NAMES[44] := ""
			!ARTICULATION_NAMES[45] := ""			
			!ARTICULATION_NAMES[46] := ""			
			
		{Tom 2}
			!ARTICULATION_NAMES[47] := "CENTER L/R"
			!ARTICULATION_NAMES[48] := ""
			!ARTICULATION_NAMES[49] := ""
			!ARTICULATION_NAMES[50] := ""
			!ARTICULATION_NAMES[51] := ""
			!ARTICULATION_NAMES[52] := ""	
			!ARTICULATION_NAMES[53] := ""	
			
		{Tom 3}
			!ARTICULATION_NAMES[54] := "CENTER L/R"
			!ARTICULATION_NAMES[55] := ""
			!ARTICULATION_NAMES[56] := ""
			!ARTICULATION_NAMES[57] := ""
			!ARTICULATION_NAMES[58] := ""
			!ARTICULATION_NAMES[59] := ""			
			!ARTICULATION_NAMES[60] := ""			
			
		{Tom 4}
			!ARTICULATION_NAMES[61] := "CENTER L/R"
			!ARTICULATION_NAMES[62] := "CENTER L"
			!ARTICULATION_NAMES[63] := "CENTER R"
			!ARTICULATION_NAMES[64] := "RIMSHOT"
			!ARTICULATION_NAMES[65] := "RIM ONLY"
			!ARTICULATION_NAMES[66] := "BRUSH TAP"			
			!ARTICULATION_NAMES[67] := "BRUSH DIG"			

		{Tom 5}
			!ARTICULATION_NAMES[68] := "CENTER L/R"
			!ARTICULATION_NAMES[69] := "CENTER L"
			!ARTICULATION_NAMES[70] := "CENTER R"
			!ARTICULATION_NAMES[71] := "RIMSHOT"
			!ARTICULATION_NAMES[72] := "RIM ONLY"
			!ARTICULATION_NAMES[73] := "BRUSH TAP"  	
			!ARTICULATION_NAMES[74] := "BRUSH DIG"  	
			
		{Cymbal 1}
			!ARTICULATION_NAMES[75] := "TIP"
			!ARTICULATION_NAMES[76] := "EDGE"
			!ARTICULATION_NAMES[77] := "BELL"
			!ARTICULATION_NAMES[78] := "CHOKE"
			!ARTICULATION_NAMES[79] := "BRUSH"
			
		{Cymbal 2}
			!ARTICULATION_NAMES[80] := "TIP"
			!ARTICULATION_NAMES[81] := "EDGE"
			!ARTICULATION_NAMES[82] := ""
			!ARTICULATION_NAMES[83] := ""
			!ARTICULATION_NAMES[84] := ""
			
		{Cymbal 3}
			!ARTICULATION_NAMES[85] := "BELL"
			!ARTICULATION_NAMES[86] := "TIP"
			!ARTICULATION_NAMES[87] := ""
			!ARTICULATION_NAMES[88] := ""
			!ARTICULATION_NAMES[89] := ""
			!ARTICULATION_NAMES[90] := ""
			
		{Cymbal 4}
			!ARTICULATION_NAMES[91] := "EDGE"
			!ARTICULATION_NAMES[92] := "TIP"
			!ARTICULATION_NAMES[93] := "BELL"
			!ARTICULATION_NAMES[94] := "CHOKE"
			
		{Cymbal 5}
			!ARTICULATION_NAMES[95] := "EDGE"
			!ARTICULATION_NAMES[96] := "TIP"
			!ARTICULATION_NAMES[97] := "BELL"
			!ARTICULATION_NAMES[98] := "CHOKE"
			
		{Cymbal 6}
			!ARTICULATION_NAMES[99] := "EDGE"
			!ARTICULATION_NAMES[100] := "TIP"
			!ARTICULATION_NAMES[101] := "BELL"
			!ARTICULATION_NAMES[102] := "CHOKE"
			
		{Cymbal 7}
			!ARTICULATION_NAMES[103] := "EDGE"
			!ARTICULATION_NAMES[104] := "TIP"
			!ARTICULATION_NAMES[105] := "BELL"
			!ARTICULATION_NAMES[106] := "CHOKE"
			
		{Perc A - }
			!ARTICULATION_NAMES[107] := "HIT 1"
			!ARTICULATION_NAMES[108] := "HIT 2"
			!ARTICULATION_NAMES[109] := ""
			!ARTICULATION_NAMES[110] := ""
		
		{Perc B - }
			!ARTICULATION_NAMES[111] := "HIT 1"
			!ARTICULATION_NAMES[112] := "HIT 2"
			!ARTICULATION_NAMES[113] := ""
			!ARTICULATION_NAMES[114] := ""
			
		{Perc C - }
			!ARTICULATION_NAMES[115] := "HIT 1"	
			!ARTICULATION_NAMES[116] := "HIT 2"
			!ARTICULATION_NAMES[117] := ""

		{Perc D - }	
			!ARTICULATION_NAMES[118] := "HIT 1"
			!ARTICULATION_NAMES[119] := ""
			!ARTICULATION_NAMES[120] := ""
		{Perc 5 - Chopper}
			!ARTICULATION_NAMES[121] := "HIT 1"
			!ARTICULATION_NAMES[122] := "HIT 2"

	declare ui_menu $current_mapping_preset_mnu
	declare ui_menu $instruments_mnu
	declare ui_menu $articulations_mnu
	declare $active_key_sld

	declare %mapping_id[14]
	%mapping_id[0] := get_ui_id($current_mapping_preset_mnu)
	%mapping_id[1] := get_ui_id($instruments_mnu)
	%mapping_id[2] := get_ui_id($articulations_mnu)

	{Help Text}
	set_control_par_str(%mapping_id[0],$CONTROL_PAR_HELP,"Mapping Preset: Use this control to select one of the Mapping Presets. You can also click on the name of the preset to type in a new one.")
	set_control_par_str(%mapping_id[1],$CONTROL_PAR_HELP,"Instrument: Here you can see or edit the Instrument assigned to the Note displayed in the Note field on the left.")
	set_control_par_str(%mapping_id[2],$CONTROL_PAR_HELP,"Articulation: Here you can see or edit the Articulation assigned to the Note displayed in the Note field on the left.")

	{Font IDs}
	set_control_par(%mapping_id[0], $CONTROL_PAR_FONT_TYPE, $FONT_2_ID)
	set_control_par(%mapping_id[1], $CONTROL_PAR_FONT_TYPE, $FONT_2_ID)
	set_control_par(%mapping_id[2], $CONTROL_PAR_FONT_TYPE, $FONT_2_ID)
	{/Font IDs}

	{Text Position & Alignment}
	set_control_par(%mapping_id[0], $CONTROL_PAR_TEXTPOS_Y, 4)
	set_control_par(%mapping_id[1], $CONTROL_PAR_TEXTPOS_Y, 2)
	set_control_par(%mapping_id[1], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
	set_control_par(%mapping_id[2], $CONTROL_PAR_TEXTPOS_Y, 7)
	set_control_par(%mapping_id[2], $CONTROL_PAR_TEXT_ALIGNMENT, 0)
	{/Text Position & Alignment}

	{Position}
	set_control_par(%mapping_id[0],$CONTROL_PAR_POS_X,228)
	set_control_par(%mapping_id[0],$CONTROL_PAR_POS_Y,80)
	
	set_control_par(%mapping_id[1],$CONTROL_PAR_POS_X,20)
	set_control_par(%mapping_id[1],$CONTROL_PAR_POS_Y,82)
	
	set_control_par(%mapping_id[2],$CONTROL_PAR_POS_X,13)
	set_control_par(%mapping_id[2],$CONTROL_PAR_POS_Y,150)

	{Size}		
	set_control_par(%mapping_id[0],$CONTROL_PAR_WIDTH,150)

	set_control_par(%mapping_id[1],$CONTROL_PAR_WIDTH,160)
	set_control_par(%mapping_id[1],$CONTROL_PAR_HEIGHT,18)
	
	set_control_par(%mapping_id[2],$CONTROL_PAR_WIDTH,190)
	set_control_par(%mapping_id[2],$CONTROL_PAR_HEIGHT,29)

	{Pictures}
	set_control_par_str(%mapping_id[0],$CONTROL_PAR_PICTURE,"NID_options_dropdown_preset")
	set_control_par_str(%mapping_id[1],$CONTROL_PAR_PICTURE,"v1_2_NID_options_dropdown_instrument_kick")
	set_control_par_str(%mapping_id[2],$CONTROL_PAR_PICTURE,"settings-menu")

	{Persistency}
	make_persistent($current_mapping_preset_mnu)

	{Menu Initializations}
	{$current_mapping_preset_mnu}
	add_menu_item($current_mapping_preset_mnu, "Default", 0)

	{Initial Mapping}
	$active_key_sld := 36
	
	make_persistent(%current_mapping_data)
	read_persistent_var(%current_mapping_data)
	
	$count_1 := 0
	while ($count_1 < 128)
		if (%current_mapping_data[$count_1] > -1)
			%inverse_mapping_data[%current_mapping_data[$count_1]] := $count_1
		end if
		inc($count_1)
	end while

	pgs_create_key(MAPPING, 128)
	
	pgs_set_key_val(COMMAND, 0, -1)
	$count_1 := 0
	while ($count_1 < 128)
		pgs_set_key_val(MAPPING, $count_1, %inverse_mapping_data[$count_1])
		inc($count_1)
	end while
	pgs_set_key_val(COMMAND, 0, 6)
	{/Initial Mapping}

	{$instruments_mnu}				
	$count_1 := 0
	while ($count_1 < 20)
		if (%NUM_DIR_MICS[$count_1] > -1)
			add_menu_item($instruments_mnu, !INSTRUMENT_NAMES[$count_1]  & " ", $count_1)
		end if
		inc($count_1)
	end while

	if (%current_mapping_data[$active_key_sld] > -1 and %KEY_USED[%current_mapping_data[$active_key_sld]] = 1)
		$instruments_mnu := %note_instruments[%current_mapping_data[$active_key_sld]]
	else
		$instruments_mnu := -1
	end if
	{/$instruments_mnu}
	
	{$articulations_mnu}
	$count_1 := 0
	while ($count_1 < 20)
		add_menu_item($articulations_mnu, $count_1, $count_1)
		inc($count_1)
	end while

	make_persistent($instruments_mnu)
	read_persistent_var($instruments_mnu)
	
	$count_1 := 0
	if ($instruments_mnu = -1)
		set_menu_item_str(%mapping_id[2], $count_1, "(None)" & @ART_MENU_ALIGNMENT_HELPER)
		set_menu_item_value(%mapping_id[2], $count_1, -1)
		set_menu_item_visibility(%mapping_id[2], $count_1, 1)
		$articulations_mnu := -1
		inc($count_1)
	else
		$count_2 := %AC_INSTRUMENT_OFFSET[$instruments_mnu]
		while ($count_2 < %AC_INSTRUMENT_OFFSET[$instruments_mnu + 1])
			if (%KEY_USED[$count_2] > 0)
				set_menu_item_str(%mapping_id[2], $count_1, !ARTICULATION_NAMES[$count_2] & @ART_MENU_ALIGNMENT_HELPER)
				set_menu_item_value(%mapping_id[2], $count_1, $count_2)
				set_menu_item_visibility(%mapping_id[2], $count_1, 1)
				inc($count_1)
			end if
			inc($count_2)
		end while
		$articulations_mnu := %AC_INSTRUMENT_OFFSET[$instruments_mnu]
	end if


	while ($count_1 < 20)
		set_menu_item_visibility(%mapping_id[2], $count_1, 0)
		inc($count_1)
	end while

	if ($articulations_mnu = -1)
		$count_1 := 0
		while ($count_1 < 128)
			if (%current_mapping_data[$count_1] = %current_mapping_data[$active_key_sld])
				%inverse_mapping_data[%current_mapping_data[$active_key_sld]] := $count_1
				$count_1 := 128
			end if
			inc($count_1)
		end while
	else
		%inverse_mapping_data[$articulations_mnu] := $active_key_sld
	end if
	%current_mapping_data[$active_key_sld] := $articulations_mnu
	
	make_persistent($articulations_mnu)
	read_persistent_var($articulations_mnu)

	pgs_set_key_val(COMMAND, 0, -1)
	pgs_set_key_val(MAPPING, $articulations_mnu, $active_key_sld)
	pgs_set_key_val(COMMAND, 0, 6)

	$cur_tile		 := %Inst_to_Tile_remap[$instruments_mnu]
	$cur_instrument	 := $instruments_mnu
	$last_instrument := $cur_instrument
	$last_tile		 := $cur_tile
	{/$articulations_mnu}

	declare %SOUND_DESIGN_CONTROLS[2] 
	%SOUND_DESIGN_CONTROLS[0] := get_ui_id($current_mapping_preset_mnu)
	%SOUND_DESIGN_CONTROLS[1] := get_ui_id($instruments_mnu)

	if ($SD_CONTROLS_VISIBLE = $YES)
		set_control_par(%SOUND_DESIGN_CONTROLS[0],$CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		set_control_par(%SOUND_DESIGN_CONTROLS[1],$CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
	else
		set_control_par(%SOUND_DESIGN_CONTROLS[0],$CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
		set_control_par(%SOUND_DESIGN_CONTROLS[1],$CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	end if
	{set_control_par(get_ui_id($current_mapping_preset_mnu), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)}
	{/Menu Initializations}

{AUTOMATION IDs}
	declare const $SET_AUTOMATION := 0	{Set to 1 to create Automation IDs, load/update script, save NKI and then set to 0}
	declare %hihat_auto_id_remap[15] := (0,1,2,2,3,3,4,5,6,7,8,9,10,11)
	declare  %perc_auto_id_remap[15] := (0,0,1,1,4,3,4,5,5,5,5,5, 5, 2)
	declare  %cymb_auto_id_remap[15] := (0,0,0,1,1,2,3,4,4,4,4,4, 4, 4)
	if($SET_AUTOMATION = 1)
		select ($cur_tile)
			case $TILE_KICK
				$a := 0
				while ($a < num_elements(%source_control_id) - 1)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, $a)
					inc($a)
				end while
				set_control_par(%mast_fx_onoff_id[0],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) -  1)
				set_control_par(%mast_effects_control_id[00], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  0)
				set_control_par(%mast_effects_control_id[01], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  1)
				set_control_par(%mast_fx_onoff_id[1],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  2)
				set_control_par(%mast_effects_control_id[02], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  3)
				set_control_par(%mast_effects_control_id[03], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  4)
				set_control_par(%mast_effects_control_id[04], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  5)
				set_control_par(%mast_effects_control_id[05], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  6)
				set_control_par(%mast_fx_onoff_id[2],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  7)
				set_control_par(%mast_effects_control_id[06], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  8)
				set_control_par(%mast_effects_control_id[07], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  9)
				set_control_par(%mast_fx_onoff_id[3],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 10)
				set_control_par(%mast_effects_control_id[08], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 11)
				set_control_par(%mast_effects_control_id[09], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 12)
				set_control_par(%mast_effects_control_id[10], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 13)
				set_control_par(%mast_effects_control_id[11], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 14)
				set_control_par(%mast_effects_control_id[12], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 15)
				set_control_par(%mast_effects_control_id[13], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 16)
			case $TILE_SNARE
				$a := 0
				while ($a < num_elements(%source_control_id) - 1)
					set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, $a)
					inc($a)
				end while
				set_control_par(%mast_fx_onoff_id[0],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) -  1)
				set_control_par(%mast_effects_control_id[00], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  0)
				set_control_par(%mast_effects_control_id[01], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  1)
				set_control_par(%mast_fx_onoff_id[1],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  2)
				set_control_par(%mast_effects_control_id[02], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  3)
				set_control_par(%mast_effects_control_id[03], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  4)
				set_control_par(%mast_effects_control_id[04], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  5)
				set_control_par(%mast_effects_control_id[05], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  6)
				set_control_par(%mast_fx_onoff_id[2],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  7)
				set_control_par(%mast_effects_control_id[06], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  8)
				set_control_par(%mast_effects_control_id[07], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  9)
				set_control_par(%mast_fx_onoff_id[3],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 10)
				set_control_par(%mast_effects_control_id[08], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 11)
				set_control_par(%mast_effects_control_id[09], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 12)
				set_control_par(%mast_effects_control_id[10], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 13)
				set_control_par(%mast_effects_control_id[11], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 14)
				set_control_par(%mast_effects_control_id[12], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 15)
				set_control_par(%mast_effects_control_id[13], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 16)
			case $TILE_HIHAT
				$a := 0
				while ($a < num_elements(%source_control_id) - 1)
					if ($a = 0 or $a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 8 or $a = 9 or $a = 10 or ...
						$a = 11 or $a = 12 or $a = 13)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %hihat_auto_id_remap[$a])
					end if
					inc($a)
				end while
				set_control_par(%mast_fx_onoff_id[0],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) -  1 - 2)
				set_control_par(%mast_effects_control_id[00], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  0 - 2)
				set_control_par(%mast_effects_control_id[01], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  1 - 2)
				set_control_par(%mast_fx_onoff_id[1],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  2 - 2)
				set_control_par(%mast_effects_control_id[02], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  3 - 2)
				set_control_par(%mast_effects_control_id[03], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  4 - 2)
				set_control_par(%mast_effects_control_id[04], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  5 - 2)
				set_control_par(%mast_effects_control_id[05], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  6 - 2)
				set_control_par(%mast_fx_onoff_id[2],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  7 - 2)
				set_control_par(%mast_effects_control_id[06], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  8 - 2)
				set_control_par(%mast_effects_control_id[07], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  9 - 2)
				set_control_par(%mast_fx_onoff_id[3],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 10 - 2)
				set_control_par(%mast_effects_control_id[08], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 11 - 2)
				set_control_par(%mast_effects_control_id[09], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 12 - 2)
				set_control_par(%mast_effects_control_id[10], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 13 - 2)
				set_control_par(%mast_effects_control_id[11], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 14 - 2)
				set_control_par(%mast_effects_control_id[12], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 15 - 2)
				set_control_par(%mast_effects_control_id[13], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 16 - 2)
			case $TILE_TOM1 to $TILE_TOM3
				$a := 0
				while ($a < num_elements(%source_control_id) - 1)
					if ($a = 0 or $a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 8 or $a = 9 or $a = 10 or ...
						$a = 11 or $a = 12 or $a = 13)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %hihat_auto_id_remap[$a])
					end if
					inc($a)
				end while
				set_control_par(%mast_fx_onoff_id[0],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) -  1 - 2)
				set_control_par(%mast_effects_control_id[00], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  0 - 2)
				set_control_par(%mast_effects_control_id[01], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  1 - 2)
				set_control_par(%mast_fx_onoff_id[1],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  2 - 2)
				set_control_par(%mast_effects_control_id[02], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  3 - 2)
				set_control_par(%mast_effects_control_id[03], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  4 - 2)
				set_control_par(%mast_effects_control_id[04], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  5 - 2)
				set_control_par(%mast_effects_control_id[05], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  6 - 2)
				set_control_par(%mast_fx_onoff_id[2],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  7 - 2)
				set_control_par(%mast_effects_control_id[06], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  8 - 2)
				set_control_par(%mast_effects_control_id[07], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) +  9 - 2)
				set_control_par(%mast_fx_onoff_id[3],    	  $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 10 - 2)
				set_control_par(%mast_effects_control_id[08], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 11 - 2)
				set_control_par(%mast_effects_control_id[09], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 12 - 2)
				set_control_par(%mast_effects_control_id[10], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 13 - 2)
				set_control_par(%mast_effects_control_id[11], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 14 - 2)
				set_control_par(%mast_effects_control_id[12], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 15 - 2)
				set_control_par(%mast_effects_control_id[13], $CONTROL_PAR_AUTOMATION_ID, num_elements(%source_control_id) + 16 - 2)
			case $TILE_PERC1
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 14)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %perc_auto_id_remap[$a])
					end if
					inc($a)
				end while
			case $TILE_PERC2 to $TILE_PERC3
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 14)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %perc_auto_id_remap[$a])
					end if
					inc($a)
				end while
				set_control_par(%mast_fx_onoff_id[0],    	  $CONTROL_PAR_AUTOMATION_ID, 06)
				set_control_par(%mast_effects_control_id[00], $CONTROL_PAR_AUTOMATION_ID, 07)
				set_control_par(%mast_effects_control_id[01], $CONTROL_PAR_AUTOMATION_ID, 08)
				set_control_par(%mast_fx_onoff_id[1],    	  $CONTROL_PAR_AUTOMATION_ID, 09)
				set_control_par(%mast_effects_control_id[02], $CONTROL_PAR_AUTOMATION_ID, 10)
				set_control_par(%mast_effects_control_id[03], $CONTROL_PAR_AUTOMATION_ID, 11)
				set_control_par(%mast_effects_control_id[04], $CONTROL_PAR_AUTOMATION_ID, 12)
				set_control_par(%mast_effects_control_id[05], $CONTROL_PAR_AUTOMATION_ID, 13)
				set_control_par(%mast_fx_onoff_id[2],    	  $CONTROL_PAR_AUTOMATION_ID, 14)
				set_control_par(%mast_effects_control_id[06], $CONTROL_PAR_AUTOMATION_ID, 15)
				set_control_par(%mast_effects_control_id[07], $CONTROL_PAR_AUTOMATION_ID, 16)
				set_control_par(%mast_fx_onoff_id[3],    	  $CONTROL_PAR_AUTOMATION_ID, 17)
				set_control_par(%mast_effects_control_id[08], $CONTROL_PAR_AUTOMATION_ID, 18)
				set_control_par(%mast_effects_control_id[09], $CONTROL_PAR_AUTOMATION_ID, 19)
				set_control_par(%mast_effects_control_id[10], $CONTROL_PAR_AUTOMATION_ID, 20)
				set_control_par(%mast_effects_control_id[11], $CONTROL_PAR_AUTOMATION_ID, 21)
				set_control_par(%mast_effects_control_id[12], $CONTROL_PAR_AUTOMATION_ID, 22)
				set_control_par(%mast_effects_control_id[13], $CONTROL_PAR_AUTOMATION_ID, 23)
			case $TILE_PERC4
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 14)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %perc_auto_id_remap[$a])
					end if
					inc($a)
				end while
			case $TILE_PERC5
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7 or $a = 14)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %perc_auto_id_remap[$a])
					end if
					inc($a)
				end while
			case $TILE_CYMB1
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %cymb_auto_id_remap[$a])
					end if
					inc($a)
				end while
			case $TILE_CYMB2
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %cymb_auto_id_remap[$a])
					end if
					inc($a)
				end while
			case $TILE_CYMB3
				$a := 0
				while ($a < num_elements(%source_control_id))
					if ($a = 1 or $a = 3 or $a = 5 or $a = 6 or $a = 7)
						set_control_par(%source_control_id[$a], $CONTROL_PAR_AUTOMATION_ID, %cymb_auto_id_remap[$a])
					end if
					inc($a)
				end while
		end select

	end if

{Panel Hide/Show Necessary}
	read_persistent_var($source_TAB)
	read_persistent_var($effects_TAB)
	
	declare $gui_update
	set_listener($NI_SIGNAL_TIMER_MS,500)
	$init_flag := 0
end on

function calc_velocity_curve
	{	variables passed: 	$mode_velocity
							$active_key_sld
		variables written:	%table[]
		counters used: 		$count_1}

	select ($mode_velocity)
		case 0 	{LIN}
			$CShow := 0
		case 1 	{EXP+}
			$CShow := $EXP_SHAPE
		case 2 	{EXP-}
			$CShow := -$EXP_SHAPE
		case 3 	{FIX}
			$count_1 := 0
			while ($count_1 <128)
				%table[$active_key_sld * 128 + $count_1] := $max_velocity_sld
				inc($count_1)
			end while
			exit
	end select
	
	$curve := $CShow
	$knob_helper := ($curve*(-1) + 1000)
	$count_1 := 0
	$helper := 1000
	$curve_hight := 0
	while($count_1 < 128)
		$helper := ($helper * $knob_helper)/1000
		%curve_deriv[$count_1] := $helper
		$curve_hight := $curve_hight + %curve_deriv[$count_1]
		inc($count_1)
	end while
	$count_1 := 2
	%curve_table_helper[0] := 0
	%curve_table_helper[1] := 0
	while ($count_1 <128)
		%curve_table_helper[$count_1] := ((%curve_table_helper[$count_1-1]+%curve_deriv[$count_1]))
		inc($count_1)
	end while
	$count_1 := 0
	while ($count_1 <128)
		%curve_form[$count_1] := ((%curve_table_helper[$count_1]*128)/(($curve_hight)/100))
		inc($count_1)
	end while
	$count_1 := 0
	while ($count_1 <128)
		%curve_form[$count_1] := (%curve_form[$count_1]*12700)/%curve_form[127]
		inc($count_1)
	end while

	if (get_control_par(%velocity_id[$mode_velocity],$CONTROL_PAR_KEY_ALT) = 1)
		$count_1 := 0
		while ($count_1 < 128)
			$count_2 := 0
			while ($count_2 < 128)
				%table[$active_key_sld * 128 + $count_2] := $min_velocity_sld + (((%curve_form[$count_2])*($max_velocity_sld-$min_velocity_sld))/12700)
				%mode_velocity_key[$count_1] := $mode_velocity
				inc($count_2)
			end while
			inc($count_1)
		end while
	else
		$count_2 := 0
		while ($count_2 < 128)
			%table[$active_key_sld * 128 + $count_2] := $min_velocity_sld + (((%curve_form[$count_2])*($max_velocity_sld-$min_velocity_sld))/12700)
			inc($count_2)
		end while
	end if
end function

function equal_power
	if ($math_Input <  -2147483647)
		$math_Output :=  -129015915
	else
		if (abs($math_Input) < 2)
			$math_Output := 100000 * $math_Input
		else
			$absolute_value := abs($math_Input)		{ Force radicand to positive value 2 <= A <= MaxInt }
			$shift_counter := 0
			while ($absolute_value .and. 1879048192 = 0)
				$absolute_value := sh_left($absolute_value, 3) 		{ Max #of trio shifts = 9 for Amin = 2 }
				inc($shift_counter)
			end while
			$temp_root := %RoodThird[sh_right($absolute_value,26) - 4] 									{ Initial estimate for integer part }
			$temp_root := (2 * $temp_root + ($absolute_value / ($temp_root * $temp_root))) / 3 			{ Only one iteration needed to converge }
			$m := $absolute_value / $temp_root - ($temp_root * $temp_root) 								{ m = Rem/r, where -2859 < m < 3790 }
			$temp_root := 400000 * $temp_root + (400000 * $m / (3 * $temp_root + ($m / $temp_root))) 	{ Combine with fractional part }
			$math_Output := sh_right(sh_right($temp_root,$shift_counter) + 2,2)							{ Denormalize and round result }
			if ($math_Input < 0)
				$math_Output :=  - $math_Output
			end if
		end if
	end if
end function

function hide_ALL_controls
	{Source Panel}
	$b := 0
	while ($b < num_elements(%source_control_id))
		set_control_par(%source_control_id[$b],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($b)
	end while
	{Source/Effects TABs}
	$b := 0
	while ($b < num_elements(%view_id))
		set_control_par(%view_id[$b], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
		inc($b)
	end while
	$a := 0
	while ($a < num_elements(%mast_effects_control_id))
		set_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($a)
	end while
	$b := 0
	while($b < num_elements(%mast_fx_onoff_id))
		set_control_par(%mast_fx_onoff_id[$b],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($b)
	end while
	{labels}
	$b := 0
	while ($b < num_elements(%lbl_mast_fx_id))
		set_control_par(%lbl_mast_fx_id[$b], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%stat_mast_lbl_fx_id[$b], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($b)
	end while
	$b := 0
	while ($b < num_elements(%lbl_source_id) )
		set_control_par(%lbl_source_id[$b], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		set_control_par(%stat_src_lbl_id[$b], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		inc($b)
	end while
	$b := 0
	while ($b < num_elements(%Ac_src_Pic_id))
		if (%Tile_has_Ac_Layers[$b] = $YES)
			set_control_par(%Ac_src_Pic_id[$b],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%Ac_Layer_Menu_id[$b], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
		end if
		inc($b)
	end while
	set_control_par(%Ac_Arrow_id[00],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	set_control_par(%Ac_Arrow_id[01],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	$b := 0
	while ($b < num_elements(%El_src_Pic_id))
		if (%Tile_has_El_Layers[$b] = $YES)
			set_control_par(%El_src_Pic_id[$b],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%El_Layer_Menu_id[$b], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
		end if
		inc($b)
	end while
	set_control_par(%El_Arrow_id[00],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	set_control_par(%El_Arrow_id[01],    $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function

function update_SOURCE_Values
	{knobs}
	$c := 0
	while ($c < 15)
		set_control_par(%source_control_id[$c],$CONTROL_PAR_VALUE,%src_data[($cur_tile * 15) + $c])
		inc($c)
	end while
	{Instrument Change}
	if (%Tile_has_Ac_Layers[$cur_tile] = $YES)
		set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_VALUE, %Ac_Inst_Selection[$cur_tile])
		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE))
		if (%Tile_has_El_Layers[$cur_tile] = $YES)
			set_control_par(%El_Layer_Menu_id[$cur_tile], $CONTROL_PAR_VALUE, %El_Inst_Selection[$cur_tile])
			set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE))
		end if
	end if
end function

function update_MASTER_FX_Values
	$c := 0
	while ($c < $NUM_CONTROLS_MASTER_FX)
		set_control_par(%mast_effects_control_id[$c],$CONTROL_PAR_VALUE,%master_fx_data[$c])
		inc($c)
	end while
	$c := 0
	while ($c < $NUM_CONTROLS_MASTER_FX_ONOFF)
		set_control_par(%mast_fx_onoff_id[$c],$CONTROL_PAR_VALUE,%master_onoff_data[$c])
		inc($c)
	end while
	{set_control_par(get_ui_id($lr_swap),$CONTROL_PAR_VALUE,%master_onoff_data[$c])}
end function

function recall_data
	$count_1 := 0
	while ($count_1 < 128)
		%inverse_mapping_data[$count_1] := -1
		inc($count_1)
	end while

	if ($current_mapping_preset_mnu > $NUM_FACTORY_PRESETS)
		$count_1 := 0
		while ($count_1 < 128)
			%current_mapping_data[$count_1] := %DL_user_mapping_data[($current_mapping_preset_mnu - $NUM_FACTORY_PRESETS - 1) * 128 + $count_1]
			if (%DL_user_mapping_data[($current_mapping_preset_mnu - $NUM_FACTORY_PRESETS - 1) * 128 + $count_1] > -1)
				%inverse_mapping_data[%DL_user_mapping_data[($current_mapping_preset_mnu - $NUM_FACTORY_PRESETS - 1) * 128 + $count_1]] := $count_1
			end if
			inc($count_1)
		end while
	else
		$count_1 := 0
		while ($count_1 < 128)
			%current_mapping_data[$count_1] := %FACTORY_MAPPING[$current_mapping_preset_mnu * 128 + $count_1]
			if (%FACTORY_MAPPING[$current_mapping_preset_mnu * 128 + $count_1] > -1)
				%inverse_mapping_data[%FACTORY_MAPPING[$current_mapping_preset_mnu * 128 + $count_1]] := $count_1
			end if
			inc($count_1)
		end while
	end if
	
	pgs_set_key_val(COMMAND, 0, -1)
	$count_1 := 0
	while ($count_1 < 128)
		pgs_set_key_val(MAPPING, $count_1, %inverse_mapping_data[$count_1])
		inc($count_1)
	end while
	pgs_set_key_val(COMMAND, 0, 6)

end function

function tile_Select
	{description: sets the values of the selectors and displays the fx of the selected channel}
	{variables = $cur_tile, $helper}
	{if(get_control_par(%tile_control_id[$cur_tile],$CONTROL_PAR_VALUE) = 0)
		set_control_par(%tile_control_id[$cur_tile],$CONTROL_PAR_VALUE,1)
	else
		$c := 0
		while($c < $NUM_TILES)
			%tile_Selected[$c] := 0
			inc($c)
		end while

		%tile_Selected[$cur_tile] := 1
		
		$c := 0
		while($c < $NUM_TILES)
			set_control_par(%tile_control_id[$c], $CONTROL_PAR_VALUE, 	      %tile_Selected[$c])
			inc($c)
		end while
	end if}
	
	$tile_count := 0
	while($tile_count < $NUM_TILES)
		if ($tile_count = $cur_tile or $tile_count = $TILE_OHS or $tile_count = $TILE_OHM or $tile_count = $TILE_ROOM)
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		else
			set_control_par(%tile_control_id[$tile_count], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)	    			
		end if
		inc($tile_count)
	end while

	call hide_ALL_controls

	select ($cur_tile)
		case $TILE_PERC1
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_PERC])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				select ($a)
					case 1
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] - 24)
						set_control_par_str(%lbl_source_GEN_id[$a], $CONTROL_PAR_TEXT, "")
					case 5
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] + 35)
				end select
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					if ($a < 5)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					else
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					end if
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
		case $TILE_PERC2 to $TILE_PERC3
			$a := 0
			while ($a < 2)
				set_control_par(%view_id[$a], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				inc($a)
			end while
			if ($source_TAB = 1)
				set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_PERC])
				$a := 0
				while ($a < num_elements(%source_GEN_control_id))
					set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
					select ($a)
						case 1
							set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] - 24)
							set_control_par_str(%lbl_source_GEN_id[$a], $CONTROL_PAR_TEXT, "")
						case 5
							set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] + 35)
					end select
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%lbl_source_GEN_id) )
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					if ($a < 2)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					else
						if ($a < 5)
							set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
							set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
						else
							set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
							set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
						end if
					end if
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
					inc($a)
				end while
				set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
				{Ac Pic/Menu}
				set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
				set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
				set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			else
				if ($effects_TAB = 1)
					set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$MASTER_VIEW])
					$a := 0
					while ($a < num_elements(%source_control_id))
						set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%mast_effects_control_id))
						set_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while($a < num_elements(%mast_fx_onoff_id))
						set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%lbl_mast_fx_id))
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
						set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
				end if		
			end if
		case $TILE_TOM1 to $TILE_TOM3
			$a := 0
			while ($a < 2)
				set_control_par(%view_id[$a], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a])
				inc($a)
			end while
			if ($source_TAB = 1)
				set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_GEN_VIEW])
				$a := 0
				while ($a < num_elements(%mast_effects_control_id))
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%source_control_id))
					set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				set_control_par(%source_control_id[02], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%source_control_id[04], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%source_control_id[14], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				$a := 0
				while ($a < num_elements(%lbl_source_id) )
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%stat_src_lbl_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%lbl_source_GEN_id) )
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%lbl_source_GEN_id[5],  $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					if ($a < 2) {Tune - OH/Room}
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					else	{AHD}
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					end if
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
					inc($a)
				end while
				set_control_par_str(%lbl_source_GEN_id[1], $CONTROL_PAR_TEXT, "")
				set_control_par(%lbl_source_id[03], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%lbl_source_id[05], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[03], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[05], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LB_OHRM)
				{Ac Pic/Menu}
				set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				{El Pic/Menu}
				set_control_par(%El_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			else
				if ($effects_TAB = 1)
					{set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$EFFECTS_VIEW])}
					set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$MASTER_VIEW])
					$a := 0
					while ($a < num_elements(%source_control_id))
						set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%mast_effects_control_id))
						set_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while($a < num_elements(%mast_fx_onoff_id))
						set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%lbl_mast_fx_id))
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
						set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
				end if		
			end if
		case $TILE_CYMB1
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_SIMPLE])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				inc($a)
			end while
			set_control_par(%source_GEN_control_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par_str(%lbl_source_GEN_id[1], $CONTROL_PAR_TEXT, "")
			set_control_par(%lbl_source_GEN_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
		case $TILE_PERC4
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_PERC])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				select ($a)
					case 1
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] - 24)
						set_control_par_str(%lbl_source_GEN_id[$a], $CONTROL_PAR_TEXT, "")
					case 5
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] + 35)
				end select
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					if ($a < 5)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					else
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					end if
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
		case $TILE_HIHAT
			$a := 0
			while ($a < 2)
				set_control_par(%view_id[$a], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a])
				inc($a)
			end while
			if ($source_TAB = 1)
				set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_GEN_VIEW])
				$a := 0
				while ($a < num_elements(%mast_effects_control_id))
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%source_control_id))
					set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				set_control_par(%source_control_id[02], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%source_control_id[04], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%source_control_id[14], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				$a := 0
				while ($a < num_elements(%lbl_source_id) )
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%stat_src_lbl_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%lbl_source_GEN_id) )
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%lbl_source_GEN_id[5],  $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					if ($a < 2) {Tune - }
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					else	{AHD}
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					end if
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
					inc($a)
				end while
				set_control_par(%lbl_source_id[03], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%lbl_source_id[05], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[03], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[05], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
				set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LB_OHRM)
				{Ac Pic/Menu}
				set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				{El Pic/Menu}
				set_control_par(%El_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			else
				if ($effects_TAB = 1)
					{set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$EFFECTS_VIEW])}
					set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$MASTER_VIEW])
					$a := 0
					while ($a < num_elements(%source_control_id))
						set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%mast_effects_control_id))
						set_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while($a < num_elements(%mast_fx_onoff_id))
						set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%lbl_mast_fx_id))
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
						set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
				end if	
			end if
		case $TILE_SNARE to $TILE_KICK
			$a := 0
			while ($a < 2)
				set_control_par(%view_id[$a], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a])
				inc($a)
			end while
			
			if ($source_TAB = 1)
				set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_MAIN_VIEW])
				$a := 0
				while ($a < num_elements(%mast_effects_control_id))
					set_control_par(%mast_effects_control_id[$a], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%source_control_id))
					set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				set_control_par(%source_control_id[14],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				$a := 0
				while ($a < num_elements(%lbl_source_id) )
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%stat_src_lbl_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($a)
				end while
				$a := 0
				while ($a < num_elements(%lbl_source_GEN_id) )
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%lbl_source_GEN_id[5], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					if ($a < 2) {Tune - OH/Room}
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					else	{AHD}
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					end if
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
					set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
					inc($a)
				end while
				set_control_par_str(%lbl_source_GEN_id[1], $CONTROL_PAR_TEXT, "")
				set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL) {PERC PLATE}
				set_control_par(%stat_src_lbl_id[04], $CONTROL_PAR_PICTURE_STATE,$SRC_LB_OHRM)
				if ($cur_tile = $TILE_KICK)
					set_control_par_str(%lbl_source_id[03], $CONTROL_PAR_TEXT, ""){Out/Sub}
					set_control_par(%stat_src_lbl_id[03],$CONTROL_PAR_PICTURE_STATE,$SRC_LBL_OUT)
				else
					if ($cur_tile = $TILE_SNARE)
						set_control_par_str(%lbl_source_id[03], $CONTROL_PAR_TEXT, ""){Top/Bot.}
						set_control_par(%stat_src_lbl_id[03],$CONTROL_PAR_PICTURE_STATE,$SRC_LBL_TOP)
					end if
				end if
				{Ac Pic/Menu}
				set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
				{El Pic/Menu}
				set_control_par(%El_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				set_control_par(%El_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			else
				if ($effects_TAB = 1)
					{set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$EFFECTS_VIEW])}
					set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$MASTER_VIEW])
					$a := 0
					while ($a < num_elements(%source_control_id))
						set_control_par(%source_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%mast_effects_control_id))
						set_control_par(%mast_effects_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while($a < num_elements(%mast_fx_onoff_id))
						set_control_par(%mast_fx_onoff_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
					$a := 0
					while ($a < num_elements(%lbl_mast_fx_id))
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						set_control_par(%lbl_mast_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
						set_control_par(%stat_mast_lbl_fx_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($a)
					end while
				end if		
			end if
		case $TILE_CYMB2
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_SIMPLE])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				inc($a)
			end while
			set_control_par(%source_GEN_control_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par(%lbl_source_GEN_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par_str(%lbl_source_GEN_id[1], $CONTROL_PAR_TEXT, "")
			set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
		case $TILE_PERC5
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_PERC])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				select ($a)
					case 1
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] - 24)
						set_control_par_str(%lbl_source_GEN_id[$a], $CONTROL_PAR_TEXT, "")
					case 5
						set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a] + 35)
				end select
				inc($a)
			end while
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					if ($a < 5)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
					else
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 26)
						set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
					end if
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
		case $TILE_CYMB3
			set_control_par($fx_panel,$CONTROL_PAR_PICTURE_STATE,%fx_bg_state[$SOURCE_SIMPLE])
			set_control_par(%view_id[2], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%view_id[2], $CONTROL_PAR_PICTURE_STATE, %Tile_View_Tabs[$cur_tile])
			$a := 0
			while ($a < num_elements(%source_GEN_control_id))
				set_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_Y, %source_GEN_pos_Y[$a] + 33)
				set_control_par(%source_GEN_control_id[$a], $CONTROL_PAR_POS_X, %source_GEN_pos_X[$a])
				inc($a)
			end while
			set_control_par(%source_GEN_control_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			$a := 0
			while ($a < num_elements(%lbl_source_GEN_id) )
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_BG)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				if ($a < 2)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 27)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 34)
				else
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_X) - 31)
					set_control_par(%lbl_source_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%source_GEN_control_id[$a],$CONTROL_PAR_POS_Y) + 29)
				end if
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_X, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_X) + $STAT_LBL_OFS_X)
				set_control_par(%stat_lbl_src_GEN_id[$a], $CONTROL_PAR_POS_Y, get_control_par(%lbl_source_GEN_id[$a],$CONTROL_PAR_POS_Y) + $STAT_LBL_OFS_Y)
				inc($a)
			end while
			set_control_par(%lbl_source_GEN_id[5],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par_str(%lbl_source_GEN_id[1], $CONTROL_PAR_TEXT, "")
			set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
			set_control_par(%stat_lbl_src_GEN_id[01], $CONTROL_PAR_PICTURE_STATE,$SRC_LBL_VOL)
			{Ac Pic/Menu}
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_src_Pic_id[$cur_tile],    $CONTROL_PAR_POS_Y, 434 + 29 + $PANEL_Y)
			set_control_par(%Ac_Layer_Menu_id[$cur_tile], $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y))
			set_control_par(%Ac_Arrow_id[00],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[00], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
			set_control_par(%Ac_Arrow_id[01],      		  $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
			set_control_par(%Ac_Arrow_id[01], 			  $CONTROL_PAR_POS_Y, get_control_par(%Ac_src_Pic_id[$cur_tile],$CONTROL_PAR_POS_Y) - 2)
	end select
	call update_SOURCE_Values
end function

function tile_MUTE
	{description: mutes the channel}
	{variables = $mute_pointer}
	$vol_value := 71
	%mute_state[$mute_pointer] := (get_control_par(%tile_control_id[$mute_pointer],$CONTROL_PAR_VALUE) + 1) mod 2
	
	$vol_value := %mute_state[$mute_pointer]*((%wurzel_zweidrittel[$vol_value]*$cur_volume)/1000)	
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $vol_value, -1, $SPREAD_SLOT,$NI_BUS_OFFSET + %Tile_to_Bus[$mute_pointer])
	pgs_set_key_val(COMMAND,0,-1)
	pgs_set_key_val(TILE_MUTE_STATE,$mute_pointer,%mute_state[$mute_pointer])
end function

function key_coloring
	$count_1 := 0
	while ($count_1 < 128)
		if (in_range($count_1,$low_key_sld,$hi_key_sld))
			set_key_color($count_1, $KEY_COLOR_RED)
		else
			set_key_color($count_1, $KEY_COLOR_WHITE)
		end if
		inc($count_1)
	end while
	set_key_color($C_3, $KEY_COLOR_GREEN)
end function

on ui_control ($source_TAB)
	if ($source_TAB = 1)
		$source_TAB	 := 1
		$effects_TAB := 0
	else
		$source_TAB	 := 1
	end if
	call tile_Select
end on

on ui_control ($effects_TAB)
	if ($effects_TAB = 1)
		$effects_TAB := 1
		$source_TAB	 := 0
	else
		$effects_TAB := 1
	end if
	call tile_Select
end on	

{TILE Callbacks}
	on ui_control ($OHS_TL)
		$mute_pointer := $TILE_OHS
		call tile_MUTE
	end on
	on ui_control ($OHM_TL)
		$mute_pointer := $TILE_OHM
		call tile_MUTE
	end on
	on ui_control ($ROOM_TL)
		$mute_pointer := $TILE_ROOM
		call tile_MUTE
	end on
	{on ui_control ($REVERB_TL)
		$cur_tile :=  $TILE_REV
		call tile_Select
	end on}
	on ui_control ($PERC1_TL)
		$cur_tile :=  $TILE_PERC1
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($PERC2_TL)
		$cur_tile :=  $TILE_PERC2
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($PERC3_TL)
		$cur_tile :=  $TILE_PERC3
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($TOM1_TL)
		$cur_tile :=  $TILE_TOM1
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($TOM2_TL)
		$cur_tile :=  $TILE_TOM2
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($TOM3_TL)
		$cur_tile :=  $TILE_TOM3
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($CYMB1_TL)
		$cur_tile :=  $TILE_CYMB1
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	{on ui_control ($MASTER_TL)
		$cur_tile :=  $TILE_MASTER
		call tile_Select
	end on}
	on ui_control ($PERC4_TL)
		$cur_tile :=  $TILE_PERC4
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($HIHAT_TL)
		$cur_tile :=  $TILE_HIHAT
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($SNARE_TL)
		$cur_tile :=  $TILE_SNARE
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($KICK_TL)
		$cur_tile :=  $TILE_KICK
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($CYMB2_TL)
		$cur_tile :=  $TILE_CYMB2
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($PERC5_TL)
		$cur_tile :=  $TILE_PERC5
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on
	on ui_control ($CYMB3_TL)
		$cur_tile :=  $TILE_CYMB3
		$last_tile := $cur_tile
		$cur_instrument := %Tile_to_Inst_remap[$cur_tile]
		$last_instrument := $cur_instrument
		call tile_Select
		play_note(%AC_INSTRUMENT_OFFSET[$cur_instrument], 105, 0, 0)
	end on

on ui_control ($source_TAB)
	if ($source_TAB = 1)
		$source_TAB	 := 1
		$effects_TAB := 0
	else
		$source_TAB	 := 1
	end if
	call tile_Select
end on

on ui_control ($effects_TAB)
	if ($effects_TAB = 1)
		$effects_TAB := 1
		$source_TAB	 := 0
	else
		$effects_TAB := 1
	end if
	call tile_Select
end on	

{Source CallBacks}
		
	function store_SOURCE_data

		%src_data[($cur_tile * $NUM_CONTROLS_SOURCE) + $src_pointer] := get_control_par(%source_control_id[$src_pointer],$CONTROL_PAR_VALUE)
	end function

	function store_AC_INST_selection
		%Ac_Inst_Selection[$cur_tile] := get_menu_item_value(%Ac_Layer_Menu_id[$cur_tile],$Ac_menu_index)
	end function

	function store_EL_INST_selection

		%El_Inst_Selection[$cur_tile] := get_menu_item_value(%El_Layer_Menu_id[$cur_tile],$El_menu_index)
	end function

	function update_AC_PURGE_state
		$mic_count := 0
		while ($mic_count < 8)
			if (%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[%Tile_to_Inst_remap[$cur_tile]] * 8 + $mic_count] >= 0)
    			$mic_group_offset := %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[%Tile_to_Inst_remap[$cur_tile]] * 8 + $mic_count]
    			$group_count	  := %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[%Tile_to_Inst_remap[$cur_tile]] * 8 + $mic_count]
    			while ($group_count < %Ac_Layer_per_Tile[$cur_tile] + $mic_group_offset)
    				%Ac_Group_PURGE_State[$group_count] := 0
    				inc($group_count)
    			end while
    			%Ac_Group_PURGE_State[%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[%Tile_to_Inst_remap[$cur_tile]] * 8 + $mic_count] + %Ac_Inst_Selection[$cur_tile]] := 1
			end if
			inc($mic_count)
		end while
		pgs_set_key_val(COMMAND, 0, -1)
		$group_count := 0
		while ($group_count < $AC_NUM_GROUPS)
			pgs_set_key_val(AC_LOAD_PURGE_STATE, $group_count, %Ac_Group_PURGE_State[$group_count])
			inc($group_count)
			wait(1)   
		end while
		pgs_set_key_val(COMMAND, 0, 0)
	end function

	function update_EL_PURGE_state
		$elec_grp_offset := %EL_GROUP_DATA[%Tile_to_Inst_remap[$cur_tile]] - $AC_NUM_GROUPS
		$group_count := %EL_GROUP_DATA[%Tile_to_Inst_remap[$cur_tile]] - $AC_NUM_GROUPS
		while ($group_count < %El_Layer_per_Tile[$cur_tile] + $elec_grp_offset)
			%El_Group_PURGE_State[$group_count] := 0
			inc($group_count)
		end while
		%El_Group_PURGE_State[%EL_GROUP_DATA[%Tile_to_Inst_remap[$cur_tile]] - $AC_NUM_GROUPS + %El_Inst_Selection[$cur_tile]] := 1

		pgs_set_key_val(COMMAND, 0, -1)
		$group_count := 0
		while ($group_count < $EL_NUM_GROUPS)
			pgs_set_key_val(EL_LOAD_PURGE_STATE, $group_count, %El_Group_PURGE_State[$group_count])
			inc($group_count)
			wait(1)   
		end while
		pgs_set_key_val(COMMAND, 0, 0)
	end function

	{Acoustic Controls}
		on ui_control($ac_el_BALANCE)
			set_control_par(%stat_src_lbl_id[00], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%stat_src_lbl_id[01], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)

			$math_Input := $BAL_MIDWAY_VOL * $ac_el_BALANCE
			call equal_power
			$ac_vol := ($math_Output + 50) / 100 + %equal_gain[$ac_el_BALANCE]

			$math_Input := $BAL_MIDWAY_VOL * (10000 - $ac_el_BALANCE)
			call equal_power
			$el_vol := ($math_Output + 50) / 100 + %equal_gain[$ac_el_BALANCE]
			
			if (get_control_par(get_ui_id($ac_el_BALANCE),$CONTROL_PAR_KEY_ALT) = 1)	
				$a := 0
				while ($a < $NUM_TILES)
					if (%Tile_has_Ac_Layers[$a] = $YES)
						$cur_instrument := %Tile_to_Inst_remap[$a]
						$cur_tile := $a
						
						$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
						while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
							if (%AC_GROUP_DATA[$x] > -1)
								set_engine_par($ENGINE_PAR_VOLUME, $ac_vol, %AC_GROUP_DATA[$x], -1, -1)
								$y := 1
								while ($y < %Ac_Layer_per_Tile[$cur_tile])
									set_engine_par($ENGINE_PAR_VOLUME, $ac_vol, %AC_GROUP_DATA[$x] + $y , -1, -1)
									inc($y)
								end while
							end if
							inc($x)
						end while
					end if

					if (%Tile_has_El_Layers[$a] = $YES)

						$z := %EL_GROUP_DATA[$cur_instrument]
						while ($z < %EL_GROUP_DATA[$cur_instrument + 1])
							set_engine_par($ENGINE_PAR_VOLUME, $el_vol, $z, -1, -1)
							inc($z)
						end while

					end if

					$src_pointer := $SRC_AC_EL_BAL
					call store_SOURCE_data

					inc($a)
				end while
				$cur_instrument := $last_instrument
				$cur_tile := $last_tile
			else
				$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
				while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
					if (%AC_GROUP_DATA[$x] > -1)
						set_engine_par($ENGINE_PAR_VOLUME, $ac_vol, %AC_GROUP_DATA[$x], -1, -1)
						$y := 1
						while ($y < %Ac_Layer_per_Tile[$cur_tile])
							set_engine_par($ENGINE_PAR_VOLUME, $ac_vol, %AC_GROUP_DATA[$x] + $y , -1, -1)
							inc($y)
						end while
					end if
					inc($x)
				end while

				$z := %EL_GROUP_DATA[$cur_instrument]
				while ($z < %EL_GROUP_DATA[$cur_instrument + 1])
					set_engine_par($ENGINE_PAR_VOLUME, $el_vol, $z, -1, -1)
					inc($z)
				end while
				
				$src_pointer := $SRC_AC_EL_BAL
				call store_SOURCE_data
			end if
			
			set_control_par_str(%source_control_id[$SRC_AC_EL_BAL],$CONTROL_PAR_LABEL,"Ac:" & get_engine_par_disp($ENGINE_PAR_VOLUME, %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$last_instrument] * 8], -1, -1) & "dB/ Elec: "  &...
														get_engine_par_disp($ENGINE_PAR_VOLUME,%EL_GROUP_DATA[$last_instrument], -1, -1) & " dB")
			set_text ($lbl_Ac_Level,get_engine_par_disp($ENGINE_PAR_VOLUME, %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$last_instrument] * 8], -1, -1) & " dB")
			set_text ($lbl_El_Level,get_engine_par_disp($ENGINE_PAR_VOLUME,%EL_GROUP_DATA[$last_instrument], -1, -1) & " dB")
			%lbl_src_last_time[$SRC_AC_EL_BAL] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_EL_BAL] > $LABEL_WAIT - 5)
				set_text ($lbl_Ac_Level, "")
				set_text ($lbl_El_Level, "")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[00], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%stat_src_lbl_id[01], $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
			end if
		end on
		on ui_control ($ac_Tune)
			set_control_par(%stat_src_lbl_id[02], $CONTROL_PAR_HIDE,16)
			if (get_control_par(get_ui_id($ac_Tune),$CONTROL_PAR_KEY_ALT) = 1)
				$a := 0
				while ($a < $NUM_TILES)
					if (%Tile_has_Ac_Layers[$a] = $YES)
						$cur_instrument := %Tile_to_Inst_remap[$a]
						$cur_tile := $a
						$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
						while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
							if (%AC_GROUP_DATA[$x] > -1)
								set_engine_par($ENGINE_PAR_TUNE, $ac_Tune, %AC_GROUP_DATA[$x], -1, -1)
								$y := 1
								while ($y < %Ac_Layer_per_Tile[$cur_tile])
									set_engine_par($ENGINE_PAR_TUNE, $ac_Tune, %AC_GROUP_DATA[$x] + $y , -1, -1)
									inc($y)
								end while
							end if
							inc($x)
						end while

						$src_pointer := $SRC_AC_TUNE
						
						call store_SOURCE_data
					end if
					inc($a)
				end while
			else
				$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
				while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
					if (%AC_GROUP_DATA[$x] > -1)
						set_engine_par($ENGINE_PAR_TUNE, $ac_Tune, %AC_GROUP_DATA[$x], -1, -1)
						$y := 1
						while ($y < %Ac_Layer_per_Tile[$cur_tile])
							set_engine_par($ENGINE_PAR_TUNE, $ac_Tune, %AC_GROUP_DATA[$x] + $y , -1, -1)
							inc($y)
						end while
					end if
					inc($x)
				end while

				$src_pointer := $SRC_AC_TUNE
			
				call store_SOURCE_data
			end if
		
			set_control_par_str(%source_control_id[$SRC_AC_TUNE],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_TUNE,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], -1, -1) & "")
			set_text ($lbl_ac_Tune,get_engine_par_disp($ENGINE_PAR_TUNE,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], -1, -1) & "")
		
			%lbl_src_last_time[$SRC_AC_TUNE] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_TUNE] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_Tune,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[02], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control($ac_mic_Bal)
			set_control_par(%stat_src_lbl_id[03], $CONTROL_PAR_HIDE,16)
			$math_Input := $MIC_MIDWAY_VOL * (10000 - $ac_mic_Bal)
			call equal_power
			$temp_vol_1 := ($math_Output + 50) / 100 + %equal_gain[$ac_mic_Bal]

			$math_Input := $MIC_MIDWAY_VOL * $ac_mic_Bal
			call equal_power
			$temp_vol_2 := ($math_Output + 50) / 100 + %equal_gain[$ac_mic_Bal]

			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument]
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1])
				if (%AC_GROUP_DATA[$x * 8 + 1] > -1)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $temp_vol_1, %AC_GROUP_DATA[$x * 8 + 0], $GAIN_SLOT, -1)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $temp_vol_2, %AC_GROUP_DATA[$x * 8 + 1], $GAIN_SLOT, -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $temp_vol_1, %AC_GROUP_DATA[$x * 8 + 0] + $y, $GAIN_SLOT, -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $temp_vol_2, %AC_GROUP_DATA[$x * 8 + 1] + $y, $GAIN_SLOT, -1)
						inc($y)
					end while
				end if
				inc($x)
			end while

			{voice optimization}
			select ($cur_tile)
				case $TILE_KICK	
					if ($temp_vol_1 > $temp_vol_2)
						$mic_pointer := 1
						if ($temp_vol_2 < 100000)
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						else
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						end if
					else
						$mic_pointer := 0
						if ($temp_vol_1 < 100000)
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						else
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						end if
					end if
				case $TILE_SNARE	
					if ($temp_vol_1 > $temp_vol_2)
						$mic_pointer := 4
						if ($temp_vol_2 < 100000)
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						else
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						end if
					else
						$mic_pointer := 3
						if ($temp_vol_1 < 100000)
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						else
							pgs_set_key_val(COMMAND,0,-1)
							pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
							%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
						end if
					end if
			end select

			$src_pointer := $SRC_AC_MIC_BAL
			call store_SOURCE_data
			
			set_control_par_str(%source_control_id[$SRC_AC_MIC_BAL],$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 0], $GAIN_SLOT, -1) & "/"  &...
														get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 1], $GAIN_SLOT, -1) & " dB")
			set_text ($lbl_ac_mic_Bal,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 0], $GAIN_SLOT, -1) & "/"  &...
														get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 1], $GAIN_SLOT, -1) & "dB")
			
			%lbl_src_last_time[$SRC_AC_MIC_BAL] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_MIC_BAL] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_mic_Bal, "")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[03], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control($ac_room_oh_level)
			set_control_par(%stat_src_lbl_id[04], $CONTROL_PAR_HIDE,16)
			if ($cur_tile = $TILE_PERC1 or $cur_tile = $TILE_PERC2 or $cur_tile = $TILE_PERC3 or $cur_tile = $TILE_PERC4 or $cur_tile = $TILE_PERC5)
				$x := %AC_INSTRUMENT_OFFSET[$cur_instrument]
				while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1])
					if (%AC_GROUP_DATA[$x * 8 + 4] > -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 4], $GAIN_SLOT, -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 5], $GAIN_SLOT, -1)
						$y := 1
						while ($y < %Ac_Layer_per_Tile[$cur_tile])
							set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 4] + $y , $GAIN_SLOT, -1)
							set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 5] + $y , $GAIN_SLOT, -1)
							inc($y)
						end while
					end if
					inc($x)
				end while
			else
				$x := %AC_INSTRUMENT_OFFSET[$cur_instrument]
				while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1])
					if (%AC_GROUP_DATA[$x * 8 + 4] > -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 4], $GAIN_SLOT, -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 5], $GAIN_SLOT, -1)
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 6], $GAIN_SLOT, -1)
						$y := 1
						while ($y < %Ac_Layer_per_Tile[$cur_tile])
							set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 4] + $y , $GAIN_SLOT, -1)
							set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 5] + $y , $GAIN_SLOT, -1)
							set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_room_oh_level, %AC_GROUP_DATA[$x * 8 + 6] + $y , $GAIN_SLOT, -1)
							inc($y)
						end while
					end if
					inc($x)
				end while
			end if
			
			$src_pointer := $SRC_AC_ROOM_LEVEL
			call store_SOURCE_data
			
			set_control_par_str(%source_control_id[$SRC_AC_ROOM_LEVEL],$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], $GAIN_SLOT, -1) & " dB")
			set_text ($lbl_ac_room_oh_BAL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], $GAIN_SLOT, -1) & " dB")
			%lbl_src_last_time[$SRC_AC_ROOM_LEVEL] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_ROOM_LEVEL] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_room_oh_BAL, "")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[04], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control($ac_perc_plate_level)
			set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE,16)
			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument]
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1])
				if (%AC_GROUP_DATA[$x * 8 + 6] > -1)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_perc_plate_level, %AC_GROUP_DATA[$x * 8 + 6], $GAIN_SLOT, -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_perc_plate_level, %AC_GROUP_DATA[$x * 8 + 6] + $y , $GAIN_SLOT, -1)
						inc($y)
					end while
				end if
				inc($x)
			end while

			$src_pointer := $SRC_PERC_PLATE
			call store_SOURCE_data
			
			set_control_par_str(%source_control_id[$SRC_PERC_PLATE],$CONTROL_PAR_LABEL, get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 6], $GAIN_SLOT, -1) & " dB")
			set_text ($lbl_perc_plate,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 6], $GAIN_SLOT, -1) & " dB")
			%lbl_src_last_time[$SRC_PERC_PLATE] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_PERC_PLATE] > $LABEL_WAIT - 5)
				set_text ($lbl_perc_plate, "")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[15], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($ac_trash_level)
			set_control_par(%stat_src_lbl_id[05], $CONTROL_PAR_HIDE,16)
			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument]
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1])
				if (%AC_GROUP_DATA[$x * 8 + 2] > -1)
					set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_trash_level, %AC_GROUP_DATA[$x * 8 + 2], $GAIN_SLOT, -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, $ac_trash_level, %AC_GROUP_DATA[$x * 8 + 2] + $y, $GAIN_SLOT, -1)
						inc($y)
					end while
				end if
				inc($x)
			end while

			select ($cur_tile)
				case $TILE_KICK
					$mic_pointer := 2
					if ($ac_trash_level < 20000)
						pgs_set_key_val(COMMAND,0,-1)
						pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
						%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
					else
						pgs_set_key_val(COMMAND,0,-1)
						pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
						%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
					end if
				case $TILE_SNARE
					$mic_pointer := 5
					if ($ac_trash_level < 20000)
						pgs_set_key_val(COMMAND,0,-1)
						pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 0)
						%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
					else
						pgs_set_key_val(COMMAND,0,-1)
						pgs_set_key_val(MIC_VOICE_ALLOW, $mic_pointer, 1)
						%mic_balance_state[$mic_pointer] := pgs_get_key_val(MIC_VOICE_ALLOW, $mic_pointer)
					end if
			end select

			$src_pointer := $SRC_AC_TRASH
			call store_SOURCE_data

			set_control_par_str(%source_control_id[$SRC_AC_TRASH],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 2], $GAIN_SLOT, -1) & " dB")
			set_text ($lbl_ac_trash_level,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, %AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 2], $GAIN_SLOT, -1) & " dB")

			%lbl_src_last_time[$SRC_AC_TRASH] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_TRASH] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_trash_level,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[05], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($ac_attack)
			set_control_par(%stat_src_lbl_id[06], $CONTROL_PAR_HIDE,16)
			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
				if (%AC_GROUP_DATA[$x] > -1)
					set_engine_par($ENGINE_PAR_ATTACK, $ac_attack, %AC_GROUP_DATA[$x], find_mod(%AC_GROUP_DATA[$x], "ENV_AHDSR"), -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_ATTACK, $ac_attack, %AC_GROUP_DATA[$x] + $y , find_mod(%AC_GROUP_DATA[$x] + $y , "ENV_AHDSR"), -1)
						inc($y)
					end while
				end if
				inc($x)
			end while
			
			$src_pointer := $SRC_AC_ATTACK
			call store_SOURCE_data

			set_control_par_str(%source_control_id[$SRC_AC_ATTACK],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_ac_attack,get_engine_par_disp($ENGINE_PAR_ATTACK,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_AC_ATTACK] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_ATTACK] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_attack,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[06], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($ac_hold)
			set_control_par(%stat_src_lbl_id[07], $CONTROL_PAR_HIDE,16)
			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
				if (%AC_GROUP_DATA[$x] > -1)
					set_engine_par($ENGINE_PAR_HOLD, $ac_hold, %AC_GROUP_DATA[$x], find_mod(%AC_GROUP_DATA[$x], "ENV_AHDSR"), -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_HOLD, $ac_hold, %AC_GROUP_DATA[$x] + $y , find_mod(%AC_GROUP_DATA[$x] + $y , "ENV_AHDSR"), -1)
						inc($y)
					end while
				end if
				inc($x)
			end while

			$src_pointer := $SRC_AC_HOLD
			call store_SOURCE_data

			set_control_par_str(%source_control_id[$SRC_AC_HOLD],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_HOLD,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_ac_hold,get_engine_par_disp($ENGINE_PAR_HOLD,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_AC_HOLD] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_HOLD] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_hold,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[07], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($ac_decay)
			set_control_par(%stat_src_lbl_id[08], $CONTROL_PAR_HIDE,16)
			$x := %AC_INSTRUMENT_OFFSET[$cur_instrument] * 8
			while ($x < %AC_INSTRUMENT_OFFSET[$cur_instrument + 1] * 8)
				if (%AC_GROUP_DATA[$x] > -1)
					set_engine_par($ENGINE_PAR_DECAY, $ac_decay, %AC_GROUP_DATA[$x], find_mod(%AC_GROUP_DATA[$x], "ENV_AHDSR"), -1)
					$y := 1
					while ($y < %Ac_Layer_per_Tile[$cur_tile])
						set_engine_par($ENGINE_PAR_DECAY, $ac_decay, %AC_GROUP_DATA[$x] + $y , find_mod(%AC_GROUP_DATA[$x] + $y , "ENV_AHDSR"), -1)
						inc($y)
					end while
				end if
				inc($x)
			end while

			$src_pointer := $SRC_AC_DECAY
			call store_SOURCE_data
			
			set_control_par_str(%source_control_id[$SRC_AC_DECAY],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_DECAY,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_ac_decay,get_engine_par_disp($ENGINE_PAR_DECAY,...
										%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], find_mod(%AC_GROUP_DATA[%AC_INSTRUMENT_OFFSET[$cur_instrument] * 8 + 4], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_AC_DECAY] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_AC_DECAY] > $LABEL_WAIT - 5)
				set_text ($lbl_ac_decay,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[08], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on

	{Electronic Controls}
		on ui_control ($el_Tune)
			set_control_par(%stat_src_lbl_id[09], $CONTROL_PAR_HIDE,16)
			if (get_control_par(get_ui_id($el_Tune),$CONTROL_PAR_KEY_ALT) = 1)
				$b := 0
				while ($b < $NUM_TILES)
					if (%Tile_has_El_Layers[$b] = $YES)
						$cur_instrument := %Tile_to_Inst_remap[$b]
						$cur_tile := $b
						$c := %EL_GROUP_DATA[$cur_instrument]
						while ($c < %EL_GROUP_DATA[$cur_instrument + 1])
							set_engine_par($ENGINE_PAR_TUNE, $el_Tune, $c, -1, -1)
							inc($c)
						end while
						
						$src_pointer := $SRC_EL_TUNE
						call store_SOURCE_data
					end if
					inc($b)
				end while
			else
				$b := %EL_GROUP_DATA[$cur_instrument]
				while ($b < %EL_GROUP_DATA[$cur_instrument + 1])
					set_engine_par($ENGINE_PAR_TUNE, $el_Tune, $b, -1, -1)
					inc($b)
				end while
				
				$src_pointer := $SRC_EL_TUNE
				call store_SOURCE_data
			end if

			set_control_par_str(%source_control_id[$SRC_EL_TUNE],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_TUNE,...
										%EL_GROUP_DATA[$cur_instrument], -1, -1) & "")
			set_text ($lbl_el_Tune,get_engine_par_disp($ENGINE_PAR_TUNE,...
										%EL_GROUP_DATA[$cur_instrument], -1, -1) & "")
			%lbl_src_last_time[$SRC_EL_TUNE] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_TUNE] > $LABEL_WAIT - 5)
				set_text ($lbl_el_Tune,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[09], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control($el_dual_Filter)
			set_control_par(%stat_src_lbl_id[10], $CONTROL_PAR_HIDE,16)
		    if ($el_dual_Filter <= 0)
		        $cutof_freq := 1000000 - abs($el_dual_Filter)

		        $a := %EL_GROUP_DATA[$cur_instrument]
		        while ($a < %EL_GROUP_DATA[$cur_instrument + 1])
			        set_engine_par($ENGINE_PAR_CUTOFF,$cutof_freq,     $a, $FX_SLOT_LP, -1)
			        set_engine_par($ENGINE_PAR_CUTOFF,$el_dual_Filter, $a, $FX_SLOT_HP, -1)
		        	inc($a)
		        end while

		        set_control_par_str(%source_control_id[$SRC_EL_FILTER],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_CUTOFF,...
										%EL_GROUP_DATA[$cur_instrument], $FX_SLOT_LP, -1) & " Hz")
		        set_text($lbl_el_dual_Filter,"LP " & get_engine_par_disp($ENGINE_PAR_CUTOFF, %EL_GROUP_DATA[$cur_instrument], $FX_SLOT_LP, -1) & "Hz")
		    else
		    	$a := %EL_GROUP_DATA[$cur_instrument]
		        while ($a < %EL_GROUP_DATA[$cur_instrument + 1])
			        set_engine_par($ENGINE_PAR_CUTOFF,$el_dual_Filter, $a, $FX_SLOT_HP, -1)
		        	inc($a)
		        end while
		        set_control_par_str(%source_control_id[$SRC_EL_FILTER],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_CUTOFF,...
										%EL_GROUP_DATA[$cur_instrument], $FX_SLOT_HP, -1) & " Hz")
		        set_text($lbl_el_dual_Filter,"HP " & get_engine_par_disp($ENGINE_PAR_CUTOFF, %EL_GROUP_DATA[$cur_instrument], $FX_SLOT_HP, -1) & "Hz")
		    end if

			$src_pointer := $SRC_EL_FILTER
			call store_SOURCE_data
		    %lbl_src_last_time[$SRC_EL_FILTER] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_FILTER] > $LABEL_WAIT - 5)
				set_text ($lbl_el_dual_Filter,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[10], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($el_trig_delay)
			set_control_par(%stat_src_lbl_id[11], $CONTROL_PAR_HIDE,16)
			set_text($lbl_el_trig_delay, $el_trig_delay/1000 & " ms")
			$src_pointer := $SRC_EL_DELAY
			call store_SOURCE_data

			pgs_set_key_val(COMMAND, 0, -1)
			pgs_set_key_val(ELEC_DELAY, %Tile_to_Inst_remap[$cur_tile], $el_trig_delay)

			{special case for open HH}
			$opn_HH_pgs_value := $el_trig_delay
			pgs_set_key_val(COMMAND, 0, -1)
			pgs_set_key_val(ELEC_DELAY_OPN_HH, 0, $el_trig_delay)

			%lbl_src_last_time[$SRC_EL_DELAY] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_DELAY] > $LABEL_WAIT - 5)
				set_text ($lbl_el_trig_delay, "")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[11], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($el_attack)
			set_control_par(%stat_src_lbl_id[12], $CONTROL_PAR_HIDE,16)
			$a := %EL_GROUP_DATA[$cur_instrument]
	        while ($a < %EL_GROUP_DATA[$cur_instrument + 1])
				set_engine_par($ENGINE_PAR_ATTACK, $el_attack, $a, find_mod($a, "ENV_AHDSR"), -1)
	        	inc($a)
	        end while
		
			$src_pointer := $SRC_EL_ATTACK
			call store_SOURCE_data
		
			set_control_par_str(%source_control_id[$SRC_EL_ATTACK],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_ATTACK,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_el_attack,get_engine_par_disp($ENGINE_PAR_ATTACK,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_EL_ATTACK] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_ATTACK] > $LABEL_WAIT - 5)
				set_text ($lbl_el_attack,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[12], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($el_hold)
			set_control_par(%stat_src_lbl_id[13], $CONTROL_PAR_HIDE,16)
			$a := %EL_GROUP_DATA[$cur_instrument]
	        while ($a < %EL_GROUP_DATA[$cur_instrument + 1])
				set_engine_par($ENGINE_PAR_HOLD, $el_hold, $a, find_mod($a, "ENV_AHDSR"), -1)
	        	inc($a)
	        end while
		
			$src_pointer := $SRC_EL_HOLD
			call store_SOURCE_data
		
			set_control_par_str(%source_control_id[$SRC_EL_HOLD],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_HOLD,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_el_hold,get_engine_par_disp($ENGINE_PAR_HOLD,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_EL_HOLD] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_HOLD] > $LABEL_WAIT - 5)
				set_text ($lbl_el_hold,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[13], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on
		on ui_control ($el_decay)
			set_control_par(%stat_src_lbl_id[14], $CONTROL_PAR_HIDE,16)
			$a := %EL_GROUP_DATA[$cur_instrument]
	        while ($a < %EL_GROUP_DATA[$cur_instrument + 1])
				set_engine_par($ENGINE_PAR_DECAY, $el_decay, $a, find_mod($a, "ENV_AHDSR"), -1)
	        	inc($a)
	        end while
		
			$src_pointer := $SRC_EL_DECAY
			call store_SOURCE_data
		
			set_control_par_str(%source_control_id[$SRC_EL_DECAY],$CONTROL_PAR_LABEL,get_engine_par_disp($ENGINE_PAR_DECAY,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			set_text ($lbl_el_decay,get_engine_par_disp($ENGINE_PAR_DECAY,...
										%EL_GROUP_DATA[$cur_instrument], find_mod(%EL_GROUP_DATA[$cur_instrument], "ENV_AHDSR"), -1) & " ms")
			%lbl_src_last_time[$SRC_EL_DECAY] := $ENGINE_UPTIME
			wait($LABEL_WAIT * 1000)
			if($ENGINE_UPTIME - %lbl_src_last_time[$SRC_EL_DECAY] > $LABEL_WAIT - 5)
				set_text ($lbl_el_decay,"")
				if ($source_TAB = 1)
					set_control_par(%stat_src_lbl_id[14], $CONTROL_PAR_HIDE,0)
				end if
			end if
		end on

	{Acoustic Instrument SWITCH}
		{MENUs}
			on ui_control ($Ac_Kick_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Kick_mnu)
				$Ac_sel_Kick	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_KICK, 0, $Ac_sel_Kick)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
		    	pgs_set_key_val(COMMAND, 0, -1)
		    	pgs_set_key_val(COMMAND, 0, 6)
			end on
			on ui_control ($Ac_Snare_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Snare_mnu)
				$Ac_sel_Snare	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_SNARE, 0, $Ac_sel_Snare)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
		    	pgs_set_key_val(COMMAND, 0, -1)
		    	pgs_set_key_val(COMMAND, 0, 6)
			end on
			on ui_control ($Ac_HiHat_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_HiHat_mnu)
				$Ac_sel_HiHat	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_HIHAT, 0, $Ac_sel_HiHat)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Tom1_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom1_mnu)
				$Ac_sel_Tom1	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_TOM1, 0, $Ac_sel_Tom1)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Tom2_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom2_mnu)
				$Ac_sel_Tom2	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_TOM2, 0, $Ac_sel_Tom2)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Tom3_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom3_mnu)
				$Ac_sel_Tom3	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_TOM3, 0, $Ac_sel_Tom3)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Cymb1_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb1_mnu)
				$Ac_sel_Cymb1	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_CYMB1, 0, $Ac_sel_Cymb1)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Cymb2_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb2_mnu)
				$Ac_sel_Cymb2	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_CYMB2, 0, $Ac_sel_Cymb2)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Cymb3_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb3_mnu)
				$Ac_sel_Cymb3	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := 0
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_CYMB3, 0, $Ac_sel_Cymb3)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Perc1_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc1_mnu)
				$Ac_sel_Perc1	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := $Ac_sel_Perc1
				$perc_A_recall := $Ac_sel_Perc1
				set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_A_pics[$perc_A_recall])
				set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_PERC1, 0, $Ac_sel_Perc1)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Perc2_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc2_mnu)
				$Ac_sel_Perc2	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := $Ac_sel_Perc2
				$perc_B_recall := $Ac_sel_Perc2
				set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_B_pics[$perc_B_recall])
				set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_PERC2, 0, $Ac_sel_Perc2)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Perc3_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc3_mnu)
				$Ac_sel_Perc3	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := $Ac_sel_Perc3
				$perc_C_recall := $Ac_sel_Perc3
				set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_C_pics[$perc_C_recall])
				set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_PERC3, 0, $Ac_sel_Perc3)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Perc4_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc4_mnu)
				$Ac_sel_Perc4	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := $Ac_sel_Perc4
				$perc_D_recall := $Ac_sel_Perc4
				set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_D_pics[$perc_D_recall])
				set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_PERC4, 0, $Ac_sel_Perc4)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($Ac_Perc5_mnu)
				set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc5_mnu)
				$Ac_sel_Perc5	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				$inst_lbl_index := $Ac_sel_Perc5
				$perc_E_recall := $Ac_sel_Perc5
				set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_E_pics[$perc_E_recall])
				set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ACTIVE_PERC5, 0, $Ac_sel_Perc5)
				$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_AC_INST_selection
				call update_AC_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $AC_NUM_GROUPS)
		    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on

		{ARROWs}
			{PREVIOUS <-}
				on ui_control ($Ac_Prev_btn)
				    $Ac_Prev_btn := 0
				    select ($cur_tile)
				    	case $TILE_KICK
				    		if ($Ac_Kick_mnu - 1 >= 0)
				    		    dec ($Ac_Kick_mnu)
				    		else
				    		    $Ac_Kick_mnu := $NUM_AC_KICK - 1
				    		end if
				    		
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Kick_mnu)
				    		
				    		$Ac_sel_Kick := $Ac_Kick_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_KICK, 0, $Ac_sel_Kick)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_SNARE
				    		if ($Ac_Snare_mnu - 1 >= 0)
				    		    dec ($Ac_Snare_mnu)
				    		else
				    		    $Ac_Snare_mnu := $NUM_AC_SNARE - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Snare_mnu)
				    		$Ac_sel_Snare := $Ac_Snare_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_SNARE, 0, $Ac_sel_Snare)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_HIHAT
				    		if ($Ac_HiHat_mnu - 1 >= 0)
				    		    dec ($Ac_HiHat_mnu)
				    		else
				    		    $Ac_HiHat_mnu := $NUM_AC_HIHAT - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_HiHat_mnu)
				    		$Ac_sel_HiHat := $Ac_HiHat_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_HIHAT, 0, $Ac_sel_HiHat)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM1
				    		if ($Ac_Tom1_mnu - 1 >= 0)
				    		    dec ($Ac_Tom1_mnu)
				    		else
				    		    $Ac_Tom1_mnu := $NUM_AC_TOM1 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom1_mnu)
				    		$Ac_sel_Tom1 := $Ac_Tom1_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM1, 0, $Ac_sel_Tom1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM2
				    		if ($Ac_Tom2_mnu - 1 >= 0)
				    		    dec ($Ac_Tom2_mnu)
				    		else
				    		    $Ac_Tom2_mnu := $NUM_AC_TOM2 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom2_mnu)
				    		$Ac_sel_Tom2 := $Ac_Tom2_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM2, 0, $Ac_sel_Tom2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM3
				    		if ($Ac_Tom3_mnu - 1 >= 0)
				    		    dec ($Ac_Tom3_mnu)
				    		else
				    		    $Ac_Tom3_mnu := $NUM_AC_TOM3 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom3_mnu)
				    		$Ac_sel_Tom3 := $Ac_Tom3_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM3, 0, $Ac_sel_Tom3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB1
				    		if ($Ac_Cymb1_mnu - 1 >= 0)
				    		    dec ($Ac_Cymb1_mnu)
				    		else
				    		    $Ac_Cymb1_mnu := $NUM_AC_CYMB1 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb1_mnu)
				    		$Ac_sel_Cymb1 := $Ac_Cymb1_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB1, 0, $Ac_sel_Cymb1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB2
				    		if ($Ac_Cymb2_mnu - 1 >= 0)
				    		    dec ($Ac_Cymb2_mnu)
				    		else
				    		    $Ac_Cymb2_mnu := $NUM_AC_CYMB2 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb2_mnu)
				    		$Ac_sel_Cymb2 := $Ac_Cymb2_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB2, 0, $Ac_sel_Cymb2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB3
				    		if ($Ac_Cymb3_mnu - 1 >= 0)
				    		    dec ($Ac_Cymb3_mnu)
				    		else
				    		    $Ac_Cymb3_mnu := $NUM_AC_CYMB3 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb3_mnu)
				    		$Ac_sel_Cymb3 := $Ac_Cymb3_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB3, 0, $Ac_sel_Cymb3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC1
				    		if ($Ac_Perc1_mnu - 1 >= 0)
				    		    dec ($Ac_Perc1_mnu)
				    		else
				    		    $Ac_Perc1_mnu := $NUM_AC_PERC1 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc1_mnu)
				    		$Ac_sel_Perc1 := $Ac_Perc1_mnu
				    		$inst_lbl_index := $Ac_sel_Perc1
				    		$perc_A_recall := $Ac_sel_Perc1
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_A_pics[$perc_A_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC1, 0, $Ac_sel_Perc1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC2
				    		if ($Ac_Perc2_mnu - 1 >= 0)
				    		    dec ($Ac_Perc2_mnu)
				    		else
				    		    $Ac_Perc2_mnu := $NUM_AC_PERC2 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc2_mnu)
				    		$Ac_sel_Perc2 := $Ac_Perc2_mnu
				    		$inst_lbl_index := $Ac_sel_Perc2
				    		$perc_B_recall := $Ac_sel_Perc2
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_B_pics[$perc_B_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC2, 0, $Ac_sel_Perc2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC3
				    		if ($Ac_Perc3_mnu - 1 >= 0)
				    		    dec ($Ac_Perc3_mnu)
				    		else
				    		    $Ac_Perc3_mnu := $NUM_AC_PERC3 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc3_mnu)
				    		$Ac_sel_Perc3 := $Ac_Perc3_mnu
				    		$inst_lbl_index := $Ac_sel_Perc3
				    		$perc_C_recall := $Ac_sel_Perc3
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_C_pics[$perc_C_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC3, 0, $Ac_sel_Perc3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC4
				    		if ($Ac_Perc4_mnu - 1 >= 0)
				    		    dec ($Ac_Perc4_mnu)
				    		else
				    		    $Ac_Perc4_mnu := $NUM_AC_PERC4 - 1
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc4_mnu)
				    		$Ac_sel_Perc4 := $Ac_Perc4_mnu
				    		$inst_lbl_index := $Ac_sel_Perc4
				    		$perc_D_recall := $Ac_sel_Perc4
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_D_pics[$perc_D_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC4, 0, $Ac_sel_Perc4)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection
				    		call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC5
					    	if ($Ac_Perc5_mnu - 1 >= 0)
					    	    dec ($Ac_Perc5_mnu)
					    	else
					    	    $Ac_Perc5_mnu := $NUM_AC_PERC5 - 1
					    	end if
							set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc5_mnu)
							$Ac_sel_Perc5 := $Ac_Perc5_mnu
							$inst_lbl_index := $Ac_sel_Perc5
							$perc_E_recall := $Ac_sel_Perc5
							set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_E_pics[$perc_E_recall])
							set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
							pgs_set_key_val(COMMAND, 0, -1)
							pgs_set_key_val(ACTIVE_PERC5, 0, $Ac_sel_Perc5)
							$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
							call store_AC_INST_selection
							call update_AC_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    end select
				end on
			{NEXT ->}
				on ui_control ($Ac_Next_btn)
				    $Ac_Next_btn := 0
				    select ($cur_tile)
				    	case $TILE_KICK
				    		if ($Ac_Kick_mnu + 1 <= $NUM_AC_KICK - 1)
				    		    inc ($Ac_Kick_mnu)
				    		else
				    		    $Ac_Kick_mnu := 0
				    		end if
				    		
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Kick_mnu)
				    		
				    		$Ac_sel_Kick := $Ac_Kick_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_KICK, 0, $Ac_sel_Kick)
				    		
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_SNARE
				    		if ($Ac_Snare_mnu + 1 <= $NUM_AC_SNARE - 1)
				    		    inc ($Ac_Snare_mnu)
				    		else
				    		    $Ac_Snare_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Snare_mnu)
				    		$Ac_sel_Snare := $Ac_Snare_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_SNARE, 0, $Ac_sel_Snare)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_HIHAT
				    		if ($Ac_HiHat_mnu + 1 <= $NUM_AC_HIHAT - 1)
				    		    inc ($Ac_HiHat_mnu)
				    		else
				    		    $Ac_HiHat_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_HiHat_mnu)
				    		$Ac_sel_HiHat := $Ac_HiHat_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_HIHAT, 0, $Ac_sel_HiHat)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM1
				    		if ($Ac_Tom1_mnu + 1 <= $NUM_AC_TOM1 - 1)
				    		    inc ($Ac_Tom1_mnu)
				    		else
				    		    $Ac_Tom1_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom1_mnu)
				    		$Ac_sel_Tom1 := $Ac_Tom1_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM1, 0, $Ac_sel_Tom1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM2
				    		if ($Ac_Tom2_mnu + 1 <= $NUM_AC_TOM2 - 1)
				    		    inc ($Ac_Tom2_mnu)
				    		else
				    		    $Ac_Tom2_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom2_mnu)
				    		$Ac_sel_Tom2 := $Ac_Tom2_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM2, 0, $Ac_sel_Tom2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM3
				    		if ($Ac_Tom3_mnu + 1 <= $NUM_AC_TOM3 - 1)
				    		    inc ($Ac_Tom3_mnu)
				    		else
				    		    $Ac_Tom3_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Tom3_mnu)
				    		$Ac_sel_Tom3 := $Ac_Tom3_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_TOM3, 0, $Ac_sel_Tom3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB1
				    		if ($Ac_Cymb1_mnu + 1 <= $NUM_AC_CYMB1 - 1)
				    		    inc ($Ac_Cymb1_mnu)
				    		else
				    		    $Ac_Cymb1_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb1_mnu)
				    		$Ac_sel_Cymb1 := $Ac_Cymb1_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB1, 0, $Ac_sel_Cymb1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB2
				    		if ($Ac_Cymb2_mnu + 1 <= $NUM_AC_CYMB2 - 1)
				    		    inc ($Ac_Cymb2_mnu)
				    		else
				    		    $Ac_Cymb2_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb2_mnu)
				    		$Ac_sel_Cymb2 := $Ac_Cymb2_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB2, 0, $Ac_sel_Cymb2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_CYMB3
				    		if ($Ac_Cymb3_mnu + 1 <= $NUM_AC_CYMB3 - 1)
				    		    inc ($Ac_Cymb3_mnu)
				    		else
				    		    $Ac_Cymb3_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Cymb3_mnu)
				    		$Ac_sel_Cymb3 := $Ac_Cymb3_mnu
				    		$inst_lbl_index := 0
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_CYMB3, 0, $Ac_sel_Cymb3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC1
				    		if ($Ac_Perc1_mnu + 1 <= $NUM_AC_PERC1 - 1)
				    		    inc ($Ac_Perc1_mnu)
				    		else
				    		    $Ac_Perc1_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc1_mnu)
				    		$Ac_sel_Perc1 := $Ac_Perc1_mnu
				    		$inst_lbl_index := $Ac_sel_Perc1
				    		$perc_A_recall := $Ac_sel_Perc1
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_A_pics[$perc_A_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC1, 0, $Ac_sel_Perc1)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC2
				    		if ($Ac_Perc2_mnu + 1 <= $NUM_AC_PERC2 - 1)
				    		    inc ($Ac_Perc2_mnu)
				    		else
				    		    $Ac_Perc2_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc2_mnu)
				    		$Ac_sel_Perc2 := $Ac_Perc2_mnu
				    		$inst_lbl_index := $Ac_sel_Perc2
				    		$perc_B_recall := $Ac_sel_Perc2
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_B_pics[$perc_B_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC2, 0, $Ac_sel_Perc2)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC3
				    		if ($Ac_Perc3_mnu + 1 <= $NUM_AC_PERC3 - 1)
				    		    inc ($Ac_Perc3_mnu)
				    		else
				    		    $Ac_Perc3_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc3_mnu)
				    		$Ac_sel_Perc3 := $Ac_Perc3_mnu
				    		$inst_lbl_index := $Ac_sel_Perc3
				    		$perc_C_recall := $Ac_sel_Perc3
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_C_pics[$perc_C_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC3, 0, $Ac_sel_Perc3)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC4
				    		if ($Ac_Perc4_mnu + 1 <= $NUM_AC_PERC4 - 1)
				    		    inc ($Ac_Perc4_mnu)
				    		else
				    		    $Ac_Perc4_mnu := 0
				    		end if
				    		set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc4_mnu)
				    		$Ac_sel_Perc4 := $Ac_Perc4_mnu
				    		$inst_lbl_index := $Ac_sel_Perc4
				    		$perc_D_recall := $Ac_sel_Perc4
				    		set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_D_pics[$perc_D_recall])
				    		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ACTIVE_PERC4, 0, $Ac_sel_Perc4)
				    		$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_PERC5
					    	if ($Ac_Perc5_mnu + 1 <= $NUM_AC_PERC5 - 1)
					    	    inc ($Ac_Perc5_mnu)
					    	else
					    	    $Ac_Perc5_mnu := 0
					    	end if
							set_control_par(%Ac_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$Ac_Perc5_mnu)
							$Ac_sel_Perc5 := $Ac_Perc5_mnu
							$inst_lbl_index := $Ac_sel_Perc5
							$perc_E_recall := $Ac_sel_Perc5
							set_control_par_str(%tile_control_id[$cur_tile], $CONTROL_PAR_PICTURE, !perc_E_pics[$perc_E_recall])
							set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile] + $inst_lbl_index)
							pgs_set_key_val(COMMAND, 0, -1)
							pgs_set_key_val(ACTIVE_PERC5, 0, $Ac_sel_Perc5)
							$Ac_menu_index	:= get_control_par(%Ac_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
							call store_AC_INST_selection

				    		call update_AC_PURGE_state
				    		
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $AC_NUM_GROUPS)
					    		        purge_group($group_count, %Ac_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    end select
				end on

	{Electronic Instrument SWITCH}
		{MENUs}
			on ui_control ($El_Kick_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Kick_mnu)
				$El_sel_Kick := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_KICK, 0, $El_sel_Kick)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
	    		call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($El_Snare_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Snare_mnu)
				$El_sel_Snare := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_SNARE, 0, $El_sel_Snare)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
				call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($El_HiHat_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_HiHat_mnu)
				$El_sel_HiHat := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_HIHAT, 0, $El_sel_HiHat)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
				call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($El_Tom1_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom1_mnu)
				$El_sel_Tom1 := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_TOM1, 0, $El_sel_Tom1)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
				call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($El_Tom2_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom2_mnu)
				$El_sel_Tom2 := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_TOM2, 0, $El_sel_Tom2)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
				call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
			on ui_control ($El_Tom3_mnu)
				set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom3_mnu)
				$El_sel_Tom3 := get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				pgs_set_key_val(COMMAND, 0, -1)
				pgs_set_key_val(ELEC_ACTIVE_TOM3, 0, $El_sel_Tom3)
				$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				call store_EL_INST_selection
				call update_EL_PURGE_state
	    		if (pgs_key_exists(PURGE_MODE))	
	    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
		    			$group_count := 0
		    		    while ($group_count < $EL_NUM_GROUPS)
		    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
		    		        inc($group_count)
		    		    end while
		    		end if
		    	end if
			end on
		
		{ARROWs}
			{PREV <-}
				on ui_control ($El_Prev_btn)
				    $El_Prev_btn := 0
				    select ($cur_tile)
				    	case $TILE_KICK
				    		if ($El_Kick_mnu - 1 >= 0)
				    		    dec ($El_Kick_mnu)
				    		else
				    		    $El_Kick_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Kick_mnu)
				    		$El_sel_Kick := $El_Kick_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_KICK, 0, $El_sel_Kick)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_SNARE
				    		if ($El_Snare_mnu - 1 >= 0)
				    		    dec ($El_Snare_mnu)
				    		else
				    		    $El_Snare_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Snare_mnu)
				    		$El_sel_Snare := $El_Snare_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_SNARE, 0, $El_sel_Snare)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_HIHAT
				    		if ($El_HiHat_mnu - 1 >= 0)
				    		    dec ($El_HiHat_mnu)
				    		else
				    		    $El_HiHat_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_HiHat_mnu)
				    		$El_sel_HiHat := $El_HiHat_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_HIHAT, 0, $El_sel_HiHat)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM1
				    		if ($El_Tom1_mnu - 1 >= 0)
				    		    dec ($El_Tom1_mnu)
				    		else
				    		    $El_Tom1_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom1_mnu)
				    		$El_sel_Tom1 := $El_Tom1_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM1, 0, $El_sel_Tom1)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM2
				    		if ($El_Tom2_mnu - 1 >= 0)
				    		    dec ($El_Tom2_mnu)
				    		else
				    		    $El_Tom2_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom2_mnu)
				    		$El_sel_Tom2 := $El_Tom2_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM2, 0, $El_sel_Tom2)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM3
				    		if ($El_Tom3_mnu - 1 >= 0)
				    		    dec ($El_Tom3_mnu)
				    		else
				    		    $El_Tom3_mnu := $NUM_EL_LAYERS - 1
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom3_mnu)
				    		$El_sel_Tom3 := $El_Tom3_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM3, 0, $El_sel_Tom3)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    end select
				end on
			{NEXT ->}
				on ui_control ($El_Next_btn)
				    $El_Next_btn := 0
				    select ($cur_tile)
				    	case $TILE_KICK
				    		if ($El_Kick_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_Kick_mnu)
				    		else
				    		    $El_Kick_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Kick_mnu)
				    		$El_sel_Kick := $El_Kick_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_KICK, 0, $El_sel_Kick)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_SNARE
				    		if ($El_Snare_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_Snare_mnu)
				    		else
				    		    $El_Snare_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Snare_mnu)
				    		$El_sel_Snare := $El_Snare_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_SNARE, 0, $El_sel_Snare)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_HIHAT
				    		if ($El_HiHat_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_HiHat_mnu)
				    		else
				    		    $El_HiHat_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_HiHat_mnu)
				    		$El_sel_HiHat := $El_HiHat_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_HIHAT, 0, $El_sel_HiHat)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM1
				    		if ($El_Tom1_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_Tom1_mnu)
				    		else
				    		    $El_Tom1_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom1_mnu)
				    		$El_sel_Tom1 := $El_Tom1_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM1, 0, $El_sel_Tom1)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM2
				    		if ($El_Tom2_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_Tom2_mnu)
				    		else
				    		    $El_Tom2_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom2_mnu)
				    		$El_sel_Tom2 := $El_Tom2_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM2, 0, $El_sel_Tom2)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    	case $TILE_TOM3
				    		if ($El_Tom3_mnu + 1 <= $NUM_EL_LAYERS - 1)
				    		    inc ($El_Tom3_mnu)
				    		else
				    		    $El_Tom3_mnu := 0
				    		end if
				    		set_control_par(%El_src_Pic_id[$cur_tile], $CONTROL_PAR_PICTURE_STATE,$El_Tom3_mnu)
				    		$El_sel_Tom3 := $El_Tom3_mnu
				    		pgs_set_key_val(COMMAND, 0, -1)
				    		pgs_set_key_val(ELEC_ACTIVE_TOM3, 0, $El_sel_Tom3)

				    		$El_menu_index	:= get_control_par(%El_Layer_Menu_id[$cur_tile],$CONTROL_PAR_VALUE)
				    		
				    		call store_EL_INST_selection
				    		call update_EL_PURGE_state
				    		if (pgs_key_exists(PURGE_MODE))	
				    			if (pgs_get_key_val(PURGE_MODE, 0) = 1)	
					    			$group_count := 0
					    		    while ($group_count < $EL_NUM_GROUPS)
					    		        purge_group($group_count + $AC_NUM_GROUPS, %El_Group_PURGE_State[$group_count])
					    		        inc($group_count)
					    		    end while
					    		end if
					    	end if
				    end select
				end on

{MASTER Effects Callbacks}
	function store_master_FX_data

		%master_fx_data[$fx_pointer] := get_control_par(%mast_effects_control_id[$fx_pointer],$CONTROL_PAR_VALUE)
	end function
		
	on ui_control ($mast_trans_attack_sld)
		set_control_par(%stat_mast_lbl_fx_id[00], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_TR_ATTACK,$mast_trans_attack_sld,-1,$TRANS1_SLOT,$bus_index)
		$fx_pointer := $MAST_TRANS_ATTACK
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_TR_ATTACK,-1,$TRANS1_SLOT,$bus_index) & " %")
		set_text ($lbl_mast_trans_attack,get_engine_par_disp($ENGINE_PAR_TR_ATTACK,-1,$TRANS1_SLOT,$bus_index) & " %")
		%lbl_mast_fx_last_time[$MAST_TRANS_ATTACK] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_TRANS_ATTACK] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_trans_attack,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[00], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_trans_sustain_sld)
		set_control_par(%stat_mast_lbl_fx_id[01], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_TR_SUSTAIN,$mast_trans_sustain_sld,-1,$TRANS1_SLOT,$bus_index)
		$fx_pointer := $MAST_TRANS_RELEASE
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_TR_SUSTAIN,-1,$TRANS1_SLOT,$bus_index) & " %")
		set_text ($lbl_mast_trans_sustain,get_engine_par_disp($ENGINE_PAR_TR_SUSTAIN,-1,$TRANS1_SLOT,$bus_index) & " %")
		%lbl_mast_fx_last_time[$MAST_TRANS_RELEASE] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_TRANS_RELEASE] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_trans_sustain,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[01], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	{Solid-G Compressor}
	on ui_control ($mast_comp_thres_sld)
		set_control_par(%stat_mast_lbl_fx_id[02], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD,$mast_comp_thres_sld,-1,$COMP_SLOT,$bus_index)
		$fx_pointer := $MAST_COMP_THRES
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SCOMP_THRESHOLD,-1,$COMP_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_comp_thres,get_engine_par_disp($ENGINE_PAR_SCOMP_THRESHOLD,-1,$COMP_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_COMP_THRES] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_COMP_THRES] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_comp_thres,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[02], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_comp_attack_sld)
		set_control_par(%stat_mast_lbl_fx_id[03], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SCOMP_ATTACK,$mast_comp_attack_sld,-1,$COMP_SLOT,$bus_index)
		$fx_pointer := $MAST_COMP_ATTACK
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SCOMP_ATTACK,-1,$COMP_SLOT,$bus_index) & " ms")
		set_text ($lbl_mast_comp_attack,get_engine_par_disp($ENGINE_PAR_SCOMP_ATTACK,-1,$COMP_SLOT,$bus_index) & " ms")
		%lbl_mast_fx_last_time[$MAST_COMP_ATTACK] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_COMP_ATTACK] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_comp_attack,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[03], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_comp_ratio_sld)
		set_control_par(%stat_mast_lbl_fx_id[04], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SCOMP_RATIO,$mast_comp_ratio_sld,-1,$COMP_SLOT,$bus_index)
		$fx_pointer := $MAST_COMP_RATIO
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SCOMP_RATIO,-1,$COMP_SLOT,$bus_index) & "")
		set_text ($lbl_mast_comp_ratio,get_engine_par_disp($ENGINE_PAR_SCOMP_RATIO,-1,$COMP_SLOT,$bus_index) & "")
		%lbl_mast_fx_last_time[$MAST_COMP_RATIO] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_COMP_RATIO] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_comp_ratio,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[04], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_comp_makeup_sld)
		set_control_par(%stat_mast_lbl_fx_id[05], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SCOMP_MAKEUP,$mast_comp_makeup_sld,-1,$COMP_SLOT,$bus_index)
		$fx_pointer := $MAST_COMP_MAKEUP
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SCOMP_MAKEUP,-1,$COMP_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_comp_makeup,get_engine_par_disp($ENGINE_PAR_SCOMP_MAKEUP,-1,$COMP_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_COMP_MAKEUP] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_COMP_RATIO] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_comp_makeup,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[05], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_sat_gain_sld)
		set_control_par(%stat_mast_lbl_fx_id[06], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SHAPE,$mast_sat_gain_sld,-1,$SAT_SLOT,$bus_index)
		$fx_pointer := $MAST_SAT_GAIN
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SHAPE,-1,$SAT_SLOT,$bus_index) & " %")
		set_text ($lbl_mast_sat_gain,get_engine_par_disp($ENGINE_PAR_SHAPE,-1,$SAT_SLOT,$bus_index) & " %")
		%lbl_mast_fx_last_time[$MAST_SAT_GAIN] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_SAT_GAIN] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_sat_gain,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[06], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_sat_level_sld)
		set_control_par(%stat_mast_lbl_fx_id[07], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,$mast_sat_level_sld,-1,$SAT_SLOT,$bus_index)
		$fx_pointer := $MAST_SAT_LEVEL
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SAT_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_sat_level,get_engine_par_disp($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN,-1,$SAT_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_SAT_LEVEL] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_SAT_LEVEL] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_sat_level,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[07], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_lf_freq_sld)
		set_control_par(%stat_mast_lbl_fx_id[08], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_LF_FREQ,$mast_eq_lf_freq_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_LOW_FREQ
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_LF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		set_text ($lbl_mast_eq_lf_freq,get_engine_par_disp($ENGINE_PAR_SEQ_LF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		%lbl_mast_fx_last_time[$MAST_EQ_LOW_FREQ] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_LOW_FREQ] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_lf_freq,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[08], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_lf_db_sld)
		set_control_par(%stat_mast_lbl_fx_id[09], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_LF_GAIN,$mast_eq_lf_db_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_LOW_GAIN
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_LF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_eq_lf_db,get_engine_par_disp($ENGINE_PAR_SEQ_LF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_EQ_LOW_GAIN] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_LOW_GAIN] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_lf_db,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[09], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_hmf_freq_sld)
		set_control_par(%stat_mast_lbl_fx_id[10], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_HMF_FREQ,$mast_eq_hmf_freq_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_MID_FREQ
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_HMF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		set_text ($lbl_mast_eq_hmf_freq,get_engine_par_disp($ENGINE_PAR_SEQ_HMF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		%lbl_mast_fx_last_time[$MAST_EQ_MID_FREQ] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_MID_FREQ] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_hmf_freq,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[10], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_hmf_db_sld)
		set_control_par(%stat_mast_lbl_fx_id[11], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_HMF_GAIN,$mast_eq_hmf_db_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_MID_GAIN
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_HMF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_eq_hmf_db,get_engine_par_disp($ENGINE_PAR_SEQ_HMF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_EQ_MID_GAIN] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_MID_GAIN] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_hmf_db,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[11], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_hf_freq_sld)
		set_control_par(%stat_mast_lbl_fx_id[12], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_HF_FREQ,$mast_eq_hf_freq_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_HI_FREQ
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_HF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		set_text ($lbl_mast_eq_hf_freq,get_engine_par_disp($ENGINE_PAR_SEQ_HF_FREQ,-1,$EQ1_SLOT,$bus_index) & " Hz")
		%lbl_mast_fx_last_time[$MAST_EQ_HI_FREQ] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_HI_FREQ] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_hf_freq,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[12], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on
	on ui_control ($mast_eq_hf_db_sld)
		set_control_par(%stat_mast_lbl_fx_id[13], $CONTROL_PAR_HIDE,16)
		$bus_index := 1
		set_engine_par($ENGINE_PAR_SEQ_HF_GAIN,$mast_eq_hf_db_sld,-1,$EQ1_SLOT,$bus_index)
		$fx_pointer := $MAST_EQ_HI_GAIN
		call store_master_FX_data
		set_control_par_str (%lbl_mast_fx_id[$fx_pointer],$CONTROL_PAR_LABEL,...
                      get_engine_par_disp($ENGINE_PAR_SEQ_HF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		set_text ($lbl_mast_eq_hf_db,get_engine_par_disp($ENGINE_PAR_SEQ_HF_GAIN,-1,$EQ1_SLOT,$bus_index) & " dB")
		%lbl_mast_fx_last_time[$MAST_EQ_HI_GAIN] := $ENGINE_UPTIME
		wait($LABEL_WAIT * 1000)
		if($ENGINE_UPTIME - %lbl_mast_fx_last_time[$MAST_EQ_HI_GAIN] > $LABEL_WAIT - 5)
			set_text ($lbl_mast_eq_hf_db,"")
			if ($effects_TAB = 1)
				set_control_par(%stat_mast_lbl_fx_id[13], $CONTROL_PAR_HIDE,0)
			end if
		end if
	end on

	on ui_control($mast_onoff_trans)
		$bus_index := 1
		%master_onoff_data[0] := $mast_onoff_trans
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($mast_onoff_trans+1) mod 2,-1,$TRANS1_SLOT,$bus_index)
	end on
	on ui_control($mast_onoff_comp)
		$bus_index := 1
		%master_onoff_data[1] := $mast_onoff_comp
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($mast_onoff_comp+1) mod 2,-1,$COMP_SLOT,$bus_index)
	end on
	on ui_control($mast_onoff_sat)
		$bus_index := 1
		%master_onoff_data[2] := $mast_onoff_sat
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($mast_onoff_sat+1) mod 2,-1,$SAT_SLOT,$bus_index)
	end on
	on ui_control($mast_onoff_eq)
		$bus_index := 1
		%master_onoff_data[3] := $mast_onoff_eq
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS,($mast_onoff_eq+1) mod 2,-1,$EQ1_SLOT,$bus_index)
	end on

	{Velocity Callbacks}
		on ui_control ($linear_velocity_btn)
			if ($linear_velocity_btn = 0)
				$linear_velocity_btn := 1
			else
				$mode_velocity := 0
				%mode_velocity_key[$active_key_sld] := $mode_velocity
				$exp_1_velocity_btn := 0
				$exp_2_velocity_btn := 0
				$fix_velocity_btn := 0
				call calc_velocity_curve
			end if
		end on

		on ui_control ($exp_1_velocity_btn)
			if ($exp_1_velocity_btn = 0)
				$exp_1_velocity_btn := 1
			else
				$mode_velocity := 1
				%mode_velocity_key[$active_key_sld] := $mode_velocity
				$linear_velocity_btn := 0
				$exp_2_velocity_btn := 0
				$fix_velocity_btn := 0
				call calc_velocity_curve
			end if
		end on

		on ui_control ($exp_2_velocity_btn)
			if ($exp_2_velocity_btn = 0)
				$exp_2_velocity_btn := 1
			else
				$mode_velocity := 2
				%mode_velocity_key[$active_key_sld] := $mode_velocity
				$linear_velocity_btn := 0
				$exp_1_velocity_btn := 0
				$fix_velocity_btn := 0
				call calc_velocity_curve
			end if
		end on

		on ui_control ($fix_velocity_btn)
			if ($fix_velocity_btn = 0)
				$fix_velocity_btn := 1
			else
				$mode_velocity := 3
				%mode_velocity_key[$active_key_sld] := $mode_velocity
				$linear_velocity_btn := 0
				$exp_1_velocity_btn := 0
				$exp_2_velocity_btn := 0
				call calc_velocity_curve
			end if
		end on

{RANGE Callbacks}
	on ui_control ($low_key_sld)
		if ($low_key_sld <= $hi_key_sld)
			call key_coloring
		else
			$low_key_sld := $hi_key_sld
		end if
	end on
	on ui_control ($hi_key_sld)
		if ($hi_key_sld >= $low_key_sld)
			call key_coloring
		else
			$hi_key_sld := $low_key_sld			
		end if
	end on

	on ui_control ($low_btn_key_up)
		inc($low_key_sld)
		if ($low_key_sld <= $hi_key_sld)
			call key_coloring
		else
			$low_key_sld := $hi_key_sld
		end if
	end on
	on ui_control ($low_btn_key_dn)
		dec($low_key_sld)
		if ($low_key_sld <= $hi_key_sld)
			call key_coloring
		else
			$low_key_sld := $hi_key_sld
		end if
	end on
	on ui_control ($hi_btn_key_up)
		inc($hi_key_sld)
		if ($hi_key_sld >= $low_key_sld)
			call key_coloring
		else
			$hi_key_sld := $low_key_sld			
		end if
	end on
	on ui_control ($hi_btn_key_dn)
		dec($hi_key_sld)
		if ($hi_key_sld >= $low_key_sld)
			call key_coloring
		else
			$hi_key_sld := $low_key_sld			
		end if
	end on

{Articulation MENU Callbacks}
	on ui_control ($current_mapping_preset_mnu)
		if ($current_mapping_preset_mnu = $NUM_FACTORY_PRESETS)
			$current_mapping_preset_mnu := $NUM_FACTORY_PRESETS - 1
		end if

		call recall_data	
		{call update_mapping_editor_gui}
	end on

	on ui_control ($instruments_mnu)
		$count_1 := 0
		if ($instruments_mnu = -1)
			set_menu_item_str(%mapping_id[2], $count_1, "(None)" & @ART_MENU_ALIGNMENT_HELPER)
			set_menu_item_value(%mapping_id[2], $count_1, -1)
			set_menu_item_visibility(%mapping_id[2], $count_1, 1)
			$articulations_mnu := -1
			inc($count_1)
		else
			$count_2 := %AC_INSTRUMENT_OFFSET[$instruments_mnu]
			while ($count_2 < %AC_INSTRUMENT_OFFSET[$instruments_mnu + 1])
				if (%KEY_USED[$count_2] > 0)
					set_menu_item_str(%mapping_id[2], $count_1, !ARTICULATION_NAMES[$count_2] & @ART_MENU_ALIGNMENT_HELPER)
					set_menu_item_value(%mapping_id[2], $count_1, $count_2)
					set_menu_item_visibility(%mapping_id[2], $count_1, 1)
					inc($count_1)
				end if
				inc($count_2)
			end while
			$articulations_mnu := %AC_INSTRUMENT_OFFSET[$instruments_mnu]
		end if
		
		while ($count_1 < 20)
			set_menu_item_visibility(%mapping_id[2], $count_1, 0)
			inc($count_1)
		end while

		if ($articulations_mnu = -1)
			$count_1 := 0
			while ($count_1 < 128)
				if (%current_mapping_data[$count_1] = %current_mapping_data[$active_key_sld])
					%inverse_mapping_data[%current_mapping_data[$active_key_sld]] := $count_1
					$count_1 := 128
				end if
				inc($count_1)
			end while
		else
			%inverse_mapping_data[$articulations_mnu] := $active_key_sld
		end if
		%current_mapping_data[$active_key_sld] := $articulations_mnu
		
		pgs_set_key_val(COMMAND, 0, -1)
		pgs_set_key_val(MAPPING, $articulations_mnu, $active_key_sld)
		pgs_set_key_val(COMMAND, 0, 6)

		$cur_tile		 := %Inst_to_Tile_remap[$instruments_mnu]
		$cur_instrument	 := $instruments_mnu
		$last_instrument := $cur_instrument
		$last_tile		 := $cur_tile

		call tile_Select		

		set_control_par($mid_color_panel_id,$CONTROL_PAR_PICTURE_STATE,%mid_panel_color_frame[$cur_tile])
		set_control_par($inst_lbl_id,$CONTROL_PAR_PICTURE_STATE,%inst_lbl_names[$cur_tile])	

	end on

	on ui_control ($articulations_mnu)

		if ($articulations_mnu = -1)
			$count_1 := 0
			while ($count_1 < 128)
				if (%current_mapping_data[$count_1] = %current_mapping_data[$active_key_sld])
					%inverse_mapping_data[%current_mapping_data[$active_key_sld]] := $count_1
					$count_1 := 128
				end if
				inc($count_1)
			end while
		else
			%inverse_mapping_data[$articulations_mnu] := $active_key_sld
		end if
		%current_mapping_data[$active_key_sld] := $articulations_mnu
		pgs_set_key_val(COMMAND, 0, -1)
		pgs_set_key_val(MAPPING, $articulations_mnu, $active_key_sld)
		pgs_set_key_val(COMMAND, 0, 6)
	end on

on note
	
	if ($learn_btn = 1)
		if ($note_counter = 0)
			$low_key_sld := $EVENT_NOTE
			inc($note_counter)
		else
			$hi_key_sld := $EVENT_NOTE
			$note_counter := 0
			$learn_btn := 0
		end if
		call key_coloring
	else
		if (in_range($EVENT_NOTE,$low_key_sld,$hi_key_sld))
			$cur_note := $EVENT_NOTE
			$active_key_sld := $EVENT_NOTE
			$note_offset := $cur_note - $C_3
			pgs_set_key_val(DISTANCE_FROM_C3, 0, $note_offset)
			change_note($EVENT_ID, $articulations_mnu)
		else
			ignore_event($EVENT_ID)
			exit
		end if
	end if

	set_control_par(%tile_control_id[$cur_tile],$CONTROL_PAR_VALUE,1)

	{Velocity Curve & Range}
	change_velo($EVENT_ID, %table[$cur_note * 128 + $EVENT_VELOCITY])
end on

on release
	set_control_par(%tile_control_id[$cur_tile],$CONTROL_PAR_VALUE,0)
end on

on listener
	select ($NI_SIGNAL_TYPE)
		case $NI_SIGNAL_TIMER_MS
			if ($gui_update = 0)
				$gui_update := 1
				call tile_Select
				call key_coloring
				$mute_pointer := $OHS_TL
				call tile_MUTE
				$mute_pointer := $OHM_TL
				call tile_MUTE
				$mute_pointer := $ROOM_TL
				call tile_MUTE
				change_listener_par($NI_SIGNAL_TIMER_MS,0)
			end if
	end select
end on
